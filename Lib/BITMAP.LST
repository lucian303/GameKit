
Module: C:\GKIT\source\bitmap.cpp
Group: 'DGROUP' CONST,CONST2,_DATA,_BSS

Segment: _TEXT  PARA USE32  00001a3f bytes  

//Bitmap.cpp
//The bitmap class
//Bitmap format
//word with, height, transparency, fade
//bitmap data size = width * height
//bitmap palette -> 768 bytes
//different from screen palette
#include <iostream.h>
#include <string.h>
#include <fstream.h>
#include <assert.h>
#include "..\h\gkit.h"
#include "..\h\mode13h.h"
#include "..\h\palette.h"
#include "..\h\clip.h"
#include "..\h\bitmap.h"

Bitmap::Bitmap () {
 0000                    near Bitmap::Bitmap():
 0000  53                                push    ebx
 0001  51                                push    ecx
 0002  52                                push    edx
 0003  56                                push    esi
 0004  57                                push    edi
 0005  55                                push    ebp
 0006  89 e5                             mov     ebp,esp
 0008  81 ec 08 00 00 00                 sub     esp,00000008H
 000e  89 45 fc                          mov     -4H[ebp],eax

   width = height = 0;
 0011  8b 45 fc                          mov     eax,-4H[ebp]
 0014  c7 40 04 00 00 00 
       00                                mov     dword ptr +4H[eax],00000000H
 001b  8b 45 fc                          mov     eax,-4H[ebp]
 001e  8b 50 04                          mov     edx,+4H[eax]
 0021  8b 45 fc                          mov     eax,-4H[ebp]
 0024  89 10                             mov     [eax],edx

   BmpSource = NULL; //so it doesn't get messed up
 0026  8b 45 fc                          mov     eax,-4H[ebp]
 0029  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

}

 0030  8b 45 fc                          mov     eax,-4H[ebp]
 0033  89 45 f8                          mov     -8H[ebp],eax
 0036  8b 45 f8                          mov     eax,-8H[ebp]
 0039  89 ec                             mov     esp,ebp
 003b  5d                                pop     ebp
 003c  5f                                pop     edi
 003d  5e                                pop     esi
 003e  5a                                pop     edx
 003f  59                                pop     ecx
 0040  5b                                pop     ebx
 0041  c3                                ret     
 0042  8b c0                             mov     eax,eax

Bitmap::Bitmap (char * TheFile) {
 0044                    near Bitmap::Bitmap( char near * ):
 0044  53                                push    ebx
 0045  51                                push    ecx
 0046  56                                push    esi
 0047  57                                push    edi
 0048  55                                push    ebp
 0049  89 e5                             mov     ebp,esp
 004b  81 ec 0c 00 00 00                 sub     esp,0000000cH
 0051  89 45 f8                          mov     -8H[ebp],eax
 0054  89 55 fc                          mov     -4H[ebp],edx

   width = height = 0;
 0057  8b 45 f8                          mov     eax,-8H[ebp]
 005a  c7 40 04 00 00 00 
       00                                mov     dword ptr +4H[eax],00000000H
 0061  8b 55 f8                          mov     edx,-8H[ebp]
 0064  8b 52 04                          mov     edx,+4H[edx]
 0067  8b 45 f8                          mov     eax,-8H[ebp]
 006a  89 10                             mov     [eax],edx

	BmpSource = NULL; //so it doesn't get messed up
 006c  8b 45 f8                          mov     eax,-8H[ebp]
 006f  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	Load(TheFile);

 0076  8b 55 fc                          mov     edx,-4H[ebp]
 0079  8b 45 f8                          mov     eax,-8H[ebp]
 007c  e8 00 00 00 00                    call    int near Bitmap::Load( char near * )

}

 0081  8b 45 f8                          mov     eax,-8H[ebp]
 0084  89 45 f4                          mov     -0cH[ebp],eax
 0087  8b 45 f4                          mov     eax,-0cH[ebp]
 008a  89 ec                             mov     esp,ebp
 008c  5d                                pop     ebp
 008d  5f                                pop     edi
 008e  5e                                pop     esi
 008f  59                                pop     ecx
 0090  5b                                pop     ebx
 0091  c3                                ret     
 0092  8b c0                             mov     eax,eax

Bitmap::~Bitmap () {
 0094                    near Bitmap::~Bitmap():
 0094  53                                push    ebx
 0095  51                                push    ecx
 0096  56                                push    esi
 0097  57                                push    edi
 0098  55                                push    ebp
 0099  89 e5                             mov     ebp,esp
 009b  81 ec 0c 00 00 00                 sub     esp,0000000cH
 00a1  89 45 f8                          mov     -8H[ebp],eax
 00a4  89 55 fc                          mov     -4H[ebp],edx

   if ( BmpSource) {
 00a7  8b 45 f8                          mov     eax,-8H[ebp]
 00aa  83 78 08 00                       cmp     dword ptr +8H[eax],00000000H
 00ae  74 0b                             je      L1

      delete BmpSource;
   }
 00b0  8b 45 f8                          mov     eax,-8H[ebp]
 00b3  8b 40 08                          mov     eax,+8H[eax]
 00b6  e8 00 00 00 00                    call    void near operator delete( void near * )

}
 00bb  8b 45 f8          L1              mov     eax,-8H[ebp]
 00be  89 45 f4                          mov     -0cH[ebp],eax
 00c1  8b 45 f4                          mov     eax,-0cH[ebp]
 00c4  89 ec                             mov     esp,ebp
 00c6  5d                                pop     ebp
 00c7  5f                                pop     edi
 00c8  5e                                pop     esi
 00c9  59                                pop     ecx
 00ca  5b                                pop     ebx
 00cb  c3                                ret     

int Bitmap::GetHeight () { return height;}
 00cc                    int near Bitmap::GetHeight():
 00cc  53                                push    ebx
 00cd  51                                push    ecx
 00ce  52                                push    edx
 00cf  56                                push    esi
 00d0  57                                push    edi
 00d1  55                                push    ebp
 00d2  89 e5                             mov     ebp,esp
 00d4  81 ec 08 00 00 00                 sub     esp,00000008H
 00da  89 45 fc                          mov     -4H[ebp],eax
 00dd  8b 45 fc                          mov     eax,-4H[ebp]
 00e0  8b 40 04                          mov     eax,+4H[eax]
 00e3  89 45 f8                          mov     -8H[ebp],eax
 00e6  8b 45 f8                          mov     eax,-8H[ebp]
 00e9  89 ec                             mov     esp,ebp
 00eb  5d                                pop     ebp
 00ec  5f                                pop     edi
 00ed  5e                                pop     esi
 00ee  5a                                pop     edx
 00ef  59                                pop     ecx
 00f0  5b                                pop     ebx
 00f1  c3                                ret     
 00f2  8b c0                             mov     eax,eax

int Bitmap::GetWidth () { return width;}

 00f4                    int near Bitmap::GetWidth():
 00f4  53                                push    ebx
 00f5  51                                push    ecx
 00f6  52                                push    edx
 00f7  56                                push    esi
 00f8  57                                push    edi
 00f9  55                                push    ebp
 00fa  89 e5                             mov     ebp,esp
 00fc  81 ec 08 00 00 00                 sub     esp,00000008H
 0102  89 45 fc                          mov     -4H[ebp],eax
 0105  8b 45 fc                          mov     eax,-4H[ebp]
 0108  8b 00                             mov     eax,[eax]
 010a  89 45 f8                          mov     -8H[ebp],eax
 010d  8b 45 f8                          mov     eax,-8H[ebp]
 0110  89 ec                             mov     esp,ebp
 0112  5d                                pop     ebp
 0113  5f                                pop     edi
 0114  5e                                pop     esi
 0115  5a                                pop     edx
 0116  59                                pop     ecx
 0117  5b                                pop     ebx
 0118  c3                                ret     
 0119  8d 40 00                          lea     eax,+0H[eax]

int Bitmap::MakeNewBmp (UINT32 w, UINT32 h, UCHAR * Source, UCHAR Pal[256][3]) {

 011c                    int near Bitmap::MakeNewBmp( long unsigned, long unsigned, char unsigned near *, char unsigned (near *)[3]):
 011c  56                                push    esi
 011d  57                                push    edi
 011e  55                                push    ebp
 011f  89 e5                             mov     ebp,esp
 0121  81 ec 18 00 00 00                 sub     esp,00000018H
 0127  89 45 f0                          mov     -10H[ebp],eax
 012a  89 55 f4                          mov     -0cH[ebp],edx
 012d  89 5d f8                          mov     -8H[ebp],ebx
 0130  89 4d fc                          mov     -4H[ebp],ecx

	width = w;
 0133  8b 45 f4                          mov     eax,-0cH[ebp]
 0136  8b 55 f0                          mov     edx,-10H[ebp]
 0139  89 02                             mov     [edx],eax

	height = h;
 013b  8b 45 f8                          mov     eax,-8H[ebp]
 013e  8b 55 f0                          mov     edx,-10H[ebp]
 0141  89 42 04                          mov     +4H[edx],eax

   if ( BmpSource) {
 0144  8b 45 f0                          mov     eax,-10H[ebp]
 0147  83 78 08 00                       cmp     dword ptr +8H[eax],00000000H
 014b  74 0b                             je      L2

      delete BmpSource;
   }
 014d  8b 45 f0                          mov     eax,-10H[ebp]
 0150  8b 40 08                          mov     eax,+8H[eax]
 0153  e8 00 00 00 00                    call    void near operator delete( void near * )

	BmpSource = new UCHAR [width * height];
 0158  8b 45 f0          L2              mov     eax,-10H[ebp]
 015b  8b 00                             mov     eax,[eax]
 015d  8b 55 f0                          mov     edx,-10H[ebp]
 0160  0f af 42 04                       imul    eax,+4H[edx]
 0164  e8 00 00 00 00                    call    void near * near operator new []( int unsigned )
 0169  8b 55 f0                          mov     edx,-10H[ebp]
 016c  89 42 08                          mov     +8H[edx],eax

	if ( BmpSource == NULL) {
 016f  8b 45 f0                          mov     eax,-10H[ebp]
 0172  83 78 08 00                       cmp     dword ptr +8H[eax],00000000H
 0176  75 0c                             jne     L3

		return 1;
	}
 0178  c7 45 e8 01 00 00 
       00                                mov     dword ptr -18H[ebp],00000001H
 017f  e9 92 00 00 00                    jmp     L7

	memcpy (BmpSource, Source, (width * height));
 0184  8b 45 f0          L3              mov     eax,-10H[ebp]
 0187  8b 00                             mov     eax,[eax]
 0189  8b 55 f0                          mov     edx,-10H[ebp]
 018c  0f af 42 04                       imul    eax,+4H[edx]
 0190  8b 55 fc                          mov     edx,-4H[ebp]
 0193  8b 4d f0                          mov     ecx,-10H[ebp]
 0196  8b 49 08                          mov     ecx,+8H[ecx]
 0199  89 c3                             mov     ebx,eax
 019b  89 c8                             mov     eax,ecx
 019d  e8 00 00 00 00                    call    memcpy_

   for ( int col = 0; col < 256; col++) {
 01a2  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 01a9  eb 06                             jmp     L5
 01ab  8b 45 ec          L4              mov     eax,-14H[ebp]
 01ae  ff 45 ec                          inc     dword ptr -14H[ebp]
 01b1  81 7d ec 00 01 00 
       00                L5              cmp     dword ptr -14H[ebp],00000100H
 01b8  7d 55                             jge     L6

		ThePal[col][0] = Pal[col][0];
 01ba  8b 45 ec                          mov     eax,-14H[ebp]
 01bd  8d 04 40                          lea     eax,[eax+eax*2]
 01c0  8b 55 10                          mov     edx,+10H[ebp]
 01c3  01 c2                             add     edx,eax
 01c5  8b 45 ec                          mov     eax,-14H[ebp]
 01c8  8d 04 40                          lea     eax,[eax+eax*2]
 01cb  8b 5d f0                          mov     ebx,-10H[ebp]
 01ce  01 c3                             add     ebx,eax
 01d0  8a 02                             mov     al,[edx]
 01d2  88 43 0c                          mov     +0cH[ebx],al

		ThePal[col][1] = Pal[col][1];
 01d5  8b 45 ec                          mov     eax,-14H[ebp]
 01d8  8d 04 40                          lea     eax,[eax+eax*2]
 01db  8b 55 10                          mov     edx,+10H[ebp]
 01de  01 c2                             add     edx,eax
 01e0  8b 45 ec                          mov     eax,-14H[ebp]
 01e3  8d 04 40                          lea     eax,[eax+eax*2]
 01e6  8b 5d f0                          mov     ebx,-10H[ebp]
 01e9  01 c3                             add     ebx,eax
 01eb  8a 42 01                          mov     al,+1H[edx]
 01ee  88 43 0d                          mov     +0dH[ebx],al

		ThePal[col][2] = Pal[col][2];
 01f1  8b 45 ec                          mov     eax,-14H[ebp]
 01f4  8d 04 40                          lea     eax,[eax+eax*2]
 01f7  8b 55 10                          mov     edx,+10H[ebp]
 01fa  01 c2                             add     edx,eax
 01fc  8b 45 ec                          mov     eax,-14H[ebp]
 01ff  8d 04 40                          lea     eax,[eax+eax*2]
 0202  8b 5d f0                          mov     ebx,-10H[ebp]
 0205  01 c3                             add     ebx,eax
 0207  8a 42 02                          mov     al,+2H[edx]
 020a  88 43 0e                          mov     +0eH[ebx],al

	}
 020d  eb 9c                             jmp     L4

	return 0;
 020f  c7 45 e8 00 00 00 
       00                L6              mov     dword ptr -18H[ebp],00000000H

}




 0216  8b 45 e8          L7              mov     eax,-18H[ebp]
 0219  89 ec                             mov     esp,ebp
 021b  5d                                pop     ebp
 021c  5f                                pop     edi
 021d  5e                                pop     esi
 021e  c2 04 00                          ret     0004H
 0221  8d 40 00                          lea     eax,+0H[eax]

int Bitmap::Load (char * file) {
 0224                    int near Bitmap::Load( char near * ):
 0224  53                                push    ebx
 0225  51                                push    ecx
 0226  56                                push    esi
 0227  57                                push    edi
 0228  55                                push    ebp
 0229  89 e5                             mov     ebp,esp
 022b  81 ec a0 00 00 00                 sub     esp,000000a0H
 0231  89 45 f8                          mov     -8H[ebp],eax
 0234  89 55 fc                          mov     -4H[ebp],edx

	ifstream InFile;
 0237  80 4d f4 01                       or      byte ptr -0cH[ebp],01H
 023b  31 d2                             xor     edx,edx
 023d  8d 85 68 ff ff ff                 lea     eax,-98H[ebp]
 0243  e8 00 00 00 00                    call    near ifstream::ifstream()
 0248  89 45 e8                          mov     -18H[ebp],eax
 024b  80 65 f4 fe                       and     byte ptr -0cH[ebp],0feH

	InFile.open( file, ios::in | ios::binary | ios::nocreate);
 024f  e8 00 00 00 00                    call    int near ifstream::__defarg()
 0254  89 c1                             mov     ecx,eax
 0256  bb 21 01 00 00                    mov     ebx,00000121H
 025b  8b 55 fc                          mov     edx,-4H[ebp]
 025e  8d 85 68 ff ff ff                 lea     eax,-98H[ebp]
 0264  e8 00 00 00 00                    call    void near ifstream::open( char const near *, int, int )

	if ( !InFile) {
 0269  8d 45 bc                          lea     eax,-44H[ebp]
 026c  e8 00 00 00 00                    call    int near ios::operator !() const
 0271  85 c0                             test    eax,eax
 0273  74 19                             je      L8

		return 1;
	}
   //InFile >> width >> height >> transparency >> fade;
   UCHAR NumberBuf[8]; // = new char[8]

 0275  c7 45 ec 01 00 00 
       00                                mov     dword ptr -14H[ebp],00000001H
 027c  31 d2                             xor     edx,edx
 027e  8d 85 68 ff ff ff                 lea     eax,-98H[ebp]
 0284  e8 00 00 00 00                    call    near ifstream::~ifstream()
 0289  e9 0d 01 00 00                    jmp     L13

   InFile.read(NumberBuf, 8);
 028e  bb 08 00 00 00    L8              mov     ebx,00000008H
 0293  8d 95 60 ff ff ff                 lea     edx,-0a0H[ebp]
 0299  8d 45 ac                          lea     eax,-54H[ebp]
 029c  e8 00 00 00 00                    call    istream near & near istream::read( char unsigned near *, int )

   width = *(UINT32 *) &NumberBuf[0];
 02a1  8b 85 60 ff ff ff                 mov     eax,-0a0H[ebp]
 02a7  8b 55 f8                          mov     edx,-8H[ebp]
 02aa  89 02                             mov     [edx],eax

   height = *(UINT32 *) &NumberBuf[4];

   //delete [] NumberBuf;

 02ac  8b 85 64 ff ff ff                 mov     eax,-9cH[ebp]
 02b2  8b 55 f8                          mov     edx,-8H[ebp]
 02b5  89 42 04                          mov     +4H[edx],eax

   BmpSource = new  UCHAR [ (width * height) ];
 02b8  8b 45 f8                          mov     eax,-8H[ebp]
 02bb  8b 00                             mov     eax,[eax]
 02bd  8b 55 f8                          mov     edx,-8H[ebp]
 02c0  0f af 42 04                       imul    eax,+4H[edx]
 02c4  e8 00 00 00 00                    call    void near * near operator new []( int unsigned )
 02c9  8b 55 f8                          mov     edx,-8H[ebp]
 02cc  89 42 08                          mov     +8H[edx],eax

	if ( BmpSource == NULL)
	{
 02cf  8b 45 f8                          mov     eax,-8H[ebp]
 02d2  83 78 08 00                       cmp     dword ptr +8H[eax],00000000H
 02d6  75 24                             jne     L9

		delete BmpSource;
 02d8  8b 45 f8                          mov     eax,-8H[ebp]
 02db  8b 40 08                          mov     eax,+8H[eax]
 02de  e8 00 00 00 00                    call    void near operator delete( void near * )

		return 2;
	}

 02e3  c7 45 ec 02 00 00 
       00                                mov     dword ptr -14H[ebp],00000002H
 02ea  31 d2                             xor     edx,edx
 02ec  8d 85 68 ff ff ff                 lea     eax,-98H[ebp]
 02f2  e8 00 00 00 00                    call    near ifstream::~ifstream()
 02f7  e9 9f 00 00 00                    jmp     L13

   InFile.read(BmpSource, (width * height));

 02fc  8b 45 f8          L9              mov     eax,-8H[ebp]
 02ff  8b 00                             mov     eax,[eax]
 0301  8b 55 f8                          mov     edx,-8H[ebp]
 0304  0f af 42 04                       imul    eax,+4H[edx]
 0308  8b 55 f8                          mov     edx,-8H[ebp]
 030b  8b 52 08                          mov     edx,+8H[edx]
 030e  8d 4d ac                          lea     ecx,-54H[ebp]
 0311  89 c3                             mov     ebx,eax
 0313  89 c8                             mov     eax,ecx
 0315  e8 00 00 00 00                    call    istream near & near istream::read( char unsigned near *, int )

   for ( int col = 0; col < 256; col++) {
 031a  c7 45 f0 00 00 00 
       00                                mov     dword ptr -10H[ebp],00000000H
 0321  eb 06                             jmp     L11
 0323  8b 45 f0          L10             mov     eax,-10H[ebp]
 0326  ff 45 f0                          inc     dword ptr -10H[ebp]
 0329  81 7d f0 00 01 00 
       00                L11             cmp     dword ptr -10H[ebp],00000100H
 0330  7d 4a                             jge     L12

		InFile.get (ThePal[col][0]);
 0332  8b 55 f0                          mov     edx,-10H[ebp]
 0335  8d 14 52                          lea     edx,[edx+edx*2]
 0338  8b 45 f8                          mov     eax,-8H[ebp]
 033b  83 c0 0c                          add     eax,0000000cH
 033e  01 c2                             add     edx,eax
 0340  8d 45 ac                          lea     eax,-54H[ebp]
 0343  e8 00 00 00 00                    call    istream near & near istream::get( char unsigned near & )

		InFile.get (ThePal[col][1]);
 0348  8b 45 f0                          mov     eax,-10H[ebp]
 034b  8d 04 40                          lea     eax,[eax+eax*2]
 034e  8b 55 f8                          mov     edx,-8H[ebp]
 0351  83 c2 0c                          add     edx,0000000cH
 0354  01 d0                             add     eax,edx
 0356  8d 50 01                          lea     edx,+1H[eax]
 0359  8d 45 ac                          lea     eax,-54H[ebp]
 035c  e8 00 00 00 00                    call    istream near & near istream::get( char unsigned near & )

		InFile.get (ThePal[col][2]);
 0361  8b 45 f0                          mov     eax,-10H[ebp]
 0364  8d 04 40                          lea     eax,[eax+eax*2]
 0367  8b 55 f8                          mov     edx,-8H[ebp]
 036a  83 c2 0c                          add     edx,0000000cH
 036d  01 d0                             add     eax,edx
 036f  8d 50 02                          lea     edx,+2H[eax]
 0372  8d 45 ac                          lea     eax,-54H[ebp]
 0375  e8 00 00 00 00                    call    istream near & near istream::get( char unsigned near & )

	}

 037a  eb a7                             jmp     L10

	InFile.close();
 037c  8d 85 68 ff ff ff L12             lea     eax,-98H[ebp]
 0382  e8 00 00 00 00                    call    void near fstreambase::close()

	return 0;
 0387  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 038e  31 d2                             xor     edx,edx
 0390  8d 85 68 ff ff ff                 lea     eax,-98H[ebp]
 0396  e8 00 00 00 00                    call    near ifstream::~ifstream()

}

 039b  8b 45 ec          L13             mov     eax,-14H[ebp]
 039e  89 ec                             mov     esp,ebp
 03a0  5d                                pop     ebp
 03a1  5f                                pop     edi
 03a2  5e                                pop     esi
 03a3  59                                pop     ecx
 03a4  5b                                pop     ebx
 03a5  c3                                ret     
 03a6  8b c0                             mov     eax,eax

int Bitmap::SaveToDisk (char * file) {
 03a8                    int near Bitmap::SaveToDisk( char near * ):
 03a8  53                                push    ebx
 03a9  51                                push    ecx
 03aa  56                                push    esi
 03ab  57                                push    edi
 03ac  55                                push    ebp
 03ad  89 e5                             mov     ebp,esp
 03af  81 ec 94 00 00 00                 sub     esp,00000094H
 03b5  89 45 f8                          mov     -8H[ebp],eax
 03b8  89 55 fc                          mov     -4H[ebp],edx

	ofstream OutFile;
 03bb  80 4d f4 01                       or      byte ptr -0cH[ebp],01H
 03bf  31 d2                             xor     edx,edx
 03c1  8d 85 70 ff ff ff                 lea     eax,-90H[ebp]
 03c7  e8 00 00 00 00                    call    near ofstream::ofstream()
 03cc  89 45 ec                          mov     -14H[ebp],eax
 03cf  80 65 f4 fe                       and     byte ptr -0cH[ebp],0feH

	OutFile.open( file, ios::out | ios::binary);
 03d3  e8 00 00 00 00                    call    int near ofstream::__defarg()
 03d8  89 c1                             mov     ecx,eax
 03da  bb 02 01 00 00                    mov     ebx,00000102H
 03df  8b 55 fc                          mov     edx,-4H[ebp]
 03e2  8d 85 70 ff ff ff                 lea     eax,-90H[ebp]
 03e8  e8 00 00 00 00                    call    void near ofstream::open( char const near *, int, int )

	if ( !OutFile) {
 03ed  8d 45 c0                          lea     eax,-40H[ebp]
 03f0  e8 00 00 00 00                    call    int near ios::operator !() const
 03f5  85 c0                             test    eax,eax
 03f7  74 1c                             je      L14

		return 1;
	}

   //UCHAR NumberBuf[8]; // = new char[8]

	//NumberBuf[0] = *(UCHAR *) &width;
 03f9  c7 85 6c ff ff ff 
       01 00 00 00                       mov     dword ptr -94H[ebp],00000001H
 0403  31 d2                             xor     edx,edx
 0405  8d 85 70 ff ff ff                 lea     eax,-90H[ebp]
 040b  e8 00 00 00 00                    call    near ofstream::~ofstream()
 0410  e9 bd 00 00 00                    jmp     L18

	OutFile.write((char *) &width, sizeof(width));
 0415  bb 04 00 00 00    L14             mov     ebx,00000004H
 041a  8b 55 f8                          mov     edx,-8H[ebp]
 041d  8d 45 b4                          lea     eax,-4cH[ebp]
 0420  e8 00 00 00 00                    call    ostream near & near ostream::write( char const near *, int )

	OutFile.write((char *) &height, sizeof(height));

	//OutFile.write(NumberBuf, 8);
	//OutFile << width << height << transparency << fade;
	//OutFile

 0425  bb 04 00 00 00                    mov     ebx,00000004H
 042a  8b 55 f8                          mov     edx,-8H[ebp]
 042d  83 c2 04                          add     edx,00000004H
 0430  8d 45 b4                          lea     eax,-4cH[ebp]
 0433  e8 00 00 00 00                    call    ostream near & near ostream::write( char const near *, int )

	OutFile.write(BmpSource, width * height);

 0438  8b 45 f8                          mov     eax,-8H[ebp]
 043b  8b 00                             mov     eax,[eax]
 043d  8b 55 f8                          mov     edx,-8H[ebp]
 0440  0f af 42 04                       imul    eax,+4H[edx]
 0444  89 c3                             mov     ebx,eax
 0446  8b 55 f8                          mov     edx,-8H[ebp]
 0449  8b 52 08                          mov     edx,+8H[edx]
 044c  8d 45 b4                          lea     eax,-4cH[ebp]
 044f  e8 00 00 00 00                    call    ostream near & near ostream::write( char unsigned const near *, int )

   for ( int col = 0; col < 256; col++) {
 0454  c7 45 f0 00 00 00 
       00                                mov     dword ptr -10H[ebp],00000000H
 045b  eb 06                             jmp     L16
 045d  8b 45 f0          L15             mov     eax,-10H[ebp]
 0460  ff 45 f0                          inc     dword ptr -10H[ebp]
 0463  81 7d f0 00 01 00 
       00                L16             cmp     dword ptr -10H[ebp],00000100H
 046a  7d 44                             jge     L17

		OutFile.put (ThePal[col][0]);
 046c  8b 45 f0                          mov     eax,-10H[ebp]
 046f  8d 04 40                          lea     eax,[eax+eax*2]
 0472  03 45 f8                          add     eax,-8H[ebp]
 0475  31 d2                             xor     edx,edx
 0477  8a 50 0c                          mov     dl,+0cH[eax]
 047a  8d 45 b4                          lea     eax,-4cH[ebp]
 047d  e8 00 00 00 00                    call    ostream near & near ostream::put( char unsigned )

		OutFile.put (ThePal[col][1]);
 0482  8b 45 f0                          mov     eax,-10H[ebp]
 0485  8d 04 40                          lea     eax,[eax+eax*2]
 0488  03 45 f8                          add     eax,-8H[ebp]
 048b  31 d2                             xor     edx,edx
 048d  8a 50 0d                          mov     dl,+0dH[eax]
 0490  8d 45 b4                          lea     eax,-4cH[ebp]
 0493  e8 00 00 00 00                    call    ostream near & near ostream::put( char unsigned )

		OutFile.put (ThePal[col][2]);
 0498  8b 45 f0                          mov     eax,-10H[ebp]
 049b  8d 04 40                          lea     eax,[eax+eax*2]
 049e  03 45 f8                          add     eax,-8H[ebp]
 04a1  31 d2                             xor     edx,edx
 04a3  8a 50 0e                          mov     dl,+0eH[eax]
 04a6  8d 45 b4                          lea     eax,-4cH[ebp]
 04a9  e8 00 00 00 00                    call    ostream near & near ostream::put( char unsigned )

	}

 04ae  eb ad                             jmp     L15

	OutFile.close();
	//UCHAR myval = ScreenPal.VirPal[0][0][0]; a test!
 04b0  8d 85 70 ff ff ff L17             lea     eax,-90H[ebp]
 04b6  e8 00 00 00 00                    call    void near fstreambase::close()

	return 0;
 04bb  c7 85 6c ff ff ff 
       00 00 00 00                       mov     dword ptr -94H[ebp],00000000H
 04c5  31 d2                             xor     edx,edx
 04c7  8d 85 70 ff ff ff                 lea     eax,-90H[ebp]
 04cd  e8 00 00 00 00                    call    near ofstream::~ofstream()

}




/*PutRegular -> Put The Bitmap Without Transparent pixels, effects, or scaling*/
 04d2  8b 85 6c ff ff ff L18             mov     eax,-94H[ebp]
 04d8  89 ec                             mov     esp,ebp
 04da  5d                                pop     ebp
 04db  5f                                pop     edi
 04dc  5e                                pop     esi
 04dd  59                                pop     ecx
 04de  5b                                pop     ebx
 04df  c3                                ret     

void Bitmap::PutRegular (UINT32 x, UINT32 y, char * offs) {

	int Top;	/* coordinate values of bitmap top-left corner */
   int Left;
	unsigned BMOffsetX;	/* starting offset into clipped bitmap */
   unsigned BMOffsetY;
   unsigned ClippedLeft;/* top-left corner position of clipped bitmap */
   unsigned ClippedTop;
   int BltWidth;	/* width of clipped bitmap */
   int BltHeight; /* height of clipped bitmap */
   UINT32 TempOffset;	/* temp variable to calc far pointer offsets */
	char * Screen; /* pointer to current screen position */
	UCHAR * BMap; /* pointer to current bitmap position */
   unsigned HeightCounter;
	unsigned WidthCounter;
   unsigned ScreenIncrement;
   unsigned BitmapIncrement;


 04e0                    void near Bitmap::PutRegular( long unsigned, long unsigned, char near * ):
 04e0  56                                push    esi
 04e1  57                                push    edi
 04e2  55                                push    ebp
 04e3  89 e5                             mov     ebp,esp
 04e5  81 ec 4c 00 00 00                 sub     esp,0000004cH
 04eb  89 45 f0                          mov     -10H[ebp],eax
 04ee  89 55 f4                          mov     -0cH[ebp],edx
 04f1  89 5d f8                          mov     -8H[ebp],ebx
 04f4  89 4d fc                          mov     -4H[ebp],ecx

   Left = x;
 04f7  8b 45 f4                          mov     eax,-0cH[ebp]
 04fa  89 45 b8                          mov     -48H[ebp],eax

   Top  = y;

   if (Left >= (int) ScreenClip->x2 || Top >= (int) ScreenClip->y2 ||
 04fd  8b 45 f8                          mov     eax,-8H[ebp]
 0500  89 45 b4                          mov     -4cH[ebp],eax

   (Left + (int) width) < ScreenClip->x1 ||
	(Top + (int)height) < ScreenClip->y1)
 0503  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 0509  8b 45 b8                          mov     eax,-48H[ebp]
 050c  3b 42 08                          cmp     eax,+8H[edx]
 050f  7d 0e                             jge     L19
 0511  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 0517  8b 45 b4                          mov     eax,-4cH[ebp]
 051a  3b 42 0c                          cmp     eax,+0cH[edx]
 051d  7c 02                             jl      L20
 051f  eb 11             L19             jmp     L21
 0521  8b 45 f0          L20             mov     eax,-10H[ebp]
 0524  8b 55 b8                          mov     edx,-48H[ebp]
 0527  03 10                             add     edx,[eax]
 0529  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 052e  3b 10                             cmp     edx,[eax]
 0530  73 02                             jae     L22
 0532  eb 13             L21             jmp     L23
 0534  8b 45 f0          L22             mov     eax,-10H[ebp]
 0537  8b 55 b4                          mov     edx,-4cH[ebp]
 053a  03 50 04                          add     edx,+4H[eax]
 053d  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0542  3b 50 04                          cmp     edx,+4H[eax]
 0545  73 05                             jae     L24

      return;

   /* clip bitmap to upper left edge of rect */

/* if Left < ScreenClip->x1, calculate starting x offset in bitmap */
 0547  e9 79 01 00 00    L23             jmp     L36

   if (Left < ScreenClip->x1) {
 054c  8b 15 00 00 00 00 L24             mov     edx,ClippingRectangle near * near ScreenClip
 0552  8b 45 b8                          mov     eax,-48H[ebp]
 0555  3b 02                             cmp     eax,[edx]
 0557  73 24                             jae     L25

   BMOffsetX = ScreenClip->x1 - Left;
 0559  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 055e  8b 00                             mov     eax,[eax]
 0560  2b 45 b8                          sub     eax,-48H[ebp]
 0563  89 45 bc                          mov     -44H[ebp],eax

      ClippedLeft = ScreenClip->x1;
 0566  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 056b  8b 00                             mov     eax,[eax]
 056d  89 45 c4                          mov     -3cH[ebp],eax

      BltWidth = width - BMOffsetX;
 0570  8b 45 f0                          mov     eax,-10H[ebp]
 0573  8b 00                             mov     eax,[eax]
 0575  2b 45 bc                          sub     eax,-44H[ebp]
 0578  89 45 cc                          mov     -34H[ebp],eax

   }
   else {
 057b  eb 15                             jmp     L26

   BMOffsetX = 0;
 057d  c7 45 bc 00 00 00 
       00                L25             mov     dword ptr -44H[ebp],00000000H

      ClippedLeft = Left;
 0584  8b 45 b8                          mov     eax,-48H[ebp]
 0587  89 45 c4                          mov     -3cH[ebp],eax

      BltWidth = width;
	}

   /* if Top < ScreenClip->y1, calculate starting y offset in bitmap */
 058a  8b 45 f0                          mov     eax,-10H[ebp]
 058d  8b 00                             mov     eax,[eax]
 058f  89 45 cc                          mov     -34H[ebp],eax

   if (Top < ScreenClip->y1) {
 0592  8b 15 00 00 00 00 L26             mov     edx,ClippingRectangle near * near ScreenClip
 0598  8b 45 b4                          mov     eax,-4cH[ebp]
 059b  3b 42 04                          cmp     eax,+4H[edx]
 059e  73 27                             jae     L27

   BMOffsetY = ScreenClip->y1 - Top;
 05a0  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 05a5  8b 40 04                          mov     eax,+4H[eax]
 05a8  2b 45 b4                          sub     eax,-4cH[ebp]
 05ab  89 45 c0                          mov     -40H[ebp],eax

      ClippedTop = ScreenClip->y1;
 05ae  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 05b3  8b 40 04                          mov     eax,+4H[eax]
 05b6  89 45 c8                          mov     -38H[ebp],eax

      BltHeight = height - BMOffsetY;
 05b9  8b 45 f0                          mov     eax,-10H[ebp]
 05bc  8b 40 04                          mov     eax,+4H[eax]
 05bf  2b 45 c0                          sub     eax,-40H[ebp]
 05c2  89 45 d0                          mov     -30H[ebp],eax

   }
   else {
 05c5  eb 16                             jmp     L28

   BMOffsetY = 0;
 05c7  c7 45 c0 00 00 00 
       00                L27             mov     dword ptr -40H[ebp],00000000H

      ClippedTop = Top;
 05ce  8b 45 b4                          mov     eax,-4cH[ebp]
 05d1  89 45 c8                          mov     -38H[ebp],eax

      BltHeight = height;
   }

   /* clip bitmap to lower right edge of rect */

   /* if Left + bitmap width > rect width, calc ending x point */
 05d4  8b 45 f0                          mov     eax,-10H[ebp]
 05d7  8b 40 04                          mov     eax,+4H[eax]
 05da  89 45 d0                          mov     -30H[ebp],eax

   if ((ClippedLeft + BltWidth) > ScreenClip->x2) {
 05dd  8b 55 c4          L28             mov     edx,-3cH[ebp]
 05e0  03 55 cc                          add     edx,-34H[ebp]
 05e3  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 05e8  3b 50 08                          cmp     edx,+8H[eax]
 05eb  76 11                             jbe     L29

   BltWidth -= ClippedLeft + BltWidth - ScreenClip->x2;
   }

   /* if Top + bitmap height > rect height, calc ending y point */
 05ed  8b 55 c4                          mov     edx,-3cH[ebp]
 05f0  03 55 cc                          add     edx,-34H[ebp]
 05f3  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 05f8  2b 50 08                          sub     edx,+8H[eax]
 05fb  29 55 cc                          sub     -34H[ebp],edx

   if ((ClippedTop + BltHeight) > ScreenClip->y2) {
 05fe  8b 55 c8          L29             mov     edx,-38H[ebp]
 0601  03 55 d0                          add     edx,-30H[ebp]
 0604  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0609  3b 50 0c                          cmp     edx,+0cH[eax]
 060c  76 11                             jbe     L30

   BltHeight -= ClippedTop + BltHeight - ScreenClip->y2;
   }

   /* calculate screen pointer starting position based on */
   /* clipped bitmap location */
 060e  8b 55 c8                          mov     edx,-38H[ebp]
 0611  03 55 d0                          add     edx,-30H[ebp]
 0614  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0619  2b 50 0c                          sub     edx,+0cH[eax]
 061c  29 55 d0                          sub     -30H[ebp],edx

   TempOffset = ClippedTop * ScreenWidth + ClippedLeft;


 061f  31 c0             L30             xor     eax,eax
 0621  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 0627  0f af 45 c8                       imul    eax,-38H[ebp]
 062b  8b 55 c4                          mov     edx,-3cH[ebp]
 062e  01 c2                             add     edx,eax
 0630  89 55 d4                          mov     -2cH[ebp],edx

	Screen = offs + TempOffset;

   /* calculate bitmap pointer starting position based on */
   /* clipped bitmap location */
 0633  8b 45 fc                          mov     eax,-4H[ebp]
 0636  03 45 d4                          add     eax,-2cH[ebp]
 0639  89 45 d8                          mov     -28H[ebp],eax

   TempOffset = BMOffsetY * width + BMOffsetX;
 063c  8b 45 f0                          mov     eax,-10H[ebp]
 063f  8b 55 c0                          mov     edx,-40H[ebp]
 0642  0f af 10                          imul    edx,[eax]
 0645  89 d0                             mov     eax,edx
 0647  8b 55 bc                          mov     edx,-44H[ebp]
 064a  01 c2                             add     edx,eax
 064c  89 55 d4                          mov     -2cH[ebp],edx

   BMap = BmpSource;
 064f  8b 45 f0                          mov     eax,-10H[ebp]
 0652  8b 40 08                          mov     eax,+8H[eax]
 0655  89 45 dc                          mov     -24H[ebp],eax

   BMap += TempOffset;

   /* blt to screen */
 0658  8b 45 d4                          mov     eax,-2cH[ebp]
 065b  01 45 dc                          add     -24H[ebp],eax

   ScreenIncrement = ScreenWidth - BltWidth; //screen class
 065e  31 c0                             xor     eax,eax
 0660  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 0666  2b 45 cc                          sub     eax,-34H[ebp]
 0669  89 45 e8                          mov     -18H[ebp],eax

   BitmapIncrement = width - BltWidth;
	//doesn't need transparent pixels, so we can easily memcpy each line for speed
	/*for (HeightCounter = 0; HeightCounter < BltHeight; HeightCounter++) {
      memcpy ((void  *)Screen, (void *)BMap, BltWidth);
		Screen += ScreenIncrement;
      BMap += BitmapIncrement;
   }  doesn't work have to optimize*/
 066c  8b 45 f0                          mov     eax,-10H[ebp]
 066f  8b 00                             mov     eax,[eax]
 0671  2b 45 cc                          sub     eax,-34H[ebp]
 0674  89 45 ec                          mov     -14H[ebp],eax

   for (HeightCounter = 0; HeightCounter < BltHeight; HeightCounter++) {
 0677  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 067e  eb 06                             jmp     L32
 0680  8b 45 e0          L31             mov     eax,-20H[ebp]
 0683  ff 45 e0                          inc     dword ptr -20H[ebp]
 0686  8b 45 e0          L32             mov     eax,-20H[ebp]
 0689  3b 45 d0                          cmp     eax,-30H[ebp]
 068c  73 37                             jae     L36

   	for (WidthCounter = 0; WidthCounter < BltWidth; WidthCounter++) {
 068e  c7 45 e4 00 00 00 
       00                                mov     dword ptr -1cH[ebp],00000000H
 0695  eb 06                             jmp     L34
 0697  8b 45 e4          L33             mov     eax,-1cH[ebp]
 069a  ff 45 e4                          inc     dword ptr -1cH[ebp]
 069d  8b 45 e4          L34             mov     eax,-1cH[ebp]
 06a0  3b 45 cc                          cmp     eax,-34H[ebp]
 06a3  73 12                             jae     L35

			*Screen++ = *BMap++;
 06a5  8b 45 dc                          mov     eax,-24H[ebp]
 06a8  ff 45 dc                          inc     dword ptr -24H[ebp]
 06ab  8b 55 d8                          mov     edx,-28H[ebp]
 06ae  ff 45 d8                          inc     dword ptr -28H[ebp]
 06b1  8a 00                             mov     al,[eax]
 06b3  88 02                             mov     [edx],al

      }
 06b5  eb e0                             jmp     L33

      Screen += ScreenIncrement;
 06b7  8b 45 e8          L35             mov     eax,-18H[ebp]
 06ba  01 45 d8                          add     -28H[ebp],eax

      BMap += BitmapIncrement;
 06bd  8b 45 ec                          mov     eax,-14H[ebp]
 06c0  01 45 dc                          add     -24H[ebp],eax

   }

 06c3  eb bb                             jmp     L31

}




//PutTransparent Puts bitmap with PIXELS of color 0 transparent!!
 06c5  89 ec             L36             mov     esp,ebp
 06c7  5d                                pop     ebp
 06c8  5f                                pop     edi
 06c9  5e                                pop     esi
 06ca  c3                                ret     
 06cb  90                                nop     

void Bitmap::PutTransparent (UINT32 x, UINT32 y, char * offs) {

	int Top;	/* coordinate values of bitmap top-left corner */
   int Left;
	unsigned BMOffsetX;	/* starting offset into clipped bitmap */
   unsigned BMOffsetY;
   unsigned ClippedLeft;/* top-left corner position of clipped bitmap */
   unsigned ClippedTop;
   int BltWidth;	/* width of clipped bitmap */
   int BltHeight; /* height of clipped bitmap */
   UINT32 TempOffset;	/* temp variable to calc far pointer offsets */
	char * Screen;  /* pointer to current screen position */
	UCHAR * BMap; /* pointer to current bitmap position */
   unsigned WidthCounter;
   unsigned HeightCounter;
   unsigned ScreenIncrement;
   unsigned BitmapIncrement;

 06cc                    void near Bitmap::PutTransparent( long unsigned, long unsigned, char near * ):
 06cc  56                                push    esi
 06cd  57                                push    edi
 06ce  55                                push    ebp
 06cf  89 e5                             mov     ebp,esp
 06d1  81 ec 4c 00 00 00                 sub     esp,0000004cH
 06d7  89 45 f0                          mov     -10H[ebp],eax
 06da  89 55 f4                          mov     -0cH[ebp],edx
 06dd  89 5d f8                          mov     -8H[ebp],ebx
 06e0  89 4d fc                          mov     -4H[ebp],ecx

	Left = x;
 06e3  8b 45 f4                          mov     eax,-0cH[ebp]
 06e6  89 45 b8                          mov     -48H[ebp],eax

   Top  = y;

   if (Left >= (int) ScreenClip->x2 || Top >= (int) ScreenClip->y2 ||
 06e9  8b 45 f8                          mov     eax,-8H[ebp]
 06ec  89 45 b4                          mov     -4cH[ebp],eax

   (Left + (int) width) < ScreenClip->x1 ||
	(Top + (int)height) < ScreenClip->y1)
 06ef  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 06f5  8b 45 b8                          mov     eax,-48H[ebp]
 06f8  3b 42 08                          cmp     eax,+8H[edx]
 06fb  7d 0e                             jge     L37
 06fd  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 0703  8b 45 b4                          mov     eax,-4cH[ebp]
 0706  3b 42 0c                          cmp     eax,+0cH[edx]
 0709  7c 02                             jl      L38
 070b  eb 11             L37             jmp     L39
 070d  8b 45 f0          L38             mov     eax,-10H[ebp]
 0710  8b 55 b8                          mov     edx,-48H[ebp]
 0713  03 10                             add     edx,[eax]
 0715  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 071a  3b 10                             cmp     edx,[eax]
 071c  73 02                             jae     L40
 071e  eb 13             L39             jmp     L41
 0720  8b 45 f0          L40             mov     eax,-10H[ebp]
 0723  8b 55 b4                          mov     edx,-4cH[ebp]
 0726  03 50 04                          add     edx,+4H[eax]
 0729  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 072e  3b 50 04                          cmp     edx,+4H[eax]
 0731  73 05                             jae     L42

      return;

   /* clip bitmap to upper left edge of rect */

/* if Left < ScreenClip->x1, calculate starting x offset in bitmap */
 0733  e9 8d 01 00 00    L41             jmp     L55

   if (Left < ScreenClip->x1) {
 0738  8b 15 00 00 00 00 L42             mov     edx,ClippingRectangle near * near ScreenClip
 073e  8b 45 b8                          mov     eax,-48H[ebp]
 0741  3b 02                             cmp     eax,[edx]
 0743  73 24                             jae     L43

   BMOffsetX = ScreenClip->x1 - Left;
 0745  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 074a  8b 00                             mov     eax,[eax]
 074c  2b 45 b8                          sub     eax,-48H[ebp]
 074f  89 45 bc                          mov     -44H[ebp],eax

      ClippedLeft = ScreenClip->x1;
 0752  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0757  8b 00                             mov     eax,[eax]
 0759  89 45 c4                          mov     -3cH[ebp],eax

      BltWidth = width - BMOffsetX;
 075c  8b 45 f0                          mov     eax,-10H[ebp]
 075f  8b 00                             mov     eax,[eax]
 0761  2b 45 bc                          sub     eax,-44H[ebp]
 0764  89 45 cc                          mov     -34H[ebp],eax

   }
   else {
 0767  eb 15                             jmp     L44

   BMOffsetX = 0;
 0769  c7 45 bc 00 00 00 
       00                L43             mov     dword ptr -44H[ebp],00000000H

      ClippedLeft = Left;
 0770  8b 45 b8                          mov     eax,-48H[ebp]
 0773  89 45 c4                          mov     -3cH[ebp],eax

      BltWidth = width;
	}

   /* if Top < ScreenClip->y1, calculate starting y offset in bitmap */
 0776  8b 45 f0                          mov     eax,-10H[ebp]
 0779  8b 00                             mov     eax,[eax]
 077b  89 45 cc                          mov     -34H[ebp],eax

   if (Top < ScreenClip->y1) {
 077e  8b 15 00 00 00 00 L44             mov     edx,ClippingRectangle near * near ScreenClip
 0784  8b 45 b4                          mov     eax,-4cH[ebp]
 0787  3b 42 04                          cmp     eax,+4H[edx]
 078a  73 27                             jae     L45

   BMOffsetY = ScreenClip->y1 - Top;
 078c  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0791  8b 40 04                          mov     eax,+4H[eax]
 0794  2b 45 b4                          sub     eax,-4cH[ebp]
 0797  89 45 c0                          mov     -40H[ebp],eax

      ClippedTop = ScreenClip->y1;
 079a  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 079f  8b 40 04                          mov     eax,+4H[eax]
 07a2  89 45 c8                          mov     -38H[ebp],eax

      BltHeight = height - BMOffsetY;
 07a5  8b 45 f0                          mov     eax,-10H[ebp]
 07a8  8b 40 04                          mov     eax,+4H[eax]
 07ab  2b 45 c0                          sub     eax,-40H[ebp]
 07ae  89 45 d0                          mov     -30H[ebp],eax

   }
   else {
 07b1  eb 16                             jmp     L46

   BMOffsetY = 0;
 07b3  c7 45 c0 00 00 00 
       00                L45             mov     dword ptr -40H[ebp],00000000H

      ClippedTop = Top;
 07ba  8b 45 b4                          mov     eax,-4cH[ebp]
 07bd  89 45 c8                          mov     -38H[ebp],eax

      BltHeight = height;
   }

   /* clip bitmap to lower right edge of rect */

   /* if Left + bitmap width > rect width, calc ending x point */
 07c0  8b 45 f0                          mov     eax,-10H[ebp]
 07c3  8b 40 04                          mov     eax,+4H[eax]
 07c6  89 45 d0                          mov     -30H[ebp],eax

   if ((ClippedLeft + BltWidth) > ScreenClip->x2) {
 07c9  8b 55 c4          L46             mov     edx,-3cH[ebp]
 07cc  03 55 cc                          add     edx,-34H[ebp]
 07cf  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 07d4  3b 50 08                          cmp     edx,+8H[eax]
 07d7  76 11                             jbe     L47

   BltWidth -= ClippedLeft + BltWidth - ScreenClip->x2;
   }

   /* if Top + bitmap height > rect height, calc ending y point */
 07d9  8b 55 c4                          mov     edx,-3cH[ebp]
 07dc  03 55 cc                          add     edx,-34H[ebp]
 07df  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 07e4  2b 50 08                          sub     edx,+8H[eax]
 07e7  29 55 cc                          sub     -34H[ebp],edx

   if ((ClippedTop + BltHeight) > ScreenClip->y2) {
 07ea  8b 55 c8          L47             mov     edx,-38H[ebp]
 07ed  03 55 d0                          add     edx,-30H[ebp]
 07f0  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 07f5  3b 50 0c                          cmp     edx,+0cH[eax]
 07f8  76 11                             jbe     L48

   BltHeight -= ClippedTop + BltHeight - ScreenClip->y2;
   }

   /* calculate screen pointer starting position based on */
   /* clipped bitmap location */
 07fa  8b 55 c8                          mov     edx,-38H[ebp]
 07fd  03 55 d0                          add     edx,-30H[ebp]
 0800  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0805  2b 50 0c                          sub     edx,+0cH[eax]
 0808  29 55 d0                          sub     -30H[ebp],edx

   TempOffset = ClippedTop * ScreenWidth + ClippedLeft;


 080b  31 c0             L48             xor     eax,eax
 080d  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 0813  0f af 45 c8                       imul    eax,-38H[ebp]
 0817  8b 55 c4                          mov     edx,-3cH[ebp]
 081a  01 c2                             add     edx,eax
 081c  89 55 d4                          mov     -2cH[ebp],edx

	Screen = offs + TempOffset;

   /* calculate bitmap pointer starting position based on */
   /* clipped bitmap location */
 081f  8b 45 fc                          mov     eax,-4H[ebp]
 0822  03 45 d4                          add     eax,-2cH[ebp]
 0825  89 45 d8                          mov     -28H[ebp],eax

   TempOffset = BMOffsetY * width + BMOffsetX;
 0828  8b 45 f0                          mov     eax,-10H[ebp]
 082b  8b 55 c0                          mov     edx,-40H[ebp]
 082e  0f af 10                          imul    edx,[eax]
 0831  89 d0                             mov     eax,edx
 0833  8b 55 bc                          mov     edx,-44H[ebp]
 0836  01 c2                             add     edx,eax
 0838  89 55 d4                          mov     -2cH[ebp],edx

   BMap = BmpSource;
 083b  8b 45 f0                          mov     eax,-10H[ebp]
 083e  8b 40 08                          mov     eax,+8H[eax]
 0841  89 45 dc                          mov     -24H[ebp],eax

   BMap += TempOffset;

   /* blt to screen */
 0844  8b 45 d4                          mov     eax,-2cH[ebp]
 0847  01 45 dc                          add     -24H[ebp],eax

   ScreenIncrement = ScreenWidth - BltWidth; //screen class
 084a  31 c0                             xor     eax,eax
 084c  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 0852  2b 45 cc                          sub     eax,-34H[ebp]
 0855  89 45 e8                          mov     -18H[ebp],eax

   BitmapIncrement = width - BltWidth;
 0858  8b 45 f0                          mov     eax,-10H[ebp]
 085b  8b 00                             mov     eax,[eax]
 085d  2b 45 cc                          sub     eax,-34H[ebp]
 0860  89 45 ec                          mov     -14H[ebp],eax

   for (HeightCounter = 0; HeightCounter < BltHeight; HeightCounter++) {
 0863  c7 45 e4 00 00 00 
       00                                mov     dword ptr -1cH[ebp],00000000H
 086a  eb 06                             jmp     L50
 086c  8b 45 e4          L49             mov     eax,-1cH[ebp]
 086f  ff 45 e4                          inc     dword ptr -1cH[ebp]
 0872  8b 45 e4          L50             mov     eax,-1cH[ebp]
 0875  3b 45 d0                          cmp     eax,-30H[ebp]
 0878  73 4b                             jae     L55

   	for (WidthCounter = 0; WidthCounter < BltWidth; WidthCounter++) {
 087a  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 0881  eb 06                             jmp     L52
 0883  8b 45 e0          L51             mov     eax,-20H[ebp]
 0886  ff 45 e0                          inc     dword ptr -20H[ebp]
 0889  8b 45 e0          L52             mov     eax,-20H[ebp]
 088c  3b 45 cc                          cmp     eax,-34H[ebp]
 088f  73 26                             jae     L54

      	if (*BMap != 0) {
 0891  8b 45 dc                          mov     eax,-24H[ebp]
 0894  8a 00                             mov     al,[eax]
 0896  25 ff 00 00 00                    and     eax,000000ffH
 089b  85 c0                             test    eax,eax
 089d  74 0a                             je      L53

				*Screen = *BMap;
			}
 089f  8b 45 dc                          mov     eax,-24H[ebp]
 08a2  8a 10                             mov     dl,[eax]
 08a4  8b 45 d8                          mov     eax,-28H[ebp]
 08a7  88 10                             mov     [eax],dl

        	Screen++;
 08a9  8b 45 d8          L53             mov     eax,-28H[ebp]
 08ac  ff 45 d8                          inc     dword ptr -28H[ebp]

        	BMap++;
 08af  8b 45 dc                          mov     eax,-24H[ebp]
 08b2  ff 45 dc                          inc     dword ptr -24H[ebp]

      }
 08b5  eb cc                             jmp     L51

      Screen += ScreenIncrement;
 08b7  8b 45 e8          L54             mov     eax,-18H[ebp]
 08ba  01 45 d8                          add     -28H[ebp],eax

      BMap += BitmapIncrement;
 08bd  8b 45 ec                          mov     eax,-14H[ebp]
 08c0  01 45 dc                          add     -24H[ebp],eax

   }
 08c3  eb a7                             jmp     L49

}

//PutTransparent18bit Puts bitmap with PIXELS of color 0 transparent!! it uses the
//virtual 18bit palette
 08c5  89 ec             L55             mov     esp,ebp
 08c7  5d                                pop     ebp
 08c8  5f                                pop     edi
 08c9  5e                                pop     esi
 08ca  c3                                ret     
 08cb  90                                nop     

void Bitmap::PutTransparent18bit (UINT32 x, UINT32 y, char * offs) {

	int Top;	/* coordinate values of bitmap top-left corner */
   int Left;
	unsigned BMOffsetX;	/* starting offset into clipped bitmap */
   unsigned BMOffsetY;
   unsigned ClippedLeft;/* top-left corner position of clipped bitmap */
   unsigned ClippedTop;
   int BltWidth;	/* width of clipped bitmap */
   int BltHeight; /* height of clipped bitmap */
   UINT32 TempOffset;	/* temp variable to calc far pointer offsets */
	char * Screen;  /* pointer to current screen position */
	UCHAR * BMap; /* pointer to current bitmap position */
   unsigned WidthCounter;
   unsigned HeightCounter;
   unsigned ScreenIncrement;
   unsigned BitmapIncrement;

 08cc                    void near Bitmap::PutTransparent18bit( long unsigned, long unsigned, char near * ):
 08cc  56                                push    esi
 08cd  57                                push    edi
 08ce  55                                push    ebp
 08cf  89 e5                             mov     ebp,esp
 08d1  81 ec 58 00 00 00                 sub     esp,00000058H
 08d7  89 45 f0                          mov     -10H[ebp],eax
 08da  89 55 f4                          mov     -0cH[ebp],edx
 08dd  89 5d f8                          mov     -8H[ebp],ebx
 08e0  89 4d fc                          mov     -4H[ebp],ecx

	Left = x;
 08e3  8b 45 f4                          mov     eax,-0cH[ebp]
 08e6  89 45 ac                          mov     -54H[ebp],eax

   Top  = y;

   if (Left >= (int) ScreenClip->x2 || Top >= (int) ScreenClip->y2 ||
 08e9  8b 45 f8                          mov     eax,-8H[ebp]
 08ec  89 45 a8                          mov     -58H[ebp],eax

   (Left + (int) width) < ScreenClip->x1 ||
	(Top + (int)height) < ScreenClip->y1)
 08ef  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 08f5  8b 45 ac                          mov     eax,-54H[ebp]
 08f8  3b 42 08                          cmp     eax,+8H[edx]
 08fb  7d 0e                             jge     L56
 08fd  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 0903  8b 45 a8                          mov     eax,-58H[ebp]
 0906  3b 42 0c                          cmp     eax,+0cH[edx]
 0909  7c 02                             jl      L57
 090b  eb 11             L56             jmp     L58
 090d  8b 45 f0          L57             mov     eax,-10H[ebp]
 0910  8b 55 ac                          mov     edx,-54H[ebp]
 0913  03 10                             add     edx,[eax]
 0915  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 091a  3b 10                             cmp     edx,[eax]
 091c  73 02                             jae     L59
 091e  eb 13             L58             jmp     L60
 0920  8b 45 f0          L59             mov     eax,-10H[ebp]
 0923  8b 55 a8                          mov     edx,-58H[ebp]
 0926  03 50 04                          add     edx,+4H[eax]
 0929  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 092e  3b 50 04                          cmp     edx,+4H[eax]
 0931  73 05                             jae     L61

      return;

   /* clip bitmap to upper left edge of rect */

/* if Left < ScreenClip->x1, calculate starting x offset in bitmap */
 0933  e9 03 02 00 00    L60             jmp     L74

   if (Left < ScreenClip->x1) {
 0938  8b 15 00 00 00 00 L61             mov     edx,ClippingRectangle near * near ScreenClip
 093e  8b 45 ac                          mov     eax,-54H[ebp]
 0941  3b 02                             cmp     eax,[edx]
 0943  73 24                             jae     L62

   BMOffsetX = ScreenClip->x1 - Left;
 0945  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 094a  8b 00                             mov     eax,[eax]
 094c  2b 45 ac                          sub     eax,-54H[ebp]
 094f  89 45 b0                          mov     -50H[ebp],eax

      ClippedLeft = ScreenClip->x1;
 0952  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0957  8b 00                             mov     eax,[eax]
 0959  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width - BMOffsetX;
 095c  8b 45 f0                          mov     eax,-10H[ebp]
 095f  8b 00                             mov     eax,[eax]
 0961  2b 45 b0                          sub     eax,-50H[ebp]
 0964  89 45 c0                          mov     -40H[ebp],eax

   }
   else {
 0967  eb 15                             jmp     L63

   BMOffsetX = 0;
 0969  c7 45 b0 00 00 00 
       00                L62             mov     dword ptr -50H[ebp],00000000H

      ClippedLeft = Left;
 0970  8b 45 ac                          mov     eax,-54H[ebp]
 0973  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width;
	}

   /* if Top < ScreenClip->y1, calculate starting y offset in bitmap */
 0976  8b 45 f0                          mov     eax,-10H[ebp]
 0979  8b 00                             mov     eax,[eax]
 097b  89 45 c0                          mov     -40H[ebp],eax

   if (Top < ScreenClip->y1) {
 097e  8b 15 00 00 00 00 L63             mov     edx,ClippingRectangle near * near ScreenClip
 0984  8b 45 a8                          mov     eax,-58H[ebp]
 0987  3b 42 04                          cmp     eax,+4H[edx]
 098a  73 27                             jae     L64

   BMOffsetY = ScreenClip->y1 - Top;
 098c  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0991  8b 40 04                          mov     eax,+4H[eax]
 0994  2b 45 a8                          sub     eax,-58H[ebp]
 0997  89 45 b4                          mov     -4cH[ebp],eax

      ClippedTop = ScreenClip->y1;
 099a  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 099f  8b 40 04                          mov     eax,+4H[eax]
 09a2  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height - BMOffsetY;
 09a5  8b 45 f0                          mov     eax,-10H[ebp]
 09a8  8b 40 04                          mov     eax,+4H[eax]
 09ab  2b 45 b4                          sub     eax,-4cH[ebp]
 09ae  89 45 c4                          mov     -3cH[ebp],eax

   }
   else {
 09b1  eb 16                             jmp     L65

   BMOffsetY = 0;
 09b3  c7 45 b4 00 00 00 
       00                L64             mov     dword ptr -4cH[ebp],00000000H

      ClippedTop = Top;
 09ba  8b 45 a8                          mov     eax,-58H[ebp]
 09bd  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height;
   }

   /* clip bitmap to lower right edge of rect */

   /* if Left + bitmap width > rect width, calc ending x point */
 09c0  8b 45 f0                          mov     eax,-10H[ebp]
 09c3  8b 40 04                          mov     eax,+4H[eax]
 09c6  89 45 c4                          mov     -3cH[ebp],eax

   if ((ClippedLeft + BltWidth) > ScreenClip->x2) {
 09c9  8b 55 b8          L65             mov     edx,-48H[ebp]
 09cc  03 55 c0                          add     edx,-40H[ebp]
 09cf  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 09d4  3b 50 08                          cmp     edx,+8H[eax]
 09d7  76 11                             jbe     L66

   BltWidth -= ClippedLeft + BltWidth - ScreenClip->x2;
   }

   /* if Top + bitmap height > rect height, calc ending y point */
 09d9  8b 55 b8                          mov     edx,-48H[ebp]
 09dc  03 55 c0                          add     edx,-40H[ebp]
 09df  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 09e4  2b 50 08                          sub     edx,+8H[eax]
 09e7  29 55 c0                          sub     -40H[ebp],edx

   if ((ClippedTop + BltHeight) > ScreenClip->y2) {
 09ea  8b 55 bc          L66             mov     edx,-44H[ebp]
 09ed  03 55 c4                          add     edx,-3cH[ebp]
 09f0  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 09f5  3b 50 0c                          cmp     edx,+0cH[eax]
 09f8  76 11                             jbe     L67

   BltHeight -= ClippedTop + BltHeight - ScreenClip->y2;
   }

   /* calculate screen pointer starting position based on */
   /* clipped bitmap location */
 09fa  8b 55 bc                          mov     edx,-44H[ebp]
 09fd  03 55 c4                          add     edx,-3cH[ebp]
 0a00  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0a05  2b 50 0c                          sub     edx,+0cH[eax]
 0a08  29 55 c4                          sub     -3cH[ebp],edx

   TempOffset = ClippedTop * ScreenWidth + ClippedLeft;


 0a0b  31 c0             L67             xor     eax,eax
 0a0d  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 0a13  0f af 45 bc                       imul    eax,-44H[ebp]
 0a17  8b 55 b8                          mov     edx,-48H[ebp]
 0a1a  01 c2                             add     edx,eax
 0a1c  89 55 c8                          mov     -38H[ebp],edx

	Screen = offs + TempOffset;

   /* calculate bitmap pointer starting position based on */
   /* clipped bitmap location */
 0a1f  8b 45 fc                          mov     eax,-4H[ebp]
 0a22  03 45 c8                          add     eax,-38H[ebp]
 0a25  89 45 cc                          mov     -34H[ebp],eax

   TempOffset = BMOffsetY * width + BMOffsetX;
 0a28  8b 45 f0                          mov     eax,-10H[ebp]
 0a2b  8b 55 b4                          mov     edx,-4cH[ebp]
 0a2e  0f af 10                          imul    edx,[eax]
 0a31  89 d0                             mov     eax,edx
 0a33  8b 55 b0                          mov     edx,-50H[ebp]
 0a36  01 c2                             add     edx,eax
 0a38  89 55 c8                          mov     -38H[ebp],edx

   BMap = BmpSource;
 0a3b  8b 45 f0                          mov     eax,-10H[ebp]
 0a3e  8b 40 08                          mov     eax,+8H[eax]
 0a41  89 45 d0                          mov     -30H[ebp],eax

   BMap += TempOffset;

   int tempr, tempg, tempb;//temporary color vars


   /* blt to screen */
 0a44  8b 45 c8                          mov     eax,-38H[ebp]
 0a47  01 45 d0                          add     -30H[ebp],eax

   ScreenIncrement = ScreenWidth - BltWidth; //screen class
 0a4a  31 c0                             xor     eax,eax
 0a4c  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 0a52  2b 45 c0                          sub     eax,-40H[ebp]
 0a55  89 45 dc                          mov     -24H[ebp],eax

   BitmapIncrement = width - BltWidth;
 0a58  8b 45 f0                          mov     eax,-10H[ebp]
 0a5b  8b 00                             mov     eax,[eax]
 0a5d  2b 45 c0                          sub     eax,-40H[ebp]
 0a60  89 45 e0                          mov     -20H[ebp],eax

   for (HeightCounter = 0; HeightCounter < BltHeight; HeightCounter++) {
 0a63  c7 45 d8 00 00 00 
       00                                mov     dword ptr -28H[ebp],00000000H
 0a6a  eb 06                             jmp     L69
 0a6c  8b 45 d8          L68             mov     eax,-28H[ebp]
 0a6f  ff 45 d8                          inc     dword ptr -28H[ebp]
 0a72  8b 45 d8          L69             mov     eax,-28H[ebp]
 0a75  3b 45 c4                          cmp     eax,-3cH[ebp]
 0a78  0f 83 bd 00 00 00                 jae     L74

   	for (WidthCounter = 0; WidthCounter < BltWidth; WidthCounter++) {
 0a7e  c7 45 d4 00 00 00 
       00                                mov     dword ptr -2cH[ebp],00000000H
 0a85  eb 06                             jmp     L71
 0a87  8b 45 d4          L70             mov     eax,-2cH[ebp]
 0a8a  ff 45 d4                          inc     dword ptr -2cH[ebp]
 0a8d  8b 45 d4          L71             mov     eax,-2cH[ebp]
 0a90  3b 45 c0                          cmp     eax,-40H[ebp]
 0a93  0f 83 91 00 00 00                 jae     L73

      	if (*BMap != 0) {
				//this blits with the 18bit color!!!!
 0a99  8b 45 d0                          mov     eax,-30H[ebp]
 0a9c  8a 00                             mov     al,[eax]
 0a9e  25 ff 00 00 00                    and     eax,000000ffH
 0aa3  85 c0                             test    eax,eax
 0aa5  74 72                             je      L72

				tempr = (int)ThePal[*BMap][0];
 0aa7  8b 45 d0                          mov     eax,-30H[ebp]
 0aaa  8a 00                             mov     al,[eax]
 0aac  25 ff 00 00 00                    and     eax,000000ffH
 0ab1  8d 04 40                          lea     eax,[eax+eax*2]
 0ab4  8b 55 f0                          mov     edx,-10H[ebp]
 0ab7  01 c2                             add     edx,eax
 0ab9  31 c0                             xor     eax,eax
 0abb  8a 42 0c                          mov     al,+0cH[edx]
 0abe  89 45 e4                          mov     -1cH[ebp],eax

				tempg = (int)ThePal[*BMap][1];
 0ac1  8b 45 d0                          mov     eax,-30H[ebp]
 0ac4  8a 00                             mov     al,[eax]
 0ac6  25 ff 00 00 00                    and     eax,000000ffH
 0acb  8d 04 40                          lea     eax,[eax+eax*2]
 0ace  8b 55 f0                          mov     edx,-10H[ebp]
 0ad1  01 c2                             add     edx,eax
 0ad3  31 c0                             xor     eax,eax
 0ad5  8a 42 0d                          mov     al,+0dH[edx]
 0ad8  89 45 e8                          mov     -18H[ebp],eax

				tempb = (int)ThePal[*BMap][2];
 0adb  8b 45 d0                          mov     eax,-30H[ebp]
 0ade  8a 00                             mov     al,[eax]
 0ae0  25 ff 00 00 00                    and     eax,000000ffH
 0ae5  8d 04 40                          lea     eax,[eax+eax*2]
 0ae8  8b 55 f0                          mov     edx,-10H[ebp]
 0aeb  01 c2                             add     edx,eax
 0aed  31 c0                             xor     eax,eax
 0aef  8a 42 0e                          mov     al,+0eH[edx]
 0af2  89 45 ec                          mov     -14H[ebp],eax

            *Screen = (ScreenPal->VirPal[tempr][tempg][tempb]);

				//*Screen = *BMap;
			}
 0af5  8b 15 00 00 00 00                 mov     edx,Palette near * near ScreenPal
 0afb  8b 45 e4                          mov     eax,-1cH[ebp]
 0afe  c1 e0 0c                          shl     eax,0cH
 0b01  01 c2                             add     edx,eax
 0b03  8b 45 e8                          mov     eax,-18H[ebp]
 0b06  c1 e0 06                          shl     eax,06H
 0b09  01 d0                             add     eax,edx
 0b0b  03 45 ec                          add     eax,-14H[ebp]
 0b0e  8a 90 00 03 00 00                 mov     dl,+300H[eax]
 0b14  8b 45 cc                          mov     eax,-34H[ebp]
 0b17  88 10                             mov     [eax],dl

        	Screen++;
 0b19  8b 45 cc          L72             mov     eax,-34H[ebp]
 0b1c  ff 45 cc                          inc     dword ptr -34H[ebp]

        	BMap++;
 0b1f  8b 45 d0                          mov     eax,-30H[ebp]
 0b22  ff 45 d0                          inc     dword ptr -30H[ebp]

      }
 0b25  e9 5d ff ff ff                    jmp     L70

      Screen += ScreenIncrement;
 0b2a  8b 45 dc          L73             mov     eax,-24H[ebp]
 0b2d  01 45 cc                          add     -34H[ebp],eax

      BMap += BitmapIncrement;
 0b30  8b 45 e0                          mov     eax,-20H[ebp]
 0b33  01 45 d0                          add     -30H[ebp],eax

   }
 0b36  e9 31 ff ff ff                    jmp     L68

}

//PutRegular18it Puts bitmap
//uses virtual 18bit palette
 0b3b  89 ec             L74             mov     esp,ebp
 0b3d  5d                                pop     ebp
 0b3e  5f                                pop     edi
 0b3f  5e                                pop     esi
 0b40  c3                                ret     
 0b41  8d 40 00                          lea     eax,+0H[eax]

void Bitmap::PutRegular18bit (UINT32 x, UINT32 y, char * offs) {

	int Top;	/* coordinate values of bitmap top-left corner */
   int Left;
	unsigned BMOffsetX;	/* starting offset into clipped bitmap */
   unsigned BMOffsetY;
   unsigned ClippedLeft;/* top-left corner position of clipped bitmap */
   unsigned ClippedTop;
   int BltWidth;	/* width of clipped bitmap */
   int BltHeight; /* height of clipped bitmap */
   UINT32 TempOffset;	/* temp variable to calc far pointer offsets */
	char * Screen;  /* pointer to current screen position */
	UCHAR * BMap; /* pointer to current bitmap position */
   unsigned WidthCounter;
   unsigned HeightCounter;
   unsigned ScreenIncrement;
   unsigned BitmapIncrement;

 0b44                    void near Bitmap::PutRegular18bit( long unsigned, long unsigned, char near * ):
 0b44  56                                push    esi
 0b45  57                                push    edi
 0b46  55                                push    ebp
 0b47  89 e5                             mov     ebp,esp
 0b49  81 ec 58 00 00 00                 sub     esp,00000058H
 0b4f  89 45 f0                          mov     -10H[ebp],eax
 0b52  89 55 f4                          mov     -0cH[ebp],edx
 0b55  89 5d f8                          mov     -8H[ebp],ebx
 0b58  89 4d fc                          mov     -4H[ebp],ecx

	Left = x;
 0b5b  8b 45 f4                          mov     eax,-0cH[ebp]
 0b5e  89 45 ac                          mov     -54H[ebp],eax

   Top  = y;

   if (Left >= (int) ScreenClip->x2 || Top >= (int) ScreenClip->y2 ||
 0b61  8b 45 f8                          mov     eax,-8H[ebp]
 0b64  89 45 a8                          mov     -58H[ebp],eax

   (Left + (int) width) < ScreenClip->x1 ||
	(Top + (int)height) < ScreenClip->y1)
 0b67  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 0b6d  8b 45 ac                          mov     eax,-54H[ebp]
 0b70  3b 42 08                          cmp     eax,+8H[edx]
 0b73  7d 0e                             jge     L75
 0b75  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 0b7b  8b 45 a8                          mov     eax,-58H[ebp]
 0b7e  3b 42 0c                          cmp     eax,+0cH[edx]
 0b81  7c 02                             jl      L76
 0b83  eb 11             L75             jmp     L77
 0b85  8b 45 f0          L76             mov     eax,-10H[ebp]
 0b88  8b 55 ac                          mov     edx,-54H[ebp]
 0b8b  03 10                             add     edx,[eax]
 0b8d  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0b92  3b 10                             cmp     edx,[eax]
 0b94  73 02                             jae     L78
 0b96  eb 13             L77             jmp     L79
 0b98  8b 45 f0          L78             mov     eax,-10H[ebp]
 0b9b  8b 55 a8                          mov     edx,-58H[ebp]
 0b9e  03 50 04                          add     edx,+4H[eax]
 0ba1  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0ba6  3b 50 04                          cmp     edx,+4H[eax]
 0ba9  73 05                             jae     L80

      return;

   /* clip bitmap to upper left edge of rect */

/* if Left < ScreenClip->x1, calculate starting x offset in bitmap */
 0bab  e9 f5 01 00 00    L79             jmp     L92

   if (Left < ScreenClip->x1) {
 0bb0  8b 15 00 00 00 00 L80             mov     edx,ClippingRectangle near * near ScreenClip
 0bb6  8b 45 ac                          mov     eax,-54H[ebp]
 0bb9  3b 02                             cmp     eax,[edx]
 0bbb  73 24                             jae     L81

   BMOffsetX = ScreenClip->x1 - Left;
 0bbd  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0bc2  8b 00                             mov     eax,[eax]
 0bc4  2b 45 ac                          sub     eax,-54H[ebp]
 0bc7  89 45 b0                          mov     -50H[ebp],eax

      ClippedLeft = ScreenClip->x1;
 0bca  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0bcf  8b 00                             mov     eax,[eax]
 0bd1  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width - BMOffsetX;
 0bd4  8b 45 f0                          mov     eax,-10H[ebp]
 0bd7  8b 00                             mov     eax,[eax]
 0bd9  2b 45 b0                          sub     eax,-50H[ebp]
 0bdc  89 45 c0                          mov     -40H[ebp],eax

   }
   else {
 0bdf  eb 15                             jmp     L82

   BMOffsetX = 0;
 0be1  c7 45 b0 00 00 00 
       00                L81             mov     dword ptr -50H[ebp],00000000H

      ClippedLeft = Left;
 0be8  8b 45 ac                          mov     eax,-54H[ebp]
 0beb  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width;
	}

   /* if Top < ScreenClip->y1, calculate starting y offset in bitmap */
 0bee  8b 45 f0                          mov     eax,-10H[ebp]
 0bf1  8b 00                             mov     eax,[eax]
 0bf3  89 45 c0                          mov     -40H[ebp],eax

   if (Top < ScreenClip->y1) {
 0bf6  8b 15 00 00 00 00 L82             mov     edx,ClippingRectangle near * near ScreenClip
 0bfc  8b 45 a8                          mov     eax,-58H[ebp]
 0bff  3b 42 04                          cmp     eax,+4H[edx]
 0c02  73 27                             jae     L83

   BMOffsetY = ScreenClip->y1 - Top;
 0c04  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0c09  8b 40 04                          mov     eax,+4H[eax]
 0c0c  2b 45 a8                          sub     eax,-58H[ebp]
 0c0f  89 45 b4                          mov     -4cH[ebp],eax

      ClippedTop = ScreenClip->y1;
 0c12  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0c17  8b 40 04                          mov     eax,+4H[eax]
 0c1a  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height - BMOffsetY;
 0c1d  8b 45 f0                          mov     eax,-10H[ebp]
 0c20  8b 40 04                          mov     eax,+4H[eax]
 0c23  2b 45 b4                          sub     eax,-4cH[ebp]
 0c26  89 45 c4                          mov     -3cH[ebp],eax

   }
   else {
 0c29  eb 16                             jmp     L84

   BMOffsetY = 0;
 0c2b  c7 45 b4 00 00 00 
       00                L83             mov     dword ptr -4cH[ebp],00000000H

      ClippedTop = Top;
 0c32  8b 45 a8                          mov     eax,-58H[ebp]
 0c35  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height;
   }

   /* clip bitmap to lower right edge of rect */

   /* if Left + bitmap width > rect width, calc ending x point */
 0c38  8b 45 f0                          mov     eax,-10H[ebp]
 0c3b  8b 40 04                          mov     eax,+4H[eax]
 0c3e  89 45 c4                          mov     -3cH[ebp],eax

   if ((ClippedLeft + BltWidth) > ScreenClip->x2) {
 0c41  8b 55 b8          L84             mov     edx,-48H[ebp]
 0c44  03 55 c0                          add     edx,-40H[ebp]
 0c47  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0c4c  3b 50 08                          cmp     edx,+8H[eax]
 0c4f  76 11                             jbe     L85

   BltWidth -= ClippedLeft + BltWidth - ScreenClip->x2;
   }

   /* if Top + bitmap height > rect height, calc ending y point */
 0c51  8b 55 b8                          mov     edx,-48H[ebp]
 0c54  03 55 c0                          add     edx,-40H[ebp]
 0c57  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0c5c  2b 50 08                          sub     edx,+8H[eax]
 0c5f  29 55 c0                          sub     -40H[ebp],edx

   if ((ClippedTop + BltHeight) > ScreenClip->y2) {
 0c62  8b 55 bc          L85             mov     edx,-44H[ebp]
 0c65  03 55 c4                          add     edx,-3cH[ebp]
 0c68  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0c6d  3b 50 0c                          cmp     edx,+0cH[eax]
 0c70  76 11                             jbe     L86

   BltHeight -= ClippedTop + BltHeight - ScreenClip->y2;
   }

   /* calculate screen pointer starting position based on */
   /* clipped bitmap location */
 0c72  8b 55 bc                          mov     edx,-44H[ebp]
 0c75  03 55 c4                          add     edx,-3cH[ebp]
 0c78  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0c7d  2b 50 0c                          sub     edx,+0cH[eax]
 0c80  29 55 c4                          sub     -3cH[ebp],edx

   TempOffset = ClippedTop * ScreenWidth + ClippedLeft;


 0c83  31 c0             L86             xor     eax,eax
 0c85  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 0c8b  0f af 45 bc                       imul    eax,-44H[ebp]
 0c8f  8b 55 b8                          mov     edx,-48H[ebp]
 0c92  01 c2                             add     edx,eax
 0c94  89 55 c8                          mov     -38H[ebp],edx

	Screen = offs + TempOffset;

   /* calculate bitmap pointer starting position based on */
   /* clipped bitmap location */
 0c97  8b 45 fc                          mov     eax,-4H[ebp]
 0c9a  03 45 c8                          add     eax,-38H[ebp]
 0c9d  89 45 cc                          mov     -34H[ebp],eax

   TempOffset = BMOffsetY * width + BMOffsetX;
 0ca0  8b 45 f0                          mov     eax,-10H[ebp]
 0ca3  8b 55 b4                          mov     edx,-4cH[ebp]
 0ca6  0f af 10                          imul    edx,[eax]
 0ca9  89 d0                             mov     eax,edx
 0cab  8b 55 b0                          mov     edx,-50H[ebp]
 0cae  01 c2                             add     edx,eax
 0cb0  89 55 c8                          mov     -38H[ebp],edx

   BMap = BmpSource;
 0cb3  8b 45 f0                          mov     eax,-10H[ebp]
 0cb6  8b 40 08                          mov     eax,+8H[eax]
 0cb9  89 45 d0                          mov     -30H[ebp],eax

   BMap += TempOffset;

   int tempr, tempg, tempb;//temporary color vars


   /* blt to screen */
 0cbc  8b 45 c8                          mov     eax,-38H[ebp]
 0cbf  01 45 d0                          add     -30H[ebp],eax

   ScreenIncrement = ScreenWidth - BltWidth; //screen class
 0cc2  31 c0                             xor     eax,eax
 0cc4  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 0cca  2b 45 c0                          sub     eax,-40H[ebp]
 0ccd  89 45 dc                          mov     -24H[ebp],eax

   BitmapIncrement = width - BltWidth;
 0cd0  8b 45 f0                          mov     eax,-10H[ebp]
 0cd3  8b 00                             mov     eax,[eax]
 0cd5  2b 45 c0                          sub     eax,-40H[ebp]
 0cd8  89 45 e0                          mov     -20H[ebp],eax

   for (HeightCounter = 0; HeightCounter < BltHeight; HeightCounter++) {
 0cdb  c7 45 d8 00 00 00 
       00                                mov     dword ptr -28H[ebp],00000000H
 0ce2  eb 06                             jmp     L88
 0ce4  8b 45 d8          L87             mov     eax,-28H[ebp]
 0ce7  ff 45 d8                          inc     dword ptr -28H[ebp]
 0cea  8b 45 d8          L88             mov     eax,-28H[ebp]
 0ced  3b 45 c4                          cmp     eax,-3cH[ebp]
 0cf0  0f 83 af 00 00 00                 jae     L92

   	for (WidthCounter = 0; WidthCounter < BltWidth; WidthCounter++) {
      	//if (*BMap != 0) {
				//this blits with the 18bit color!!!!
 0cf6  c7 45 d4 00 00 00 
       00                                mov     dword ptr -2cH[ebp],00000000H
 0cfd  eb 06                             jmp     L90
 0cff  8b 45 d4          L89             mov     eax,-2cH[ebp]
 0d02  ff 45 d4                          inc     dword ptr -2cH[ebp]
 0d05  8b 45 d4          L90             mov     eax,-2cH[ebp]
 0d08  3b 45 c0                          cmp     eax,-40H[ebp]
 0d0b  0f 83 83 00 00 00                 jae     L91

			tempr = (int)ThePal[*BMap][0];
 0d11  8b 45 d0                          mov     eax,-30H[ebp]
 0d14  8a 00                             mov     al,[eax]
 0d16  25 ff 00 00 00                    and     eax,000000ffH
 0d1b  8d 04 40                          lea     eax,[eax+eax*2]
 0d1e  8b 55 f0                          mov     edx,-10H[ebp]
 0d21  01 c2                             add     edx,eax
 0d23  31 c0                             xor     eax,eax
 0d25  8a 42 0c                          mov     al,+0cH[edx]
 0d28  89 45 e4                          mov     -1cH[ebp],eax

			tempg = (int)ThePal[*BMap][1];
 0d2b  8b 45 d0                          mov     eax,-30H[ebp]
 0d2e  8a 00                             mov     al,[eax]
 0d30  25 ff 00 00 00                    and     eax,000000ffH
 0d35  8d 04 40                          lea     eax,[eax+eax*2]
 0d38  8b 55 f0                          mov     edx,-10H[ebp]
 0d3b  01 c2                             add     edx,eax
 0d3d  31 c0                             xor     eax,eax
 0d3f  8a 42 0d                          mov     al,+0dH[edx]
 0d42  89 45 e8                          mov     -18H[ebp],eax

			tempb = (int)ThePal[*BMap][2];
 0d45  8b 45 d0                          mov     eax,-30H[ebp]
 0d48  8a 00                             mov     al,[eax]
 0d4a  25 ff 00 00 00                    and     eax,000000ffH
 0d4f  8d 04 40                          lea     eax,[eax+eax*2]
 0d52  8b 55 f0                          mov     edx,-10H[ebp]
 0d55  01 c2                             add     edx,eax
 0d57  31 c0                             xor     eax,eax
 0d59  8a 42 0e                          mov     al,+0eH[edx]
 0d5c  89 45 ec                          mov     -14H[ebp],eax

         *Screen = (ScreenPal->VirPal[tempr][tempg][tempb]);

				//*Screen = *BMap;
			//}
 0d5f  8b 15 00 00 00 00                 mov     edx,Palette near * near ScreenPal
 0d65  8b 45 e4                          mov     eax,-1cH[ebp]
 0d68  c1 e0 0c                          shl     eax,0cH
 0d6b  01 c2                             add     edx,eax
 0d6d  8b 45 e8                          mov     eax,-18H[ebp]
 0d70  c1 e0 06                          shl     eax,06H
 0d73  01 d0                             add     eax,edx
 0d75  03 45 ec                          add     eax,-14H[ebp]
 0d78  8a 90 00 03 00 00                 mov     dl,+300H[eax]
 0d7e  8b 45 cc                          mov     eax,-34H[ebp]
 0d81  88 10                             mov     [eax],dl

        	Screen++;
 0d83  8b 45 cc                          mov     eax,-34H[ebp]
 0d86  ff 45 cc                          inc     dword ptr -34H[ebp]

        	BMap++;
 0d89  8b 45 d0                          mov     eax,-30H[ebp]
 0d8c  ff 45 d0                          inc     dword ptr -30H[ebp]

      }
 0d8f  e9 6b ff ff ff                    jmp     L89

      Screen += ScreenIncrement;
 0d94  8b 45 dc          L91             mov     eax,-24H[ebp]
 0d97  01 45 cc                          add     -34H[ebp],eax

      BMap += BitmapIncrement;
 0d9a  8b 45 e0                          mov     eax,-20H[ebp]
 0d9d  01 45 d0                          add     -30H[ebp],eax

   }
 0da0  e9 3f ff ff ff                    jmp     L87

}


//Puts w/ transparen pixels, but also fades
 0da5  89 ec             L92             mov     esp,ebp
 0da7  5d                                pop     ebp
 0da8  5f                                pop     edi
 0da9  5e                                pop     esi
 0daa  c3                                ret     
 0dab  90                                nop     

void Bitmap::PutTransparentFaded (UINT32 x, UINT32 y, char * offs,
   INT32 rfade, INT32 gfade, INT32 bfade) {


	int Top;	/* coordinate values of bitmap top-left corner */
   int Left;
	unsigned BMOffsetX;	/* starting offset into clipped bitmap */
   unsigned BMOffsetY;
   unsigned ClippedLeft;/* top-left corner position of clipped bitmap */
   unsigned ClippedTop;
   int BltWidth;	/* width of clipped bitmap */
   int BltHeight; /* height of clipped bitmap */
   UINT32 TempOffset;	/* temp variable to calc far pointer offsets */
	char * Screen;  /* pointer to current screen position */
	UCHAR * BMap; /* pointer to current bitmap position */
   unsigned WidthCounter;
   unsigned HeightCounter;
   unsigned ScreenIncrement;
   unsigned BitmapIncrement;

 0dac                    void near Bitmap::PutTransparentFaded( long unsigned, long unsigned, char near *, long, long, long ):
 0dac  56                                push    esi
 0dad  57                                push    edi
 0dae  55                                push    ebp
 0daf  89 e5                             mov     ebp,esp
 0db1  81 ec 70 00 00 00                 sub     esp,00000070H
 0db7  89 45 f0                          mov     -10H[ebp],eax
 0dba  89 55 f4                          mov     -0cH[ebp],edx
 0dbd  89 5d f8                          mov     -8H[ebp],ebx
 0dc0  89 4d fc                          mov     -4H[ebp],ecx

	Left = x;
 0dc3  8b 45 f4                          mov     eax,-0cH[ebp]
 0dc6  89 45 ac                          mov     -54H[ebp],eax

   Top  = y;

   if (Left >= (int) ScreenClip->x2 || Top >= (int) ScreenClip->y2 ||
 0dc9  8b 45 f8                          mov     eax,-8H[ebp]
 0dcc  89 45 a8                          mov     -58H[ebp],eax

   (Left + (int) width) < ScreenClip->x1 ||
	(Top + (int)height) < ScreenClip->y1)
 0dcf  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 0dd5  8b 45 ac                          mov     eax,-54H[ebp]
 0dd8  3b 42 08                          cmp     eax,+8H[edx]
 0ddb  7d 0e                             jge     L93
 0ddd  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 0de3  8b 45 a8                          mov     eax,-58H[ebp]
 0de6  3b 42 0c                          cmp     eax,+0cH[edx]
 0de9  7c 02                             jl      L94
 0deb  eb 11             L93             jmp     L95
 0ded  8b 45 f0          L94             mov     eax,-10H[ebp]
 0df0  8b 55 ac                          mov     edx,-54H[ebp]
 0df3  03 10                             add     edx,[eax]
 0df5  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0dfa  3b 10                             cmp     edx,[eax]
 0dfc  73 02                             jae     L96
 0dfe  eb 13             L95             jmp     L97
 0e00  8b 45 f0          L96             mov     eax,-10H[ebp]
 0e03  8b 55 a8                          mov     edx,-58H[ebp]
 0e06  03 50 04                          add     edx,+4H[eax]
 0e09  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0e0e  3b 50 04                          cmp     edx,+4H[eax]
 0e11  73 05                             jae     L98

      return;

   /* clip bitmap to upper left edge of rect */

/* if Left < ScreenClip->x1, calculate starting x offset in bitmap */
 0e13  e9 bb 02 00 00    L97             jmp     L123

   if (Left < ScreenClip->x1) {
 0e18  8b 15 00 00 00 00 L98             mov     edx,ClippingRectangle near * near ScreenClip
 0e1e  8b 45 ac                          mov     eax,-54H[ebp]
 0e21  3b 02                             cmp     eax,[edx]
 0e23  73 24                             jae     L99

   BMOffsetX = ScreenClip->x1 - Left;
 0e25  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0e2a  8b 00                             mov     eax,[eax]
 0e2c  2b 45 ac                          sub     eax,-54H[ebp]
 0e2f  89 45 b0                          mov     -50H[ebp],eax

      ClippedLeft = ScreenClip->x1;
 0e32  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0e37  8b 00                             mov     eax,[eax]
 0e39  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width - BMOffsetX;
 0e3c  8b 45 f0                          mov     eax,-10H[ebp]
 0e3f  8b 00                             mov     eax,[eax]
 0e41  2b 45 b0                          sub     eax,-50H[ebp]
 0e44  89 45 c0                          mov     -40H[ebp],eax

   }
   else {
 0e47  eb 15                             jmp     L100

   BMOffsetX = 0;
 0e49  c7 45 b0 00 00 00 
       00                L99             mov     dword ptr -50H[ebp],00000000H

      ClippedLeft = Left;
 0e50  8b 45 ac                          mov     eax,-54H[ebp]
 0e53  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width;
	}

   /* if Top < ScreenClip->y1, calculate starting y offset in bitmap */
 0e56  8b 45 f0                          mov     eax,-10H[ebp]
 0e59  8b 00                             mov     eax,[eax]
 0e5b  89 45 c0                          mov     -40H[ebp],eax

   if (Top < ScreenClip->y1) {
 0e5e  8b 15 00 00 00 00 L100            mov     edx,ClippingRectangle near * near ScreenClip
 0e64  8b 45 a8                          mov     eax,-58H[ebp]
 0e67  3b 42 04                          cmp     eax,+4H[edx]
 0e6a  73 27                             jae     L101

   BMOffsetY = ScreenClip->y1 - Top;
 0e6c  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0e71  8b 40 04                          mov     eax,+4H[eax]
 0e74  2b 45 a8                          sub     eax,-58H[ebp]
 0e77  89 45 b4                          mov     -4cH[ebp],eax

      ClippedTop = ScreenClip->y1;
 0e7a  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0e7f  8b 40 04                          mov     eax,+4H[eax]
 0e82  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height - BMOffsetY;
 0e85  8b 45 f0                          mov     eax,-10H[ebp]
 0e88  8b 40 04                          mov     eax,+4H[eax]
 0e8b  2b 45 b4                          sub     eax,-4cH[ebp]
 0e8e  89 45 c4                          mov     -3cH[ebp],eax

   }
   else {
 0e91  eb 16                             jmp     L102

   BMOffsetY = 0;
 0e93  c7 45 b4 00 00 00 
       00                L101            mov     dword ptr -4cH[ebp],00000000H

      ClippedTop = Top;
 0e9a  8b 45 a8                          mov     eax,-58H[ebp]
 0e9d  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height;
   }

   /* clip bitmap to lower right edge of rect */

   /* if Left + bitmap width > rect width, calc ending x point */
 0ea0  8b 45 f0                          mov     eax,-10H[ebp]
 0ea3  8b 40 04                          mov     eax,+4H[eax]
 0ea6  89 45 c4                          mov     -3cH[ebp],eax

   if ((ClippedLeft + BltWidth) > ScreenClip->x2) {
 0ea9  8b 55 b8          L102            mov     edx,-48H[ebp]
 0eac  03 55 c0                          add     edx,-40H[ebp]
 0eaf  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0eb4  3b 50 08                          cmp     edx,+8H[eax]
 0eb7  76 11                             jbe     L103

   BltWidth -= ClippedLeft + BltWidth - ScreenClip->x2;
   }

   /* if Top + bitmap height > rect height, calc ending y point */
 0eb9  8b 55 b8                          mov     edx,-48H[ebp]
 0ebc  03 55 c0                          add     edx,-40H[ebp]
 0ebf  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0ec4  2b 50 08                          sub     edx,+8H[eax]
 0ec7  29 55 c0                          sub     -40H[ebp],edx

   if ((ClippedTop + BltHeight) > ScreenClip->y2) {
 0eca  8b 55 bc          L103            mov     edx,-44H[ebp]
 0ecd  03 55 c4                          add     edx,-3cH[ebp]
 0ed0  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0ed5  3b 50 0c                          cmp     edx,+0cH[eax]
 0ed8  76 11                             jbe     L104

   BltHeight -= ClippedTop + BltHeight - ScreenClip->y2;
   }

   /* calculate screen pointer starting position based on */
   /* clipped bitmap location */
 0eda  8b 55 bc                          mov     edx,-44H[ebp]
 0edd  03 55 c4                          add     edx,-3cH[ebp]
 0ee0  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 0ee5  2b 50 0c                          sub     edx,+0cH[eax]
 0ee8  29 55 c4                          sub     -3cH[ebp],edx

   TempOffset = ClippedTop * ScreenWidth + ClippedLeft;


 0eeb  31 c0             L104            xor     eax,eax
 0eed  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 0ef3  0f af 45 bc                       imul    eax,-44H[ebp]
 0ef7  8b 55 b8                          mov     edx,-48H[ebp]
 0efa  01 c2                             add     edx,eax
 0efc  89 55 c8                          mov     -38H[ebp],edx

	Screen = offs + TempOffset;

   /* calculate bitmap pointer starting position based on */
   /* clipped bitmap location */
 0eff  8b 45 fc                          mov     eax,-4H[ebp]
 0f02  03 45 c8                          add     eax,-38H[ebp]
 0f05  89 45 cc                          mov     -34H[ebp],eax

   TempOffset = BMOffsetY * width + BMOffsetX;
 0f08  8b 45 f0                          mov     eax,-10H[ebp]
 0f0b  8b 55 b4                          mov     edx,-4cH[ebp]
 0f0e  0f af 10                          imul    edx,[eax]
 0f11  89 d0                             mov     eax,edx
 0f13  8b 55 b0                          mov     edx,-50H[ebp]
 0f16  01 c2                             add     edx,eax
 0f18  89 55 c8                          mov     -38H[ebp],edx

   BMap = BmpSource;
 0f1b  8b 45 f0                          mov     eax,-10H[ebp]
 0f1e  8b 40 08                          mov     eax,+8H[eax]
 0f21  89 45 d0                          mov     -30H[ebp],eax

   BMap += TempOffset;

   int tempr, tempg, tempb;//temporary color vars


   /* blt to screen */
 0f24  8b 45 c8                          mov     eax,-38H[ebp]
 0f27  01 45 d0                          add     -30H[ebp],eax

   ScreenIncrement = ScreenWidth - BltWidth; //screen class
 0f2a  31 c0                             xor     eax,eax
 0f2c  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 0f32  2b 45 c0                          sub     eax,-40H[ebp]
 0f35  89 45 dc                          mov     -24H[ebp],eax

   BitmapIncrement = width - BltWidth;
 0f38  8b 45 f0                          mov     eax,-10H[ebp]
 0f3b  8b 00                             mov     eax,[eax]
 0f3d  2b 45 c0                          sub     eax,-40H[ebp]
 0f40  89 45 e0                          mov     -20H[ebp],eax

   for (HeightCounter = 0; HeightCounter < BltHeight; HeightCounter++) {
 0f43  c7 45 d8 00 00 00 
       00                                mov     dword ptr -28H[ebp],00000000H
 0f4a  eb 06                             jmp     L106
 0f4c  8b 45 d8          L105            mov     eax,-28H[ebp]
 0f4f  ff 45 d8                          inc     dword ptr -28H[ebp]
 0f52  8b 45 d8          L106            mov     eax,-28H[ebp]
 0f55  3b 45 c4                          cmp     eax,-3cH[ebp]
 0f58  0f 83 75 01 00 00                 jae     L123

   	for (WidthCounter = 0; WidthCounter < BltWidth; WidthCounter++) {
 0f5e  c7 45 d4 00 00 00 
       00                                mov     dword ptr -2cH[ebp],00000000H
 0f65  eb 06                             jmp     L108
 0f67  8b 45 d4          L107            mov     eax,-2cH[ebp]
 0f6a  ff 45 d4                          inc     dword ptr -2cH[ebp]
 0f6d  8b 45 d4          L108            mov     eax,-2cH[ebp]
 0f70  3b 45 c0                          cmp     eax,-40H[ebp]
 0f73  0f 83 49 01 00 00                 jae     L122

      	if (*BMap != 0) {
				//this blits with the 18bit color!!!!
 0f79  8b 45 d0                          mov     eax,-30H[ebp]
 0f7c  8a 00                             mov     al,[eax]
 0f7e  25 ff 00 00 00                    and     eax,000000ffH
 0f83  85 c0                             test    eax,eax
 0f85  0f 84 26 01 00 00                 je      L121

            tempr = (int)ThePal[*BMap][0] + rfade;
 0f8b  8b 45 d0                          mov     eax,-30H[ebp]
 0f8e  8a 00                             mov     al,[eax]
 0f90  25 ff 00 00 00                    and     eax,000000ffH
 0f95  8d 04 40                          lea     eax,[eax+eax*2]
 0f98  03 45 f0                          add     eax,-10H[ebp]
 0f9b  8a 40 0c                          mov     al,+0cH[eax]
 0f9e  25 ff 00 00 00                    and     eax,000000ffH
 0fa3  8b 55 10                          mov     edx,+10H[ebp]
 0fa6  01 c2                             add     edx,eax
 0fa8  89 55 e4                          mov     -1cH[ebp],edx

				(tempr < 0) ? tempr = 0 : tempr;
 0fab  83 7d e4 00                       cmp     dword ptr -1cH[ebp],00000000H
 0faf  7d 0f                             jge     L109
 0fb1  c7 45 e4 00 00 00 
       00                                mov     dword ptr -1cH[ebp],00000000H
 0fb8  8d 45 e4                          lea     eax,-1cH[ebp]
 0fbb  89 45 90                          mov     -70H[ebp],eax
 0fbe  eb 06                             jmp     L110
 0fc0  8d 45 e4          L109            lea     eax,-1cH[ebp]
 0fc3  89 45 90                          mov     -70H[ebp],eax

				(tempr > 63) ? tempr = 63 : tempr;
 0fc6  83 7d e4 3f       L110            cmp     dword ptr -1cH[ebp],0000003fH
 0fca  7e 0f                             jle     L111
 0fcc  c7 45 e4 3f 00 00 
       00                                mov     dword ptr -1cH[ebp],0000003fH
 0fd3  8d 45 e4                          lea     eax,-1cH[ebp]
 0fd6  89 45 94                          mov     -6cH[ebp],eax
 0fd9  eb 06                             jmp     L112
 0fdb  8d 45 e4          L111            lea     eax,-1cH[ebp]
 0fde  89 45 94                          mov     -6cH[ebp],eax

				tempg = (int)ThePal[*BMap][1] + gfade;
 0fe1  8b 45 d0          L112            mov     eax,-30H[ebp]
 0fe4  8a 00                             mov     al,[eax]
 0fe6  25 ff 00 00 00                    and     eax,000000ffH
 0feb  8d 04 40                          lea     eax,[eax+eax*2]
 0fee  03 45 f0                          add     eax,-10H[ebp]
 0ff1  8a 40 0d                          mov     al,+0dH[eax]
 0ff4  25 ff 00 00 00                    and     eax,000000ffH
 0ff9  8b 55 14                          mov     edx,+14H[ebp]
 0ffc  01 c2                             add     edx,eax
 0ffe  89 55 e8                          mov     -18H[ebp],edx

				(tempg < 0) ? tempg = 0 : tempg;
 1001  83 7d e8 00                       cmp     dword ptr -18H[ebp],00000000H
 1005  7d 0f                             jge     L113
 1007  c7 45 e8 00 00 00 
       00                                mov     dword ptr -18H[ebp],00000000H
 100e  8d 45 e8                          lea     eax,-18H[ebp]
 1011  89 45 98                          mov     -68H[ebp],eax
 1014  eb 06                             jmp     L114
 1016  8d 45 e8          L113            lea     eax,-18H[ebp]
 1019  89 45 98                          mov     -68H[ebp],eax

				(tempg > 63) ? tempg = 63 : tempg;
 101c  83 7d e8 3f       L114            cmp     dword ptr -18H[ebp],0000003fH
 1020  7e 0f                             jle     L115
 1022  c7 45 e8 3f 00 00 
       00                                mov     dword ptr -18H[ebp],0000003fH
 1029  8d 45 e8                          lea     eax,-18H[ebp]
 102c  89 45 9c                          mov     -64H[ebp],eax
 102f  eb 06                             jmp     L116
 1031  8d 45 e8          L115            lea     eax,-18H[ebp]
 1034  89 45 9c                          mov     -64H[ebp],eax

				tempb = (int)ThePal[*BMap][2] + bfade;
 1037  8b 45 d0          L116            mov     eax,-30H[ebp]
 103a  8a 00                             mov     al,[eax]
 103c  25 ff 00 00 00                    and     eax,000000ffH
 1041  8d 04 40                          lea     eax,[eax+eax*2]
 1044  03 45 f0                          add     eax,-10H[ebp]
 1047  8a 40 0e                          mov     al,+0eH[eax]
 104a  25 ff 00 00 00                    and     eax,000000ffH
 104f  8b 55 18                          mov     edx,+18H[ebp]
 1052  01 c2                             add     edx,eax
 1054  89 55 ec                          mov     -14H[ebp],edx

				(tempb < 0) ? tempb = 0 : tempb;
 1057  83 7d ec 00                       cmp     dword ptr -14H[ebp],00000000H
 105b  7d 0f                             jge     L117
 105d  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 1064  8d 45 ec                          lea     eax,-14H[ebp]
 1067  89 45 a0                          mov     -60H[ebp],eax
 106a  eb 06                             jmp     L118
 106c  8d 45 ec          L117            lea     eax,-14H[ebp]
 106f  89 45 a0                          mov     -60H[ebp],eax

				(tempb > 63) ? tempb = 63 : tempb;

 1072  83 7d ec 3f       L118            cmp     dword ptr -14H[ebp],0000003fH
 1076  7e 0f                             jle     L119
 1078  c7 45 ec 3f 00 00 
       00                                mov     dword ptr -14H[ebp],0000003fH
 107f  8d 45 ec                          lea     eax,-14H[ebp]
 1082  89 45 a4                          mov     -5cH[ebp],eax
 1085  eb 06                             jmp     L120
 1087  8d 45 ec          L119            lea     eax,-14H[ebp]
 108a  89 45 a4                          mov     -5cH[ebp],eax

            *Screen = ScreenPal->VirPal[tempr][tempg][tempb];
				//*Screen = *BMap;
			}
 108d  8b 15 00 00 00 00 L120            mov     edx,Palette near * near ScreenPal
 1093  8b 45 e4                          mov     eax,-1cH[ebp]
 1096  c1 e0 0c                          shl     eax,0cH
 1099  01 c2                             add     edx,eax
 109b  8b 45 e8                          mov     eax,-18H[ebp]
 109e  c1 e0 06                          shl     eax,06H
 10a1  01 d0                             add     eax,edx
 10a3  03 45 ec                          add     eax,-14H[ebp]
 10a6  8a 90 00 03 00 00                 mov     dl,+300H[eax]
 10ac  8b 45 cc                          mov     eax,-34H[ebp]
 10af  88 10                             mov     [eax],dl

        	Screen++;
 10b1  8b 45 cc          L121            mov     eax,-34H[ebp]
 10b4  ff 45 cc                          inc     dword ptr -34H[ebp]

        	BMap++;
 10b7  8b 45 d0                          mov     eax,-30H[ebp]
 10ba  ff 45 d0                          inc     dword ptr -30H[ebp]

      }
 10bd  e9 a5 fe ff ff                    jmp     L107

      Screen += ScreenIncrement;
 10c2  8b 45 dc          L122            mov     eax,-24H[ebp]
 10c5  01 45 cc                          add     -34H[ebp],eax

      BMap += BitmapIncrement;
 10c8  8b 45 e0                          mov     eax,-20H[ebp]
 10cb  01 45 d0                          add     -30H[ebp],eax

   }
 10ce  e9 79 fe ff ff                    jmp     L105

}

//Puts wo/ transparen pixels, but also fades
 10d3  89 ec             L123            mov     esp,ebp
 10d5  5d                                pop     ebp
 10d6  5f                                pop     edi
 10d7  5e                                pop     esi
 10d8  c2 0c 00                          ret     000cH
 10db  90                                nop     

void Bitmap::PutRegularFaded (UINT32 x, UINT32 y, char * offs,
   INT32 rfade, INT32 gfade, INT32 bfade) {


	int Top;	/* coordinate values of bitmap top-left corner */
   int Left;
	unsigned BMOffsetX;	/* starting offset into clipped bitmap */
   unsigned BMOffsetY;
   unsigned ClippedLeft;/* top-left corner position of clipped bitmap */
   unsigned ClippedTop;
   int BltWidth;	/* width of clipped bitmap */
   int BltHeight; /* height of clipped bitmap */
   UINT32 TempOffset;	/* temp variable to calc far pointer offsets */
	char * Screen;  /* pointer to current screen position */
	UCHAR * BMap; /* pointer to current bitmap position */
   unsigned WidthCounter;
   unsigned HeightCounter;
   unsigned ScreenIncrement;
   unsigned BitmapIncrement;

 10dc                    void near Bitmap::PutRegularFaded( long unsigned, long unsigned, char near *, long, long, long ):
 10dc  56                                push    esi
 10dd  57                                push    edi
 10de  55                                push    ebp
 10df  89 e5                             mov     ebp,esp
 10e1  81 ec 70 00 00 00                 sub     esp,00000070H
 10e7  89 45 f0                          mov     -10H[ebp],eax
 10ea  89 55 f4                          mov     -0cH[ebp],edx
 10ed  89 5d f8                          mov     -8H[ebp],ebx
 10f0  89 4d fc                          mov     -4H[ebp],ecx

	Left = x;
 10f3  8b 45 f4                          mov     eax,-0cH[ebp]
 10f6  89 45 ac                          mov     -54H[ebp],eax

   Top  = y;

   if (Left >= (int) ScreenClip->x2 || Top >= (int) ScreenClip->y2 ||
 10f9  8b 45 f8                          mov     eax,-8H[ebp]
 10fc  89 45 a8                          mov     -58H[ebp],eax

   (Left + (int) width) < ScreenClip->x1 ||
	(Top + (int)height) < ScreenClip->y1)
 10ff  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 1105  8b 45 ac                          mov     eax,-54H[ebp]
 1108  3b 42 08                          cmp     eax,+8H[edx]
 110b  7d 0e                             jge     L124
 110d  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 1113  8b 45 a8                          mov     eax,-58H[ebp]
 1116  3b 42 0c                          cmp     eax,+0cH[edx]
 1119  7c 02                             jl      L125
 111b  eb 11             L124            jmp     L126
 111d  8b 45 f0          L125            mov     eax,-10H[ebp]
 1120  8b 55 ac                          mov     edx,-54H[ebp]
 1123  03 10                             add     edx,[eax]
 1125  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 112a  3b 10                             cmp     edx,[eax]
 112c  73 02                             jae     L127
 112e  eb 13             L126            jmp     L128
 1130  8b 45 f0          L127            mov     eax,-10H[ebp]
 1133  8b 55 a8                          mov     edx,-58H[ebp]
 1136  03 50 04                          add     edx,+4H[eax]
 1139  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 113e  3b 50 04                          cmp     edx,+4H[eax]
 1141  73 05                             jae     L129

      return;

   /* clip bitmap to upper left edge of rect */

/* if Left < ScreenClip->x1, calculate starting x offset in bitmap */
 1143  e9 a9 02 00 00    L128            jmp     L153

   if (Left < ScreenClip->x1) {
 1148  8b 15 00 00 00 00 L129            mov     edx,ClippingRectangle near * near ScreenClip
 114e  8b 45 ac                          mov     eax,-54H[ebp]
 1151  3b 02                             cmp     eax,[edx]
 1153  73 24                             jae     L130

   BMOffsetX = ScreenClip->x1 - Left;
 1155  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 115a  8b 00                             mov     eax,[eax]
 115c  2b 45 ac                          sub     eax,-54H[ebp]
 115f  89 45 b0                          mov     -50H[ebp],eax

      ClippedLeft = ScreenClip->x1;
 1162  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1167  8b 00                             mov     eax,[eax]
 1169  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width - BMOffsetX;
 116c  8b 45 f0                          mov     eax,-10H[ebp]
 116f  8b 00                             mov     eax,[eax]
 1171  2b 45 b0                          sub     eax,-50H[ebp]
 1174  89 45 c0                          mov     -40H[ebp],eax

   }
   else {
 1177  eb 15                             jmp     L131

   BMOffsetX = 0;
 1179  c7 45 b0 00 00 00 
       00                L130            mov     dword ptr -50H[ebp],00000000H

      ClippedLeft = Left;
 1180  8b 45 ac                          mov     eax,-54H[ebp]
 1183  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width;
	}

   /* if Top < ScreenClip->y1, calculate starting y offset in bitmap */
 1186  8b 45 f0                          mov     eax,-10H[ebp]
 1189  8b 00                             mov     eax,[eax]
 118b  89 45 c0                          mov     -40H[ebp],eax

   if (Top < ScreenClip->y1) {
 118e  8b 15 00 00 00 00 L131            mov     edx,ClippingRectangle near * near ScreenClip
 1194  8b 45 a8                          mov     eax,-58H[ebp]
 1197  3b 42 04                          cmp     eax,+4H[edx]
 119a  73 27                             jae     L132

   BMOffsetY = ScreenClip->y1 - Top;
 119c  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 11a1  8b 40 04                          mov     eax,+4H[eax]
 11a4  2b 45 a8                          sub     eax,-58H[ebp]
 11a7  89 45 b4                          mov     -4cH[ebp],eax

      ClippedTop = ScreenClip->y1;
 11aa  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 11af  8b 40 04                          mov     eax,+4H[eax]
 11b2  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height - BMOffsetY;
 11b5  8b 45 f0                          mov     eax,-10H[ebp]
 11b8  8b 40 04                          mov     eax,+4H[eax]
 11bb  2b 45 b4                          sub     eax,-4cH[ebp]
 11be  89 45 c4                          mov     -3cH[ebp],eax

   }
   else {
 11c1  eb 16                             jmp     L133

   BMOffsetY = 0;
 11c3  c7 45 b4 00 00 00 
       00                L132            mov     dword ptr -4cH[ebp],00000000H

      ClippedTop = Top;
 11ca  8b 45 a8                          mov     eax,-58H[ebp]
 11cd  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height;
   }

   /* clip bitmap to lower right edge of rect */

   /* if Left + bitmap width > rect width, calc ending x point */
 11d0  8b 45 f0                          mov     eax,-10H[ebp]
 11d3  8b 40 04                          mov     eax,+4H[eax]
 11d6  89 45 c4                          mov     -3cH[ebp],eax

   if ((ClippedLeft + BltWidth) > ScreenClip->x2) {
 11d9  8b 55 b8          L133            mov     edx,-48H[ebp]
 11dc  03 55 c0                          add     edx,-40H[ebp]
 11df  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 11e4  3b 50 08                          cmp     edx,+8H[eax]
 11e7  76 11                             jbe     L134

   BltWidth -= ClippedLeft + BltWidth - ScreenClip->x2;
   }

   /* if Top + bitmap height > rect height, calc ending y point */
 11e9  8b 55 b8                          mov     edx,-48H[ebp]
 11ec  03 55 c0                          add     edx,-40H[ebp]
 11ef  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 11f4  2b 50 08                          sub     edx,+8H[eax]
 11f7  29 55 c0                          sub     -40H[ebp],edx

   if ((ClippedTop + BltHeight) > ScreenClip->y2) {
 11fa  8b 55 bc          L134            mov     edx,-44H[ebp]
 11fd  03 55 c4                          add     edx,-3cH[ebp]
 1200  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1205  3b 50 0c                          cmp     edx,+0cH[eax]
 1208  76 11                             jbe     L135

   BltHeight -= ClippedTop + BltHeight - ScreenClip->y2;
   }

   /* calculate screen pointer starting position based on */
   /* clipped bitmap location */
 120a  8b 55 bc                          mov     edx,-44H[ebp]
 120d  03 55 c4                          add     edx,-3cH[ebp]
 1210  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1215  2b 50 0c                          sub     edx,+0cH[eax]
 1218  29 55 c4                          sub     -3cH[ebp],edx

   TempOffset = ClippedTop * ScreenWidth + ClippedLeft;


 121b  31 c0             L135            xor     eax,eax
 121d  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 1223  0f af 45 bc                       imul    eax,-44H[ebp]
 1227  8b 55 b8                          mov     edx,-48H[ebp]
 122a  01 c2                             add     edx,eax
 122c  89 55 c8                          mov     -38H[ebp],edx

	Screen = offs + TempOffset;

   /* calculate bitmap pointer starting position based on */
   /* clipped bitmap location */
 122f  8b 45 fc                          mov     eax,-4H[ebp]
 1232  03 45 c8                          add     eax,-38H[ebp]
 1235  89 45 cc                          mov     -34H[ebp],eax

   TempOffset = BMOffsetY * width + BMOffsetX;
 1238  8b 45 f0                          mov     eax,-10H[ebp]
 123b  8b 55 b4                          mov     edx,-4cH[ebp]
 123e  0f af 10                          imul    edx,[eax]
 1241  89 d0                             mov     eax,edx
 1243  8b 55 b0                          mov     edx,-50H[ebp]
 1246  01 c2                             add     edx,eax
 1248  89 55 c8                          mov     -38H[ebp],edx

   BMap = BmpSource;
 124b  8b 45 f0                          mov     eax,-10H[ebp]
 124e  8b 40 08                          mov     eax,+8H[eax]
 1251  89 45 d0                          mov     -30H[ebp],eax

   BMap += TempOffset;

   int tempr, tempg, tempb;//temporary color vars


   /* blt to screen */
 1254  8b 45 c8                          mov     eax,-38H[ebp]
 1257  01 45 d0                          add     -30H[ebp],eax

   ScreenIncrement = ScreenWidth - BltWidth; //screen class
 125a  31 c0                             xor     eax,eax
 125c  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 1262  2b 45 c0                          sub     eax,-40H[ebp]
 1265  89 45 dc                          mov     -24H[ebp],eax

   BitmapIncrement = width - BltWidth;
 1268  8b 45 f0                          mov     eax,-10H[ebp]
 126b  8b 00                             mov     eax,[eax]
 126d  2b 45 c0                          sub     eax,-40H[ebp]
 1270  89 45 e0                          mov     -20H[ebp],eax

   for (HeightCounter = 0; HeightCounter < BltHeight; HeightCounter++) {
 1273  c7 45 d8 00 00 00 
       00                                mov     dword ptr -28H[ebp],00000000H
 127a  eb 06                             jmp     L137
 127c  8b 45 d8          L136            mov     eax,-28H[ebp]
 127f  ff 45 d8                          inc     dword ptr -28H[ebp]
 1282  8b 45 d8          L137            mov     eax,-28H[ebp]
 1285  3b 45 c4                          cmp     eax,-3cH[ebp]
 1288  0f 83 63 01 00 00                 jae     L153

   	for (WidthCounter = 0; WidthCounter < BltWidth; WidthCounter++) {
			//this blits with the 18bit color!!!!
 128e  c7 45 d4 00 00 00 
       00                                mov     dword ptr -2cH[ebp],00000000H
 1295  eb 06                             jmp     L139
 1297  8b 45 d4          L138            mov     eax,-2cH[ebp]
 129a  ff 45 d4                          inc     dword ptr -2cH[ebp]
 129d  8b 45 d4          L139            mov     eax,-2cH[ebp]
 12a0  3b 45 c0                          cmp     eax,-40H[ebp]
 12a3  0f 83 37 01 00 00                 jae     L152

		      tempr = (int)ThePal[*BMap][0] + rfade;
 12a9  8b 45 d0                          mov     eax,-30H[ebp]
 12ac  8a 00                             mov     al,[eax]
 12ae  25 ff 00 00 00                    and     eax,000000ffH
 12b3  8d 04 40                          lea     eax,[eax+eax*2]
 12b6  03 45 f0                          add     eax,-10H[ebp]
 12b9  8a 40 0c                          mov     al,+0cH[eax]
 12bc  25 ff 00 00 00                    and     eax,000000ffH
 12c1  8b 55 10                          mov     edx,+10H[ebp]
 12c4  01 c2                             add     edx,eax
 12c6  89 55 e4                          mov     -1cH[ebp],edx

				(tempr < 0) ? tempr = 0 : tempr;
 12c9  83 7d e4 00                       cmp     dword ptr -1cH[ebp],00000000H
 12cd  7d 0f                             jge     L140
 12cf  c7 45 e4 00 00 00 
       00                                mov     dword ptr -1cH[ebp],00000000H
 12d6  8d 45 e4                          lea     eax,-1cH[ebp]
 12d9  89 45 90                          mov     -70H[ebp],eax
 12dc  eb 06                             jmp     L141
 12de  8d 45 e4          L140            lea     eax,-1cH[ebp]
 12e1  89 45 90                          mov     -70H[ebp],eax

				(tempr > 63) ? tempr = 63 : tempr;
 12e4  83 7d e4 3f       L141            cmp     dword ptr -1cH[ebp],0000003fH
 12e8  7e 0f                             jle     L142
 12ea  c7 45 e4 3f 00 00 
       00                                mov     dword ptr -1cH[ebp],0000003fH
 12f1  8d 45 e4                          lea     eax,-1cH[ebp]
 12f4  89 45 94                          mov     -6cH[ebp],eax
 12f7  eb 06                             jmp     L143
 12f9  8d 45 e4          L142            lea     eax,-1cH[ebp]
 12fc  89 45 94                          mov     -6cH[ebp],eax

				tempg = (int)ThePal[*BMap][1] + gfade;
 12ff  8b 45 d0          L143            mov     eax,-30H[ebp]
 1302  8a 00                             mov     al,[eax]
 1304  25 ff 00 00 00                    and     eax,000000ffH
 1309  8d 04 40                          lea     eax,[eax+eax*2]
 130c  03 45 f0                          add     eax,-10H[ebp]
 130f  8a 40 0d                          mov     al,+0dH[eax]
 1312  25 ff 00 00 00                    and     eax,000000ffH
 1317  8b 55 14                          mov     edx,+14H[ebp]
 131a  01 c2                             add     edx,eax
 131c  89 55 e8                          mov     -18H[ebp],edx

				(tempg < 0) ? tempg = 0 : tempg;
 131f  83 7d e8 00                       cmp     dword ptr -18H[ebp],00000000H
 1323  7d 0f                             jge     L144
 1325  c7 45 e8 00 00 00 
       00                                mov     dword ptr -18H[ebp],00000000H
 132c  8d 45 e8                          lea     eax,-18H[ebp]
 132f  89 45 98                          mov     -68H[ebp],eax
 1332  eb 06                             jmp     L145
 1334  8d 45 e8          L144            lea     eax,-18H[ebp]
 1337  89 45 98                          mov     -68H[ebp],eax

				(tempg > 63) ? tempg = 63 : tempg;
 133a  83 7d e8 3f       L145            cmp     dword ptr -18H[ebp],0000003fH
 133e  7e 0f                             jle     L146
 1340  c7 45 e8 3f 00 00 
       00                                mov     dword ptr -18H[ebp],0000003fH
 1347  8d 45 e8                          lea     eax,-18H[ebp]
 134a  89 45 9c                          mov     -64H[ebp],eax
 134d  eb 06                             jmp     L147
 134f  8d 45 e8          L146            lea     eax,-18H[ebp]
 1352  89 45 9c                          mov     -64H[ebp],eax

				tempb = (int)ThePal[*BMap][2] + bfade;
 1355  8b 45 d0          L147            mov     eax,-30H[ebp]
 1358  8a 00                             mov     al,[eax]
 135a  25 ff 00 00 00                    and     eax,000000ffH
 135f  8d 04 40                          lea     eax,[eax+eax*2]
 1362  03 45 f0                          add     eax,-10H[ebp]
 1365  8a 40 0e                          mov     al,+0eH[eax]
 1368  25 ff 00 00 00                    and     eax,000000ffH
 136d  8b 55 18                          mov     edx,+18H[ebp]
 1370  01 c2                             add     edx,eax
 1372  89 55 ec                          mov     -14H[ebp],edx

				(tempb < 0) ? tempb = 0 : tempb;
 1375  83 7d ec 00                       cmp     dword ptr -14H[ebp],00000000H
 1379  7d 0f                             jge     L148
 137b  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 1382  8d 45 ec                          lea     eax,-14H[ebp]
 1385  89 45 a0                          mov     -60H[ebp],eax
 1388  eb 06                             jmp     L149
 138a  8d 45 ec          L148            lea     eax,-14H[ebp]
 138d  89 45 a0                          mov     -60H[ebp],eax

				(tempb > 63) ? tempb = 63 : tempb;

 1390  83 7d ec 3f       L149            cmp     dword ptr -14H[ebp],0000003fH
 1394  7e 0f                             jle     L150
 1396  c7 45 ec 3f 00 00 
       00                                mov     dword ptr -14H[ebp],0000003fH
 139d  8d 45 ec                          lea     eax,-14H[ebp]
 13a0  89 45 a4                          mov     -5cH[ebp],eax
 13a3  eb 06                             jmp     L151
 13a5  8d 45 ec          L150            lea     eax,-14H[ebp]
 13a8  89 45 a4                          mov     -5cH[ebp],eax

         *Screen = ScreenPal->VirPal[tempr][tempg][tempb];

 13ab  8b 15 00 00 00 00 L151            mov     edx,Palette near * near ScreenPal
 13b1  8b 45 e4                          mov     eax,-1cH[ebp]
 13b4  c1 e0 0c                          shl     eax,0cH
 13b7  01 c2                             add     edx,eax
 13b9  8b 45 e8                          mov     eax,-18H[ebp]
 13bc  c1 e0 06                          shl     eax,06H
 13bf  01 d0                             add     eax,edx
 13c1  03 45 ec                          add     eax,-14H[ebp]
 13c4  8a 90 00 03 00 00                 mov     dl,+300H[eax]
 13ca  8b 45 cc                          mov     eax,-34H[ebp]
 13cd  88 10                             mov     [eax],dl

        	Screen++;
 13cf  8b 45 cc                          mov     eax,-34H[ebp]
 13d2  ff 45 cc                          inc     dword ptr -34H[ebp]

        	BMap++;
 13d5  8b 45 d0                          mov     eax,-30H[ebp]
 13d8  ff 45 d0                          inc     dword ptr -30H[ebp]

      }
 13db  e9 b7 fe ff ff                    jmp     L138

      Screen += ScreenIncrement;
 13e0  8b 45 dc          L152            mov     eax,-24H[ebp]
 13e3  01 45 cc                          add     -34H[ebp],eax

      BMap += BitmapIncrement;
 13e6  8b 45 e0                          mov     eax,-20H[ebp]
 13e9  01 45 d0                          add     -30H[ebp],eax

   }
 13ec  e9 8b fe ff ff                    jmp     L136

}

 13f1  89 ec             L153            mov     esp,ebp
 13f3  5d                                pop     ebp
 13f4  5f                                pop     edi
 13f5  5e                                pop     esi
 13f6  c2 0c 00                          ret     000cH
 13f9  8d 40 00                          lea     eax,+0H[eax]

void Bitmap::PutTransparentSemi (UINT32 x, UINT32 y, char * offs,
   float rtrans, float gtrans, float btrans) {

	int Top;	/* coordinate values of bitmap top-left corner */
   int Left;
	unsigned BMOffsetX;	/* starting offset into clipped bitmap */
   unsigned BMOffsetY;
   unsigned ClippedLeft;/* top-left corner position of clipped bitmap */
   unsigned ClippedTop;
   int BltWidth;	/* width of clipped bitmap */
   int BltHeight; /* height of clipped bitmap */
   UINT32 TempOffset;	/* temp variable to calc far pointer offsets */
	char * Screen;  /* pointer to current screen position */
	UCHAR * BMap; /* pointer to current bitmap position */
   unsigned WidthCounter;
   unsigned HeightCounter;
   unsigned ScreenIncrement;
   unsigned BitmapIncrement;


	//assert (rtrans => 0);
	//assert (gtrans => 0);
	//assert (btrans => 0);
	//assert (rtrans <= 1);
	//assert (gtrans <= 1);
	//assert (btrans <= 1);

 13fc                    void near Bitmap::PutTransparentSemi( long unsigned, long unsigned, char near *, float, float, float ):
 13fc  56                                push    esi
 13fd  57                                push    edi
 13fe  55                                push    ebp
 13ff  89 e5                             mov     ebp,esp
 1401  81 ec 5c 00 00 00                 sub     esp,0000005cH
 1407  89 45 f0                          mov     -10H[ebp],eax
 140a  89 55 f4                          mov     -0cH[ebp],edx
 140d  89 5d f8                          mov     -8H[ebp],ebx
 1410  89 4d fc                          mov     -4H[ebp],ecx

	Left = x;
 1413  8b 45 f4                          mov     eax,-0cH[ebp]
 1416  89 45 ac                          mov     -54H[ebp],eax

   Top  = y;

   if (Left >= (int) ScreenClip->x2 || Top >= (int) ScreenClip->y2 ||
 1419  8b 45 f8                          mov     eax,-8H[ebp]
 141c  89 45 a8                          mov     -58H[ebp],eax

   (Left + (int) width) < ScreenClip->x1 ||
	(Top + (int)height) < ScreenClip->y1)
 141f  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 1425  8b 45 ac                          mov     eax,-54H[ebp]
 1428  3b 42 08                          cmp     eax,+8H[edx]
 142b  7d 0e                             jge     L154
 142d  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 1433  8b 45 a8                          mov     eax,-58H[ebp]
 1436  3b 42 0c                          cmp     eax,+0cH[edx]
 1439  7c 02                             jl      L155
 143b  eb 11             L154            jmp     L156
 143d  8b 45 f0          L155            mov     eax,-10H[ebp]
 1440  8b 55 ac                          mov     edx,-54H[ebp]
 1443  03 10                             add     edx,[eax]
 1445  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 144a  3b 10                             cmp     edx,[eax]
 144c  73 02                             jae     L157
 144e  eb 13             L156            jmp     L158
 1450  8b 45 f0          L157            mov     eax,-10H[ebp]
 1453  8b 55 a8                          mov     edx,-58H[ebp]
 1456  03 50 04                          add     edx,+4H[eax]
 1459  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 145e  3b 50 04                          cmp     edx,+4H[eax]
 1461  73 05                             jae     L159

      return;

   /* clip bitmap to upper left edge of rect */

/* if Left < ScreenClip->x1, calculate starting x offset in bitmap */
 1463  e9 b5 02 00 00    L158            jmp     L172

   if (Left < ScreenClip->x1) {
 1468  8b 15 00 00 00 00 L159            mov     edx,ClippingRectangle near * near ScreenClip
 146e  8b 45 ac                          mov     eax,-54H[ebp]
 1471  3b 02                             cmp     eax,[edx]
 1473  73 24                             jae     L160

   BMOffsetX = ScreenClip->x1 - Left;
 1475  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 147a  8b 00                             mov     eax,[eax]
 147c  2b 45 ac                          sub     eax,-54H[ebp]
 147f  89 45 b0                          mov     -50H[ebp],eax

      ClippedLeft = ScreenClip->x1;
 1482  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1487  8b 00                             mov     eax,[eax]
 1489  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width - BMOffsetX;
 148c  8b 45 f0                          mov     eax,-10H[ebp]
 148f  8b 00                             mov     eax,[eax]
 1491  2b 45 b0                          sub     eax,-50H[ebp]
 1494  89 45 c0                          mov     -40H[ebp],eax

   }
   else {
 1497  eb 15                             jmp     L161

   BMOffsetX = 0;
 1499  c7 45 b0 00 00 00 
       00                L160            mov     dword ptr -50H[ebp],00000000H

      ClippedLeft = Left;
 14a0  8b 45 ac                          mov     eax,-54H[ebp]
 14a3  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width;
	}

   /* if Top < ScreenClip->y1, calculate starting y offset in bitmap */
 14a6  8b 45 f0                          mov     eax,-10H[ebp]
 14a9  8b 00                             mov     eax,[eax]
 14ab  89 45 c0                          mov     -40H[ebp],eax

   if (Top < ScreenClip->y1) {
 14ae  8b 15 00 00 00 00 L161            mov     edx,ClippingRectangle near * near ScreenClip
 14b4  8b 45 a8                          mov     eax,-58H[ebp]
 14b7  3b 42 04                          cmp     eax,+4H[edx]
 14ba  73 27                             jae     L162

   BMOffsetY = ScreenClip->y1 - Top;
 14bc  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 14c1  8b 40 04                          mov     eax,+4H[eax]
 14c4  2b 45 a8                          sub     eax,-58H[ebp]
 14c7  89 45 b4                          mov     -4cH[ebp],eax

      ClippedTop = ScreenClip->y1;
 14ca  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 14cf  8b 40 04                          mov     eax,+4H[eax]
 14d2  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height - BMOffsetY;
 14d5  8b 45 f0                          mov     eax,-10H[ebp]
 14d8  8b 40 04                          mov     eax,+4H[eax]
 14db  2b 45 b4                          sub     eax,-4cH[ebp]
 14de  89 45 c4                          mov     -3cH[ebp],eax

   }
   else {
 14e1  eb 16                             jmp     L163

   BMOffsetY = 0;
 14e3  c7 45 b4 00 00 00 
       00                L162            mov     dword ptr -4cH[ebp],00000000H

      ClippedTop = Top;
 14ea  8b 45 a8                          mov     eax,-58H[ebp]
 14ed  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height;
   }

   /* clip bitmap to lower right edge of rect */

   /* if Left + bitmap width > rect width, calc ending x point */
 14f0  8b 45 f0                          mov     eax,-10H[ebp]
 14f3  8b 40 04                          mov     eax,+4H[eax]
 14f6  89 45 c4                          mov     -3cH[ebp],eax

   if ((ClippedLeft + BltWidth) > ScreenClip->x2) {
 14f9  8b 55 b8          L163            mov     edx,-48H[ebp]
 14fc  03 55 c0                          add     edx,-40H[ebp]
 14ff  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1504  3b 50 08                          cmp     edx,+8H[eax]
 1507  76 11                             jbe     L164

   BltWidth -= ClippedLeft + BltWidth - ScreenClip->x2;
   }

   /* if Top + bitmap height > rect height, calc ending y point */
 1509  8b 55 b8                          mov     edx,-48H[ebp]
 150c  03 55 c0                          add     edx,-40H[ebp]
 150f  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1514  2b 50 08                          sub     edx,+8H[eax]
 1517  29 55 c0                          sub     -40H[ebp],edx

   if ((ClippedTop + BltHeight) > ScreenClip->y2) {
 151a  8b 55 bc          L164            mov     edx,-44H[ebp]
 151d  03 55 c4                          add     edx,-3cH[ebp]
 1520  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1525  3b 50 0c                          cmp     edx,+0cH[eax]
 1528  76 11                             jbe     L165

   BltHeight -= ClippedTop + BltHeight - ScreenClip->y2;
   }

   /* calculate screen pointer starting position based on */
   /* clipped bitmap location */
 152a  8b 55 bc                          mov     edx,-44H[ebp]
 152d  03 55 c4                          add     edx,-3cH[ebp]
 1530  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1535  2b 50 0c                          sub     edx,+0cH[eax]
 1538  29 55 c4                          sub     -3cH[ebp],edx

   TempOffset = ClippedTop * ScreenWidth + ClippedLeft;


 153b  31 c0             L165            xor     eax,eax
 153d  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 1543  0f af 45 bc                       imul    eax,-44H[ebp]
 1547  8b 55 b8                          mov     edx,-48H[ebp]
 154a  01 c2                             add     edx,eax
 154c  89 55 c8                          mov     -38H[ebp],edx

	Screen = offs + TempOffset;

   /* calculate bitmap pointer starting position based on */
   /* clipped bitmap location */
 154f  8b 45 fc                          mov     eax,-4H[ebp]
 1552  03 45 c8                          add     eax,-38H[ebp]
 1555  89 45 cc                          mov     -34H[ebp],eax

   TempOffset = BMOffsetY * width + BMOffsetX;
 1558  8b 45 f0                          mov     eax,-10H[ebp]
 155b  8b 55 b4                          mov     edx,-4cH[ebp]
 155e  0f af 10                          imul    edx,[eax]
 1561  89 d0                             mov     eax,edx
 1563  8b 55 b0                          mov     edx,-50H[ebp]
 1566  01 c2                             add     edx,eax
 1568  89 55 c8                          mov     -38H[ebp],edx

   BMap = BmpSource;
 156b  8b 45 f0                          mov     eax,-10H[ebp]
 156e  8b 40 08                          mov     eax,+8H[eax]
 1571  89 45 d0                          mov     -30H[ebp],eax

   BMap += TempOffset;

   int tempr, tempg, tempb;//temporary color vars


   /* blt to screen */
 1574  8b 45 c8                          mov     eax,-38H[ebp]
 1577  01 45 d0                          add     -30H[ebp],eax

   ScreenIncrement = ScreenWidth - BltWidth; //screen class
 157a  31 c0                             xor     eax,eax
 157c  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 1582  2b 45 c0                          sub     eax,-40H[ebp]
 1585  89 45 dc                          mov     -24H[ebp],eax

   BitmapIncrement = width - BltWidth;
 1588  8b 45 f0                          mov     eax,-10H[ebp]
 158b  8b 00                             mov     eax,[eax]
 158d  2b 45 c0                          sub     eax,-40H[ebp]
 1590  89 45 e0                          mov     -20H[ebp],eax

   for (HeightCounter = 0; HeightCounter < BltHeight; HeightCounter++) {
 1593  c7 45 d8 00 00 00 
       00                                mov     dword ptr -28H[ebp],00000000H
 159a  eb 06                             jmp     L167
 159c  8b 45 d8          L166            mov     eax,-28H[ebp]
 159f  ff 45 d8                          inc     dword ptr -28H[ebp]
 15a2  8b 45 d8          L167            mov     eax,-28H[ebp]
 15a5  3b 45 c4                          cmp     eax,-3cH[ebp]
 15a8  0f 83 6f 01 00 00                 jae     L172

   	for (WidthCounter = 0; WidthCounter < BltWidth; WidthCounter++) {
 15ae  c7 45 d4 00 00 00 
       00                                mov     dword ptr -2cH[ebp],00000000H
 15b5  eb 06                             jmp     L169
 15b7  8b 45 d4          L168            mov     eax,-2cH[ebp]
 15ba  ff 45 d4                          inc     dword ptr -2cH[ebp]
 15bd  8b 45 d4          L169            mov     eax,-2cH[ebp]
 15c0  3b 45 c0                          cmp     eax,-40H[ebp]
 15c3  0f 83 43 01 00 00                 jae     L171

      	if (*BMap != 0) {
				//this blits with the 18bit color!!!!
 15c9  8b 45 d0                          mov     eax,-30H[ebp]
 15cc  8a 00                             mov     al,[eax]
 15ce  25 ff 00 00 00                    and     eax,000000ffH
 15d3  85 c0                             test    eax,eax
 15d5  0f 84 20 01 00 00                 je      L170

            tempr = ((int)ScreenPal->RegPal[*Screen][0] * rtrans +
					(int)ThePal[*BMap][0] * (1 - rtrans));

 15db  8b 45 d0                          mov     eax,-30H[ebp]
 15de  8a 00                             mov     al,[eax]
 15e0  25 ff 00 00 00                    and     eax,000000ffH
 15e5  8d 04 40                          lea     eax,[eax+eax*2]
 15e8  8b 55 f0                          mov     edx,-10H[ebp]
 15eb  01 c2                             add     edx,eax
 15ed  31 c0                             xor     eax,eax
 15ef  8a 42 0c                          mov     al,+0cH[edx]
 15f2  89 45 a4                          mov     -5cH[ebp],eax
 15f5  db 45 a4                          fild    dword ptr -5cH[ebp]
 15f8  d9 e8                             fld1    
 15fa  d8 65 10                          fsub    dword ptr +10H[ebp]
 15fd  de c9                             fmulp   st(1),st
 15ff  8b 45 cc                          mov     eax,-34H[ebp]
 1602  8a 00                             mov     al,[eax]
 1604  25 ff 00 00 00                    and     eax,000000ffH
 1609  8d 04 40                          lea     eax,[eax+eax*2]
 160c  8b 15 00 00 00 00                 mov     edx,Palette near * near ScreenPal
 1612  01 c2                             add     edx,eax
 1614  31 c0                             xor     eax,eax
 1616  8a 82 00 03 04 00                 mov     al,+40300H[edx]
 161c  89 45 a4                          mov     -5cH[ebp],eax
 161f  db 45 a4                          fild    dword ptr -5cH[ebp]
 1622  d8 4d 10                          fmul    dword ptr +10H[ebp]
 1625  de c1                             faddp   st(1),st
 1627  e8 00 00 00 00                    call    __CHP
 162c  db 5d e4                          fistp   dword ptr -1cH[ebp]

            tempg = ((int)ScreenPal->RegPal[*Screen][1] * gtrans +
					(int)ThePal[*BMap][1] * (1 - gtrans));

 162f  8b 45 d0                          mov     eax,-30H[ebp]
 1632  8a 00                             mov     al,[eax]
 1634  25 ff 00 00 00                    and     eax,000000ffH
 1639  8d 04 40                          lea     eax,[eax+eax*2]
 163c  8b 55 f0                          mov     edx,-10H[ebp]
 163f  01 c2                             add     edx,eax
 1641  31 c0                             xor     eax,eax
 1643  8a 42 0d                          mov     al,+0dH[edx]
 1646  89 45 a4                          mov     -5cH[ebp],eax
 1649  db 45 a4                          fild    dword ptr -5cH[ebp]
 164c  d9 e8                             fld1    
 164e  d8 65 14                          fsub    dword ptr +14H[ebp]
 1651  de c9                             fmulp   st(1),st
 1653  8b 45 cc                          mov     eax,-34H[ebp]
 1656  8a 00                             mov     al,[eax]
 1658  25 ff 00 00 00                    and     eax,000000ffH
 165d  8d 04 40                          lea     eax,[eax+eax*2]
 1660  8b 15 00 00 00 00                 mov     edx,Palette near * near ScreenPal
 1666  01 c2                             add     edx,eax
 1668  31 c0                             xor     eax,eax
 166a  8a 82 01 03 04 00                 mov     al,+40301H[edx]
 1670  89 45 a4                          mov     -5cH[ebp],eax
 1673  db 45 a4                          fild    dword ptr -5cH[ebp]
 1676  d8 4d 14                          fmul    dword ptr +14H[ebp]
 1679  de c1                             faddp   st(1),st
 167b  e8 00 00 00 00                    call    __CHP
 1680  db 5d e8                          fistp   dword ptr -18H[ebp]

            tempb = ((int)ScreenPal->RegPal[*Screen][2] * btrans +
					(int)ThePal[*BMap][2] * (1 - btrans));

 1683  8b 45 d0                          mov     eax,-30H[ebp]
 1686  8a 00                             mov     al,[eax]
 1688  25 ff 00 00 00                    and     eax,000000ffH
 168d  8d 04 40                          lea     eax,[eax+eax*2]
 1690  8b 55 f0                          mov     edx,-10H[ebp]
 1693  01 c2                             add     edx,eax
 1695  31 c0                             xor     eax,eax
 1697  8a 42 0e                          mov     al,+0eH[edx]
 169a  89 45 a4                          mov     -5cH[ebp],eax
 169d  db 45 a4                          fild    dword ptr -5cH[ebp]
 16a0  d9 e8                             fld1    
 16a2  d8 65 18                          fsub    dword ptr +18H[ebp]
 16a5  de c9                             fmulp   st(1),st
 16a7  8b 45 cc                          mov     eax,-34H[ebp]
 16aa  8a 00                             mov     al,[eax]
 16ac  25 ff 00 00 00                    and     eax,000000ffH
 16b1  8d 04 40                          lea     eax,[eax+eax*2]
 16b4  8b 15 00 00 00 00                 mov     edx,Palette near * near ScreenPal
 16ba  01 c2                             add     edx,eax
 16bc  31 c0                             xor     eax,eax
 16be  8a 82 02 03 04 00                 mov     al,+40302H[edx]
 16c4  89 45 a4                          mov     -5cH[ebp],eax
 16c7  db 45 a4                          fild    dword ptr -5cH[ebp]
 16ca  d8 4d 18                          fmul    dword ptr +18H[ebp]
 16cd  de c1                             faddp   st(1),st
 16cf  e8 00 00 00 00                    call    __CHP
 16d4  db 5d ec                          fistp   dword ptr -14H[ebp]

            *Screen = ScreenPal->VirPal[tempr][tempg][tempb];
				//*Screen = *BMap;
			}
 16d7  8b 15 00 00 00 00                 mov     edx,Palette near * near ScreenPal
 16dd  8b 45 e4                          mov     eax,-1cH[ebp]
 16e0  c1 e0 0c                          shl     eax,0cH
 16e3  01 c2                             add     edx,eax
 16e5  8b 45 e8                          mov     eax,-18H[ebp]
 16e8  c1 e0 06                          shl     eax,06H
 16eb  01 d0                             add     eax,edx
 16ed  03 45 ec                          add     eax,-14H[ebp]
 16f0  8a 90 00 03 00 00                 mov     dl,+300H[eax]
 16f6  8b 45 cc                          mov     eax,-34H[ebp]
 16f9  88 10                             mov     [eax],dl

        	Screen++;
 16fb  8b 45 cc          L170            mov     eax,-34H[ebp]
 16fe  ff 45 cc                          inc     dword ptr -34H[ebp]

        	BMap++;
 1701  8b 45 d0                          mov     eax,-30H[ebp]
 1704  ff 45 d0                          inc     dword ptr -30H[ebp]

      }
 1707  e9 ab fe ff ff                    jmp     L168

      Screen += ScreenIncrement;
 170c  8b 45 dc          L171            mov     eax,-24H[ebp]
 170f  01 45 cc                          add     -34H[ebp],eax

      BMap += BitmapIncrement;
 1712  8b 45 e0                          mov     eax,-20H[ebp]
 1715  01 45 d0                          add     -30H[ebp],eax

   }
 1718  e9 7f fe ff ff                    jmp     L166

}

 171d  89 ec             L172            mov     esp,ebp
 171f  5d                                pop     ebp
 1720  5f                                pop     edi
 1721  5e                                pop     esi
 1722  c2 0c 00                          ret     000cH
 1725  8d 40 00                          lea     eax,+0H[eax]

void Bitmap::PutRegularSemi (UINT32 x, UINT32 y, char * offs,
   float rtrans, float gtrans, float btrans) {

	int Top;	/* coordinate values of bitmap top-left corner */
   int Left;
	unsigned BMOffsetX;	/* starting offset into clipped bitmap */
   unsigned BMOffsetY;
   unsigned ClippedLeft;/* top-left corner position of clipped bitmap */
   unsigned ClippedTop;
   int BltWidth;	/* width of clipped bitmap */
   int BltHeight; /* height of clipped bitmap */
   UINT32 TempOffset;	/* temp variable to calc far pointer offsets */
	char * Screen;  /* pointer to current screen position */
	UCHAR * BMap; /* pointer to current bitmap position */
   unsigned WidthCounter;
   unsigned HeightCounter;
   unsigned ScreenIncrement;
   unsigned BitmapIncrement;


	//assert (rtrans => 0);
	//assert (gtrans => 0);
	//assert (btrans => 0);
	//assert (rtrans <= 1);
	//assert (gtrans <= 1);
	//assert (btrans <= 1);

 1728                    void near Bitmap::PutRegularSemi( long unsigned, long unsigned, char near *, float, float, float ):
 1728  56                                push    esi
 1729  57                                push    edi
 172a  55                                push    ebp
 172b  89 e5                             mov     ebp,esp
 172d  81 ec 5c 00 00 00                 sub     esp,0000005cH
 1733  89 45 f0                          mov     -10H[ebp],eax
 1736  89 55 f4                          mov     -0cH[ebp],edx
 1739  89 5d f8                          mov     -8H[ebp],ebx
 173c  89 4d fc                          mov     -4H[ebp],ecx

	Left = x;
 173f  8b 45 f4                          mov     eax,-0cH[ebp]
 1742  89 45 ac                          mov     -54H[ebp],eax

   Top  = y;

   if (Left >= (int) ScreenClip->x2 || Top >= (int) ScreenClip->y2 ||
 1745  8b 45 f8                          mov     eax,-8H[ebp]
 1748  89 45 a8                          mov     -58H[ebp],eax

   (Left + (int) width) < ScreenClip->x1 ||
	(Top + (int)height) < ScreenClip->y1)
 174b  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 1751  8b 45 ac                          mov     eax,-54H[ebp]
 1754  3b 42 08                          cmp     eax,+8H[edx]
 1757  7d 0e                             jge     L173
 1759  8b 15 00 00 00 00                 mov     edx,ClippingRectangle near * near ScreenClip
 175f  8b 45 a8                          mov     eax,-58H[ebp]
 1762  3b 42 0c                          cmp     eax,+0cH[edx]
 1765  7c 02                             jl      L174
 1767  eb 11             L173            jmp     L175
 1769  8b 45 f0          L174            mov     eax,-10H[ebp]
 176c  8b 55 ac                          mov     edx,-54H[ebp]
 176f  03 10                             add     edx,[eax]
 1771  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1776  3b 10                             cmp     edx,[eax]
 1778  73 02                             jae     L176
 177a  eb 13             L175            jmp     L177
 177c  8b 45 f0          L176            mov     eax,-10H[ebp]
 177f  8b 55 a8                          mov     edx,-58H[ebp]
 1782  03 50 04                          add     edx,+4H[eax]
 1785  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 178a  3b 50 04                          cmp     edx,+4H[eax]
 178d  73 05                             jae     L178

      return;

   /* clip bitmap to upper left edge of rect */

/* if Left < ScreenClip->x1, calculate starting x offset in bitmap */
 178f  e9 a3 02 00 00    L177            jmp     L190

   if (Left < ScreenClip->x1) {
 1794  8b 15 00 00 00 00 L178            mov     edx,ClippingRectangle near * near ScreenClip
 179a  8b 45 ac                          mov     eax,-54H[ebp]
 179d  3b 02                             cmp     eax,[edx]
 179f  73 24                             jae     L179

   BMOffsetX = ScreenClip->x1 - Left;
 17a1  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 17a6  8b 00                             mov     eax,[eax]
 17a8  2b 45 ac                          sub     eax,-54H[ebp]
 17ab  89 45 b0                          mov     -50H[ebp],eax

      ClippedLeft = ScreenClip->x1;
 17ae  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 17b3  8b 00                             mov     eax,[eax]
 17b5  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width - BMOffsetX;
 17b8  8b 45 f0                          mov     eax,-10H[ebp]
 17bb  8b 00                             mov     eax,[eax]
 17bd  2b 45 b0                          sub     eax,-50H[ebp]
 17c0  89 45 c0                          mov     -40H[ebp],eax

   }
   else {
 17c3  eb 15                             jmp     L180

   BMOffsetX = 0;
 17c5  c7 45 b0 00 00 00 
       00                L179            mov     dword ptr -50H[ebp],00000000H

      ClippedLeft = Left;
 17cc  8b 45 ac                          mov     eax,-54H[ebp]
 17cf  89 45 b8                          mov     -48H[ebp],eax

      BltWidth = width;
	}

   /* if Top < ScreenClip->y1, calculate starting y offset in bitmap */
 17d2  8b 45 f0                          mov     eax,-10H[ebp]
 17d5  8b 00                             mov     eax,[eax]
 17d7  89 45 c0                          mov     -40H[ebp],eax

   if (Top < ScreenClip->y1) {
 17da  8b 15 00 00 00 00 L180            mov     edx,ClippingRectangle near * near ScreenClip
 17e0  8b 45 a8                          mov     eax,-58H[ebp]
 17e3  3b 42 04                          cmp     eax,+4H[edx]
 17e6  73 27                             jae     L181

   BMOffsetY = ScreenClip->y1 - Top;
 17e8  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 17ed  8b 40 04                          mov     eax,+4H[eax]
 17f0  2b 45 a8                          sub     eax,-58H[ebp]
 17f3  89 45 b4                          mov     -4cH[ebp],eax

      ClippedTop = ScreenClip->y1;
 17f6  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 17fb  8b 40 04                          mov     eax,+4H[eax]
 17fe  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height - BMOffsetY;
 1801  8b 45 f0                          mov     eax,-10H[ebp]
 1804  8b 40 04                          mov     eax,+4H[eax]
 1807  2b 45 b4                          sub     eax,-4cH[ebp]
 180a  89 45 c4                          mov     -3cH[ebp],eax

   }
   else {
 180d  eb 16                             jmp     L182

   BMOffsetY = 0;
 180f  c7 45 b4 00 00 00 
       00                L181            mov     dword ptr -4cH[ebp],00000000H

      ClippedTop = Top;
 1816  8b 45 a8                          mov     eax,-58H[ebp]
 1819  89 45 bc                          mov     -44H[ebp],eax

      BltHeight = height;
   }

   /* clip bitmap to lower right edge of rect */

   /* if Left + bitmap width > rect width, calc ending x point */
 181c  8b 45 f0                          mov     eax,-10H[ebp]
 181f  8b 40 04                          mov     eax,+4H[eax]
 1822  89 45 c4                          mov     -3cH[ebp],eax

   if ((ClippedLeft + BltWidth) > ScreenClip->x2) {
 1825  8b 55 b8          L182            mov     edx,-48H[ebp]
 1828  03 55 c0                          add     edx,-40H[ebp]
 182b  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1830  3b 50 08                          cmp     edx,+8H[eax]
 1833  76 11                             jbe     L183

   BltWidth -= ClippedLeft + BltWidth - ScreenClip->x2;
   }

   /* if Top + bitmap height > rect height, calc ending y point */
 1835  8b 55 b8                          mov     edx,-48H[ebp]
 1838  03 55 c0                          add     edx,-40H[ebp]
 183b  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1840  2b 50 08                          sub     edx,+8H[eax]
 1843  29 55 c0                          sub     -40H[ebp],edx

   if ((ClippedTop + BltHeight) > ScreenClip->y2) {
 1846  8b 55 bc          L183            mov     edx,-44H[ebp]
 1849  03 55 c4                          add     edx,-3cH[ebp]
 184c  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1851  3b 50 0c                          cmp     edx,+0cH[eax]
 1854  76 11                             jbe     L184

   BltHeight -= ClippedTop + BltHeight - ScreenClip->y2;
   }

   /* calculate screen pointer starting position based on */
   /* clipped bitmap location */
 1856  8b 55 bc                          mov     edx,-44H[ebp]
 1859  03 55 c4                          add     edx,-3cH[ebp]
 185c  a1 00 00 00 00                    mov     eax,ClippingRectangle near * near ScreenClip
 1861  2b 50 0c                          sub     edx,+0cH[eax]
 1864  29 55 c4                          sub     -3cH[ebp],edx

   TempOffset = ClippedTop * ScreenWidth + ClippedLeft;


 1867  31 c0             L184            xor     eax,eax
 1869  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 186f  0f af 45 bc                       imul    eax,-44H[ebp]
 1873  8b 55 b8                          mov     edx,-48H[ebp]
 1876  01 c2                             add     edx,eax
 1878  89 55 c8                          mov     -38H[ebp],edx

	Screen = offs + TempOffset;

   /* calculate bitmap pointer starting position based on */
   /* clipped bitmap location */
 187b  8b 45 fc                          mov     eax,-4H[ebp]
 187e  03 45 c8                          add     eax,-38H[ebp]
 1881  89 45 cc                          mov     -34H[ebp],eax

   TempOffset = BMOffsetY * width + BMOffsetX;
 1884  8b 45 f0                          mov     eax,-10H[ebp]
 1887  8b 55 b4                          mov     edx,-4cH[ebp]
 188a  0f af 10                          imul    edx,[eax]
 188d  89 d0                             mov     eax,edx
 188f  8b 55 b0                          mov     edx,-50H[ebp]
 1892  01 c2                             add     edx,eax
 1894  89 55 c8                          mov     -38H[ebp],edx

   BMap = BmpSource;
 1897  8b 45 f0                          mov     eax,-10H[ebp]
 189a  8b 40 08                          mov     eax,+8H[eax]
 189d  89 45 d0                          mov     -30H[ebp],eax

   BMap += TempOffset;

   int tempr, tempg, tempb;//temporary color vars


   /* blt to screen */
 18a0  8b 45 c8                          mov     eax,-38H[ebp]
 18a3  01 45 d0                          add     -30H[ebp],eax

   ScreenIncrement = ScreenWidth - BltWidth; //screen class
 18a6  31 c0                             xor     eax,eax
 18a8  66 a1 00 00 00 00                 mov     ax,short unsigned near ScreenWidth
 18ae  2b 45 c0                          sub     eax,-40H[ebp]
 18b1  89 45 dc                          mov     -24H[ebp],eax

   BitmapIncrement = width - BltWidth;
 18b4  8b 45 f0                          mov     eax,-10H[ebp]
 18b7  8b 00                             mov     eax,[eax]
 18b9  2b 45 c0                          sub     eax,-40H[ebp]
 18bc  89 45 e0                          mov     -20H[ebp],eax

   for (HeightCounter = 0; HeightCounter < BltHeight; HeightCounter++) {
 18bf  c7 45 d8 00 00 00 
       00                                mov     dword ptr -28H[ebp],00000000H
 18c6  eb 06                             jmp     L186
 18c8  8b 45 d8          L185            mov     eax,-28H[ebp]
 18cb  ff 45 d8                          inc     dword ptr -28H[ebp]
 18ce  8b 45 d8          L186            mov     eax,-28H[ebp]
 18d1  3b 45 c4                          cmp     eax,-3cH[ebp]
 18d4  0f 83 5d 01 00 00                 jae     L190

   	for (WidthCounter = 0; WidthCounter < BltWidth; WidthCounter++) {
      	//if (*BMap != 0) {
			//this blits with the 18bit color!!!!
 18da  c7 45 d4 00 00 00 
       00                                mov     dword ptr -2cH[ebp],00000000H
 18e1  eb 06                             jmp     L188
 18e3  8b 45 d4          L187            mov     eax,-2cH[ebp]
 18e6  ff 45 d4                          inc     dword ptr -2cH[ebp]
 18e9  8b 45 d4          L188            mov     eax,-2cH[ebp]
 18ec  3b 45 c0                          cmp     eax,-40H[ebp]
 18ef  0f 83 31 01 00 00                 jae     L189

         tempr = ((int)ScreenPal->RegPal[*Screen][0] * rtrans +
				(int)ThePal[*BMap][0] * (1 - rtrans));

 18f5  8b 45 d0                          mov     eax,-30H[ebp]
 18f8  8a 00                             mov     al,[eax]
 18fa  25 ff 00 00 00                    and     eax,000000ffH
 18ff  8d 04 40                          lea     eax,[eax+eax*2]
 1902  8b 55 f0                          mov     edx,-10H[ebp]
 1905  01 c2                             add     edx,eax
 1907  31 c0                             xor     eax,eax
 1909  8a 42 0c                          mov     al,+0cH[edx]
 190c  89 45 a4                          mov     -5cH[ebp],eax
 190f  db 45 a4                          fild    dword ptr -5cH[ebp]
 1912  d9 e8                             fld1    
 1914  d8 65 10                          fsub    dword ptr +10H[ebp]
 1917  de c9                             fmulp   st(1),st
 1919  8b 45 cc                          mov     eax,-34H[ebp]
 191c  8a 00                             mov     al,[eax]
 191e  25 ff 00 00 00                    and     eax,000000ffH
 1923  8d 04 40                          lea     eax,[eax+eax*2]
 1926  8b 15 00 00 00 00                 mov     edx,Palette near * near ScreenPal
 192c  01 c2                             add     edx,eax
 192e  31 c0                             xor     eax,eax
 1930  8a 82 00 03 04 00                 mov     al,+40300H[edx]
 1936  89 45 a4                          mov     -5cH[ebp],eax
 1939  db 45 a4                          fild    dword ptr -5cH[ebp]
 193c  d8 4d 10                          fmul    dword ptr +10H[ebp]
 193f  de c1                             faddp   st(1),st
 1941  e8 00 00 00 00                    call    __CHP
 1946  db 5d e4                          fistp   dword ptr -1cH[ebp]

         tempg = ((int)ScreenPal->RegPal[*Screen][1] * gtrans +
				(int)ThePal[*BMap][1] * (1 - gtrans));

 1949  8b 45 d0                          mov     eax,-30H[ebp]
 194c  8a 00                             mov     al,[eax]
 194e  25 ff 00 00 00                    and     eax,000000ffH
 1953  8d 04 40                          lea     eax,[eax+eax*2]
 1956  8b 55 f0                          mov     edx,-10H[ebp]
 1959  01 c2                             add     edx,eax
 195b  31 c0                             xor     eax,eax
 195d  8a 42 0d                          mov     al,+0dH[edx]
 1960  89 45 a4                          mov     -5cH[ebp],eax
 1963  db 45 a4                          fild    dword ptr -5cH[ebp]
 1966  d9 e8                             fld1    
 1968  d8 65 14                          fsub    dword ptr +14H[ebp]
 196b  de c9                             fmulp   st(1),st
 196d  8b 45 cc                          mov     eax,-34H[ebp]
 1970  8a 00                             mov     al,[eax]
 1972  25 ff 00 00 00                    and     eax,000000ffH
 1977  8d 04 40                          lea     eax,[eax+eax*2]
 197a  8b 15 00 00 00 00                 mov     edx,Palette near * near ScreenPal
 1980  01 c2                             add     edx,eax
 1982  31 c0                             xor     eax,eax
 1984  8a 82 01 03 04 00                 mov     al,+40301H[edx]
 198a  89 45 a4                          mov     -5cH[ebp],eax
 198d  db 45 a4                          fild    dword ptr -5cH[ebp]
 1990  d8 4d 14                          fmul    dword ptr +14H[ebp]
 1993  de c1                             faddp   st(1),st
 1995  e8 00 00 00 00                    call    __CHP
 199a  db 5d e8                          fistp   dword ptr -18H[ebp]

         tempb = ((int)ScreenPal->RegPal[*Screen][2] * btrans +
				(int)ThePal[*BMap][2] * (1 - btrans));

 199d  8b 45 d0                          mov     eax,-30H[ebp]
 19a0  8a 00                             mov     al,[eax]
 19a2  25 ff 00 00 00                    and     eax,000000ffH
 19a7  8d 04 40                          lea     eax,[eax+eax*2]
 19aa  8b 55 f0                          mov     edx,-10H[ebp]
 19ad  01 c2                             add     edx,eax
 19af  31 c0                             xor     eax,eax
 19b1  8a 42 0e                          mov     al,+0eH[edx]
 19b4  89 45 a4                          mov     -5cH[ebp],eax
 19b7  db 45 a4                          fild    dword ptr -5cH[ebp]
 19ba  d9 e8                             fld1    
 19bc  d8 65 18                          fsub    dword ptr +18H[ebp]
 19bf  de c9                             fmulp   st(1),st
 19c1  8b 45 cc                          mov     eax,-34H[ebp]
 19c4  8a 00                             mov     al,[eax]
 19c6  25 ff 00 00 00                    and     eax,000000ffH
 19cb  8d 04 40                          lea     eax,[eax+eax*2]
 19ce  8b 15 00 00 00 00                 mov     edx,Palette near * near ScreenPal
 19d4  01 c2                             add     edx,eax
 19d6  31 c0                             xor     eax,eax
 19d8  8a 82 02 03 04 00                 mov     al,+40302H[edx]
 19de  89 45 a4                          mov     -5cH[ebp],eax
 19e1  db 45 a4                          fild    dword ptr -5cH[ebp]
 19e4  d8 4d 18                          fmul    dword ptr +18H[ebp]
 19e7  de c1                             faddp   st(1),st
 19e9  e8 00 00 00 00                    call    __CHP
 19ee  db 5d ec                          fistp   dword ptr -14H[ebp]

         *Screen = ScreenPal->VirPal[tempr][tempg][tempb];
			//*Screen = *BMap;
			//}
 19f1  8b 15 00 00 00 00                 mov     edx,Palette near * near ScreenPal
 19f7  8b 45 e4                          mov     eax,-1cH[ebp]
 19fa  c1 e0 0c                          shl     eax,0cH
 19fd  01 c2                             add     edx,eax
 19ff  8b 45 e8                          mov     eax,-18H[ebp]
 1a02  c1 e0 06                          shl     eax,06H
 1a05  01 d0                             add     eax,edx
 1a07  03 45 ec                          add     eax,-14H[ebp]
 1a0a  8a 90 00 03 00 00                 mov     dl,+300H[eax]
 1a10  8b 45 cc                          mov     eax,-34H[ebp]
 1a13  88 10                             mov     [eax],dl

        	Screen++;
 1a15  8b 45 cc                          mov     eax,-34H[ebp]
 1a18  ff 45 cc                          inc     dword ptr -34H[ebp]

        	BMap++;
 1a1b  8b 45 d0                          mov     eax,-30H[ebp]
 1a1e  ff 45 d0                          inc     dword ptr -30H[ebp]

      }
 1a21  e9 bd fe ff ff                    jmp     L187

      Screen += ScreenIncrement;
 1a26  8b 45 dc          L189            mov     eax,-24H[ebp]
 1a29  01 45 cc                          add     -34H[ebp],eax

      BMap += BitmapIncrement;
 1a2c  8b 45 e0                          mov     eax,-20H[ebp]
 1a2f  01 45 d0                          add     -30H[ebp],eax

   }
 1a32  e9 91 fe ff ff                    jmp     L185

}



 1a37  89 ec             L190            mov     esp,ebp
 1a39  5d                                pop     ebp
 1a3a  5f                                pop     edi
 1a3b  5e                                pop     esi
 1a3c  c2 0c 00                          ret     000cH

No disassembly errors

------------------------------------------------------------

Segment: $$SYMBOLS  BYTE USE16  000011bc bytes  
 0000  08 32                                   - .2
 0002  00 00 00 00 00 00                       DP      int near ios::fail() const
 0008  15 26 00 00 80 9a 06 8e                 - .&......
 0010  10 fc 61 21                             - ..a!
 0014  00 00 00 00 00 00                       DP      DGROUP:L191
 001a  68 01 66 1c 24 00 00 00                 - h.f.$...
 0022  00 29 00 00 00 08 00 0e                 - .)......
 002a  09 18 00 00 00 3f 30 1c                 - .....?0.
 0032  01 30 1c 66 61 69 6c 0a                 - .0.fail.
 003a  11 10 fc 80 cc 74 68 69                 - .....thi
 0042  73 08 32                                - s.2
 0045  00 00 00 00 00 00                       DP      int near ios::operator !() const
 004b  15 26 00 00 80 9a 06 8e                 - .&......
 0053  10 fc 61 21                             - ..a!
 0057  00 00 00 00 00 00                       DP      DGROUP:L191
 005d  68 01 66 21 24 00 00 00                 - h.f!$...
 0065  00 28 00 00 00 4b 00 0e                 - .(...K..
 006d  09 18 00 00 00 3f 30 1c                 - .....?0.
 0075  01 30 1c 6f 70 65 72 61                 - .0.opera
 007d  74 6f 72 21 0a 11 10 fc                 - tor!....
 0085  80 cd 74 68 69 73 08 32                 - ..this.2
 008d  00 00 00 00 00 00                       DP      istream near & near istream::get( char unsigned near & )
 0093  15 26 00 00 80 ce 06 8e                 - .&......
 009b  10 f8 61 21                             - ..a!
 009f  00 00 00 00 00 00                       DP      DGROUP:L191
 00a5  68 01 66 1e 24 00 00 00                 - h.f.$...
 00ad  00 2c 00 00 00 93 00 0d                 - .,......
 00b5  08 14 00 00 00 80 eb 30                 - .......0
 00bd  1c 02 30 1c 30 1f 67 65                 - ..0.0.ge
 00c5  74 0a 11 10 f8 81 1e 74                 - t......t
 00cd  68 69 73 14 11 8e 10 fc                 - his.....
 00d5  61 21                                   - a!
 00d7  00 00 00 00 00 00                       DP      DGROUP:L191
 00dd  68 01 66 08 5f 5f 63 08                 - h.f.__c.
 00e5  32                                      - 2
 00e6  00 00 00 00 00 00                       DP      istream near & near istream::read( char unsigned near *, int )
 00ec  15 26 00 00 80 ce 06 8e                 - .&......
 00f4  10 f4 61 21                             - ..a!
 00f8  00 00 00 00 00 00                       DP      DGROUP:L191
 00fe  68 01 66 21 24 00 00 00                 - h.f!$...
 0106  00 30 00 00 00 ec 00 0c                 - .0......
 010e  07 10 00 00 00 81 16 30                 - .......0
 0116  1c 03 30 1c 30 1f 30 1d                 - ..0.0.0.
 011e  72 65 61 64 0a 11 10 f4                 - read....
 0126  81 1f 74 68 69 73 0b 11                 - ..this..
 012e  10 f8 80 e1 5f 5f 62 75                 - ....__bu
 0136  66 0a 11 10 fc 0c 5f 5f                 - f.....__
 013e  6c 65 6e 08 32                          - len.2
 0143  00 00 00 00 00 00                       DP      ostream near & near ostream::put( char unsigned )
 0149  14 26 00 00 66 06 8e 10                 - .&..f...
 0151  f8 61 21                                - .a!
 0154  00 00 00 00 00 00                       DP      DGROUP:L191
 015a  68 01 66 1d 24 00 00 00                 - h.f.$...
 0162  00 2e 00 00 00 49 01 0d                 - .....I..
 016a  08 14 00 00 00 78 30 1c                 - .....x0.
 0172  02 30 1c 30 1f 70 75 74                 - .0.0.put
 017a  0a 11 10 f8 81 20 74 68                 - ..... th
 0182  69 73 08 11 10 fc 08 5f                 - is....._
 018a  5f 63 08 32                             - _c.2
 018e  00 00 00 00 00 00                       DP      ostream near & near ostream::write( char unsigned const near *, int )
 0194  14 26 00 00 66 06 8e 10                 - .&..f...
 019c  f4 61 21                                - .a!
 019f  00 00 00 00 00 00                       DP      DGROUP:L191
 01a5  68 01 66 22 24 00 00 00                 - h.f"$...
 01ad  00 30 00 00 00 94 01 0c                 - .0......
 01b5  07 10 00 00 00 80 a1 30                 - .......0
 01bd  1c 03 30 1c 30 1f 30 1d                 - ..0.0.0.
 01c5  77 72 69 74 65 0a 11 10                 - write...
 01cd  f4 81 20 74 68 69 73 0b                 - .. this.
 01d5  11 10 f8 80 94 5f 5f 62                 - .....__b
 01dd  75 66 0a 11 10 fc 0c 5f                 - uf....._
 01e5  5f 6c 65 6e 08 32                       - _len.2
 01eb  00 00 00 00 00 00                       DP      int near ifstream::__defarg()
 01f1  06 26 00 00 81 21 1e 24                 - .&...!.$
 01f9  00 00 00 00 22 00 00 00                 - ...."...
 0201  f1 01 0e 09 18 00 00 00                 - ........
 0209  40 30 1c 00 5f 5f 64 65                 - @0..__de
 0211  66 61 72 67 08 32                       - farg.2
 0217  00 00 00 00 00 00                       DP      void near ifstream::open( char const near *, int, int )
 021d  15 26 00 00 81 21 06 8e                 - .&...!..
 0225  10 f0 61 21                             - ..a!
 0229  00 00 00 00 00 00                       DP      DGROUP:L191
 022f  68 01 66 22 24 00 00 00                 - h.f"$...
 0237  00 2e 00 00 00 1d 02 0b                 - ........
 023f  06 0c 00 00 00 81 2b 00                 - ......+.
 0247  04 30 1c 30 1f 30 1d 30                 - .0.0.0.0
 024f  1e 6f 70 65 6e 0a 11 10                 - .open...
 0257  f0 81 59 74 68 69 73 08                 - ..Ythis.
 025f  11 10 f4 45 5f 5f 6e 08                 - ...E__n.
 0267  11 10 f8 2d 5f 5f 6d 08                 - ...-__m.
 026f  11 10 fc 0c 5f 5f 70 08                 - ....__p.
 0277  32                                      - 2
 0278  00 00 00 00 00 00                       DP      int near ofstream::__defarg()
 027e  06 26 00 00 81 5a 1e 24                 - .&...Z.$
 0286  00 00 00 00 22 00 00 00                 - ...."...
 028e  7e 02 0e 09 18 00 00 00                 - ~.......
 0296  40 30 1c 00 5f 5f 64 65                 - @0..__de
 029e  66 61 72 67 08 32                       - farg.2
 02a4  00 00 00 00 00 00                       DP      void near ofstream::open( char const near *, int, int )
 02aa  15 26 00 00 81 5a 06 8e                 - .&...Z..
 02b2  10 f0 61 21                             - ..a!
 02b6  00 00 00 00 00 00                       DP      DGROUP:L191
 02bc  68 01 66 22 24 00 00 00                 - h.f"$...
 02c4  00 2e 00 00 00 aa 02 0b                 - ........
 02cc  06 0c 00 00 00 81 2b 00                 - ......+.
 02d4  04 30 1c 30 1f 30 1d 30                 - .0.0.0.0
 02dc  1e 6f 70 65 6e 0a 11 10                 - .open...
 02e4  f0 81 69 74 68 69 73 08                 - ..ithis.
 02ec  11 10 f4 45 5f 5f 6e 08                 - ...E__n.
 02f4  11 10 f8 2d 5f 5f 6d 08                 - ...-__m.
 02fc  11 10 fc 0c 5f 5f 70 08                 - ....__p.
 0304  32                                      - 2
 0305  00 00 00 00 00 00                       DP      near Bitmap::Bitmap()
 030b  15 26 00 00 81 6d 06 8e                 - .&...m..
 0313  10 fc 61 21                             - ..a!
 0317  00 00 00 00 00 00                       DP      DGROUP:L191
 031d  68 01 66 1f 24 00 00 00                 - h.f.$...
 0325  00 42 00 00 00 0b 03 0e                 - .B......
 032d  09 18 00 00 00 81 71 30                 - ......q0
 0335  1c 01 30 1c 42 69 74 6d                 - ..0.Bitm
 033d  61 70 0a 11 10 fc 81 7d                 - ap.....}
 0345  74 68 69 73 15 26 00 00                 - this.&..
 034d  81 6d 06 8e 10 f8 61 21                 - .m....a!
 0355  00 00 00 00 00 00                       DP      DGROUP:L191
 035b  68 01 66 21 24 44 00 00                 - h.f!$D..
 0363  00 4e 00 00 00 49 03 0d                 - .N...I..
 036b  08 14 00 00 00 81 6f 30                 - ......o0
 0373  1c 02 30 1c 30 1f 42 69                 - ..0.0.Bi
 037b  74 6d 61 70 0a 11 10 f8                 - tmap....
 0383  81 7e 74 68 69 73 0c 11                 - .~this..
 038b  10 fc 3b 54 68 65 46 69                 - ..;TheFi
 0393  6c 65 0c 23 a7 00 00 00                 - le.#....
 039b  14 00 00 00 b6 03 15 26                 - .......&
 03a3  00 00 81 6d 06 8e 10 f8                 - ...m....
 03ab  61 21                                   - a!
 03ad  00 00 00 00 00 00                       DP      DGROUP:L191
 03b3  68 01 66 22 24 94 00 00                 - h.f"$...
 03bb  00 38 00 00 00 a1 03 0d                 - .8......
 03c3  08 14 00 00 00 81 72 30                 - ......r0
 03cb  1c 02 30 1c 30 1f 7e 42                 - ..0.0.~B
 03d3  69 74 6d 61 70 0a 11 10                 - itmap...
 03db  f8 81 7e 74 68 69 73 0b                 - ..~this.
 03e3  11 10 fc 0d 2e 63 64 74                 - .....cdt
 03eb  6f 72 15 26 00 00 81 6d                 - or.&...m
 03f3  06 8e 10 fc 61 21                       - ....a!
 03f9  00 00 00 00 00 00                       DP      DGROUP:L191
 03ff  68 01 66 22 24 cc 00 00                 - h.f"$...
 0407  00 26 00 00 00 ed 03 0e                 - .&......
 040f  09 18 00 00 00 80 aa 30                 - .......0
 0417  1c 01 30 1c 47 65 74 48                 - ..0.GetH
 041f  65 69 67 68 74 0a 11 10                 - eight...
 0427  fc 81 7e 74 68 69 73 15                 - ..~this.
 042f  26 00 00 81 6d 06 8e 10                 - &...m...
 0437  fc 61 21                                - .a!
 043a  00 00 00 00 00 00                       DP      DGROUP:L191
 0440  68 01 66 21 24 f4 00 00                 - h.f!$...
 0448  00 25 00 00 00 2e 04 0e                 - .%......
 0450  09 18 00 00 00 80 aa 30                 - .......0
 0458  1c 01 30 1c 47 65 74 57                 - ..0.GetW
 0460  69 64 74 68 0a 11 10 fc                 - idth....
 0468  81 7e 74 68 69 73 15 26                 - .~this.&
 0470  00 00 81 6d 06 8e 10 f0                 - ...m....
 0478  61 21                                   - a!
 047a  00 00 00 00 00 00                       DP      DGROUP:L191
 0480  68 01 66 29 24 1c 01 00                 - h.f)$...
 0488  00 05 01 00 00 6e 04 0b                 - .....n..
 0490  08 0c 00 00 00 81 74 30                 - ......t0
 0498  1c 04 30 1c 30 1f 30 1d                 - ..0.0.0.
 04a0  30 1e 4d 61 6b 65 4e 65                 - 0.MakeNe
 04a8  77 42 6d 70 0a 11 10 f0                 - wBmp....
 04b0  81 7e 74 68 69 73 06 11                 - .~this..
 04b8  10 f4 1a 77 06 11 10 f8                 - ...w....
 04c0  1a 68 0c 11 10 fc 81 6a                 - .h.....j
 04c8  53 6f 75 72 63 65 09 11                 - Source..
 04d0  10 10 81 73 50 61 6c 08                 - ...sPal.
 04d8  11 10 ec 0c 63 6f 6c 15                 - ....col.
 04e0  26 00 00 81 6d 06 8e 10                 - &...m...
 04e8  f8 61 21                                - .a!
 04eb  00 00 00 00 00 00                       DP      DGROUP:L191
 04f1  68 01 66 1f 24 24 02 00                 - h.f.$$..
 04f9  00 82 01 00 00 df 04 0d                 - ........
 0501  08 14 00 00 00 81 75 30                 - ......u0
 0509  1c 02 30 1c 30 1f 4c 6f                 - ..0.0.Lo
 0511  61 64 0a 11 10 f8 81 7e                 - ad.....~
 0519  74 68 69 73 09 11 10 fc                 - this....
 0521  3b 66 69 6c 65 0d 11 11                 - ;file...
 0529  68 ff 81 7f 49 6e 46 69                 - h...InFi
 0531  6c 65 10 11 11 60 ff 81                 - le...`..
 0539  80 4e 75 6d 62 65 72 42                 - .NumberB
 0541  75 66 08 11 10 f0 0c 63                 - uf.....c
 0549  6f 6c 15 26 00 00 81 6d                 - ol.&...m
 0551  06 8e 10 f8 61 21                       - ....a!
 0557  00 00 00 00 00 00                       DP      DGROUP:L191
 055d  68 01 66 25 24 a8 03 00                 - h.f%$...
 0565  00 38 01 00 00 4b 05 0d                 - .8...K..
 056d  08 14 00 00 00 81 75 30                 - ......u0
 0575  1c 02 30 1c 30 1f 53 61                 - ..0.0.Sa
 057d  76 65 54 6f 44 69 73 6b                 - veToDisk
 0585  0a 11 10 f8 81 7e 74 68                 - .....~th
 058d  69 73 09 11 10 fc 3b 66                 - is....;f
 0595  69 6c 65 0e 11 11 70 ff                 - ile...p.
 059d  81 81 4f 75 74 46 69 6c                 - ..OutFil
 05a5  65 08 11 10 f0 0c 63 6f                 - e.....co
 05ad  6c 0c 23 8e 06 00 00 35                 - l.#....5
 05b5  00 00 00 ba 05 0c 23 8e                 - ......#.
 05bd  06 00 00 35 00 00 00 db                 - ...5....
 05c5  05 15 26 00 00 81 6d 06                 - ..&...m.
 05cd  8e 10 f0 61 21                          - ...a!
 05d2  00 00 00 00 00 00                       DP      DGROUP:L191
 05d8  68 01 66 28 24 e0 04 00                 - h.f($...
 05e0  00 eb 01 00 00 c6 05 0b                 - ........
 05e8  06 0c 00 00 00 81 76 00                 - ......v.
 05f0  04 30 1c 30 1f 30 1d 30                 - .0.0.0.0
 05f8  1e 50 75 74 52 65 67 75                 - .PutRegu
 0600  6c 61 72 0a 11 10 f0 81                 - lar.....
 0608  7e 74 68 69 73 06 11 10                 - ~this...
 0610  f4 1a 78 06 11 10 f8 1a                 - ..x.....
 0618  79 09 11 10 fc 3b 6f 66                 - y....;of
 0620  66 73 08 11 10 b4 0c 54                 - fs.....T
 0628  6f 70 09 11 10 b8 0c 4c                 - op.....L
 0630  65 66 74 0e 11 10 bc 0d                 - eft.....
 0638  42 4d 4f 66 66 73 65 74                 - BMOffset
 0640  58 0e 11 10 c0 0d 42 4d                 - X.....BM
 0648  4f 66 66 73 65 74 59 10                 - OffsetY.
 0650  11 10 c4 0d 43 6c 69 70                 - ....Clip
 0658  70 65 64 4c 65 66 74 0f                 - pedLeft.
 0660  11 10 c8 0d 43 6c 69 70                 - ....Clip
 0668  70 65 64 54 6f 70 0d 11                 - pedTop..
 0670  10 cc 0c 42 6c 74 57 69                 - ...BltWi
 0678  64 74 68 0e 11 10 d0 0c                 - dth.....
 0680  42 6c 74 48 65 69 67 68                 - BltHeigh
 0688  74 0f 11 10 d4 1a 54 65                 - t.....Te
 0690  6d 70 4f 66 66 73 65 74                 - mpOffset
 0698  0b 11 10 d8 3b 53 63 72                 - ....;Scr
 06a0  65 65 6e 0a 11 10 dc 81                 - een.....
 06a8  6a 42 4d 61 70 12 11 10                 - jBMap...
 06b0  e0 0d 48 65 69 67 68 74                 - ..Height
 06b8  43 6f 75 6e 74 65 72 11                 - Counter.
 06c0  11 10 e4 0d 57 69 64 74                 - ....Widt
 06c8  68 43 6f 75 6e 74 65 72                 - hCounter
 06d0  14 11 10 e8 0d 53 63 72                 - .....Scr
 06d8  65 65 6e 49 6e 63 72 65                 - eenIncre
 06e0  6d 65 6e 74 14 11 10 ec                 - ment....
 06e8  0d 42 69 74 6d 61 70 49                 - .BitmapI
 06f0  6e 63 72 65 6d 65 6e 74                 - ncrement
 06f8  0c 23 91 08 00 00 24 00                 - .#....$.
 0700  00 00 04 07 0c 23 91 08                 - .....#..
 0708  00 00 24 00 00 00 10 07                 - ..$.....
 0710  0c 23 7a 08 00 00 49 00                 - .#z...I.
 0718  00 00 1c 07 0c 23 7a 08                 - .....#z.
 0720  00 00 49 00 00 00 3d 07                 - ..I...=.
 0728  15 26 00 00 81 6d 06 8e                 - .&...m..
 0730  10 f0 61 21                             - ..a!
 0734  00 00 00 00 00 00                       DP      DGROUP:L191
 073a  68 01 66 2c 24 cc 06 00                 - h.f,$...
 0742  00 ff 01 00 00 28 07 0b                 - .....(..
 074a  06 0c 00 00 00 81 76 00                 - ......v.
 0752  04 30 1c 30 1f 30 1d 30                 - .0.0.0.0
 075a  1e 50 75 74 54 72 61 6e                 - .PutTran
 0762  73 70 61 72 65 6e 74 0a                 - sparent.
 076a  11 10 f0 81 7e 74 68 69                 - ....~thi
 0772  73 06 11 10 f4 1a 78 06                 - s.....x.
 077a  11 10 f8 1a 79 09 11 10                 - ....y...
 0782  fc 3b 6f 66 66 73 08 11                 - .;offs..
 078a  10 b4 0c 54 6f 70 09 11                 - ...Top..
 0792  10 b8 0c 4c 65 66 74 0e                 - ...Left.
 079a  11 10 bc 0d 42 4d 4f 66                 - ....BMOf
 07a2  66 73 65 74 58 0e 11 10                 - fsetX...
 07aa  c0 0d 42 4d 4f 66 66 73                 - ..BMOffs
 07b2  65 74 59 10 11 10 c4 0d                 - etY.....
 07ba  43 6c 69 70 70 65 64 4c                 - ClippedL
 07c2  65 66 74 0f 11 10 c8 0d                 - eft.....
 07ca  43 6c 69 70 70 65 64 54                 - ClippedT
 07d2  6f 70 0d 11 10 cc 0c 42                 - op.....B
 07da  6c 74 57 69 64 74 68 0e                 - ltWidth.
 07e2  11 10 d0 0c 42 6c 74 48                 - ....BltH
 07ea  65 69 67 68 74 0f 11 10                 - eight...
 07f2  d4 1a 54 65 6d 70 4f 66                 - ..TempOf
 07fa  66 73 65 74 0b 11 10 d8                 - fset....
 0802  3b 53 63 72 65 65 6e 0a                 - ;Screen.
 080a  11 10 dc 81 6a 42 4d 61                 - ....jBMa
 0812  70 11 11 10 e0 0d 57 69                 - p.....Wi
 081a  64 74 68 43 6f 75 6e 74                 - dthCount
 0822  65 72 12 11 10 e4 0d 48                 - er.....H
 082a  65 69 67 68 74 43 6f 75                 - eightCou
 0832  6e 74 65 72 14 11 10 e8                 - nter....
 083a  0d 53 63 72 65 65 6e 49                 - .ScreenI
 0842  6e 63 72 65 6d 65 6e 74                 - ncrement
 084a  14 11 10 ec 0d 42 69 74                 - .....Bit
 0852  6d 61 70 49 6e 63 72 65                 - mapIncre
 085a  6d 65 6e 74 0c 23 99 0a                 - ment.#..
 0862  00 00 8c 00 00 00 6a 08                 - ......j.
 086a  0c 23 99 0a 00 00 8c 00                 - .#......
 0872  00 00 76 08 0c 23 7e 0a                 - ..v..#~.
 087a  00 00 b8 00 00 00 82 08                 - ........
 0882  0c 23 7e 0a 00 00 b8 00                 - .#~.....
 088a  00 00 a3 08 15 26 00 00                 - .....&..
 0892  81 6d 06 8e 10 f0 61 21                 - .m....a!
 089a  00 00 00 00 00 00                       DP      DGROUP:L191
 08a0  68 01 66 31 24 cc 08 00                 - h.f1$...
 08a8  00 75 02 00 00 8e 08 0b                 - .u......
 08b0  06 0c 00 00 00 81 76 00                 - ......v.
 08b8  04 30 1c 30 1f 30 1d 30                 - .0.0.0.0
 08c0  1e 50 75 74 54 72 61 6e                 - .PutTran
 08c8  73 70 61 72 65 6e 74 31                 - sparent1
 08d0  38 62 69 74 0a 11 10 f0                 - 8bit....
 08d8  81 7e 74 68 69 73 06 11                 - .~this..
 08e0  10 f4 1a 78 06 11 10 f8                 - ...x....
 08e8  1a 79 09 11 10 fc 3b 6f                 - .y....;o
 08f0  66 66 73 08 11 10 a8 0c                 - ffs.....
 08f8  54 6f 70 09 11 10 ac 0c                 - Top.....
 0900  4c 65 66 74 0e 11 10 b0                 - Left....
 0908  0d 42 4d 4f 66 66 73 65                 - .BMOffse
 0910  74 58 0e 11 10 b4 0d 42                 - tX.....B
 0918  4d 4f 66 66 73 65 74 59                 - MOffsetY
 0920  10 11 10 b8 0d 43 6c 69                 - .....Cli
 0928  70 70 65 64 4c 65 66 74                 - ppedLeft
 0930  0f 11 10 bc 0d 43 6c 69                 - .....Cli
 0938  70 70 65 64 54 6f 70 0d                 - ppedTop.
 0940  11 10 c0 0c 42 6c 74 57                 - ....BltW
 0948  69 64 74 68 0e 11 10 c4                 - idth....
 0950  0c 42 6c 74 48 65 69 67                 - .BltHeig
 0958  68 74 0f 11 10 c8 1a 54                 - ht.....T
 0960  65 6d 70 4f 66 66 73 65                 - empOffse
 0968  74 0b 11 10 cc 3b 53 63                 - t....;Sc
 0970  72 65 65 6e 0a 11 10 d0                 - reen....
 0978  81 6a 42 4d 61 70 11 11                 - .jBMap..
 0980  10 d4 0d 57 69 64 74 68                 - ...Width
 0988  43 6f 75 6e 74 65 72 12                 - Counter.
 0990  11 10 d8 0d 48 65 69 67                 - ....Heig
 0998  68 74 43 6f 75 6e 74 65                 - htCounte
 09a0  72 14 11 10 dc 0d 53 63                 - r.....Sc
 09a8  72 65 65 6e 49 6e 63 72                 - reenIncr
 09b0  65 6d 65 6e 74 14 11 10                 - ement...
 09b8  e0 0d 42 69 74 6d 61 70                 - ..Bitmap
 09c0  49 6e 63 72 65 6d 65 6e                 - Incremen
 09c8  74 0a 11 10 e4 0c 74 65                 - t.....te
 09d0  6d 70 72 0a 11 10 e8 0c                 - mpr.....
 09d8  74 65 6d 70 67 0a 11 10                 - tempg...
 09e0  ec 0c 74 65 6d 70 62 0c                 - ..tempb.
 09e8  23 f6 0c 00 00 aa 00 00                 - #.......
 09f0  00 f3 09 0c 23 f6 0c 00                 - ....#...
 09f8  00 aa 00 00 00 14 0a 15                 - ........
 0a00  26 00 00 81 6d 06 8e 10                 - &...m...
 0a08  f0 61 21                                - .a!
 0a0b  00 00 00 00 00 00                       DP      DGROUP:L191
 0a11  68 01 66 2d 24 44 0b 00                 - h.f-$D..
 0a19  00 67 02 00 00 ff 09 0b                 - .g......
 0a21  06 0c 00 00 00 81 76 00                 - ......v.
 0a29  04 30 1c 30 1f 30 1d 30                 - .0.0.0.0
 0a31  1e 50 75 74 52 65 67 75                 - .PutRegu
 0a39  6c 61 72 31 38 62 69 74                 - lar18bit
 0a41  0a 11 10 f0 81 7e 74 68                 - .....~th
 0a49  69 73 06 11 10 f4 1a 78                 - is.....x
 0a51  06 11 10 f8 1a 79 09 11                 - .....y..
 0a59  10 fc 3b 6f 66 66 73 08                 - ..;offs.
 0a61  11 10 a8 0c 54 6f 70 09                 - ....Top.
 0a69  11 10 ac 0c 4c 65 66 74                 - ....Left
 0a71  0e 11 10 b0 0d 42 4d 4f                 - .....BMO
 0a79  66 66 73 65 74 58 0e 11                 - ffsetX..
 0a81  10 b4 0d 42 4d 4f 66 66                 - ...BMOff
 0a89  73 65 74 59 10 11 10 b8                 - setY....
 0a91  0d 43 6c 69 70 70 65 64                 - .Clipped
 0a99  4c 65 66 74 0f 11 10 bc                 - Left....
 0aa1  0d 43 6c 69 70 70 65 64                 - .Clipped
 0aa9  54 6f 70 0d 11 10 c0 0c                 - Top.....
 0ab1  42 6c 74 57 69 64 74 68                 - BltWidth
 0ab9  0e 11 10 c4 0c 42 6c 74                 - .....Blt
 0ac1  48 65 69 67 68 74 0f 11                 - Height..
 0ac9  10 c8 1a 54 65 6d 70 4f                 - ...TempO
 0ad1  66 66 73 65 74 0b 11 10                 - ffset...
 0ad9  cc 3b 53 63 72 65 65 6e                 - .;Screen
 0ae1  0a 11 10 d0 81 6a 42 4d                 - .....jBM
 0ae9  61 70 11 11 10 d4 0d 57                 - ap.....W
 0af1  69 64 74 68 43 6f 75 6e                 - idthCoun
 0af9  74 65 72 12 11 10 d8 0d                 - ter.....
 0b01  48 65 69 67 68 74 43 6f                 - HeightCo
 0b09  75 6e 74 65 72 14 11 10                 - unter...
 0b11  dc 0d 53 63 72 65 65 6e                 - ..Screen
 0b19  49 6e 63 72 65 6d 65 6e                 - Incremen
 0b21  74 14 11 10 e0 0d 42 69                 - t.....Bi
 0b29  74 6d 61 70 49 6e 63 72                 - tmapIncr
 0b31  65 6d 65 6e 74 0a 11 10                 - ement...
 0b39  e4 0c 74 65 6d 70 72 0a                 - ..tempr.
 0b41  11 10 e8 0c 74 65 6d 70                 - ....temp
 0b49  67 0a 11 10 ec 0c 74 65                 - g.....te
 0b51  6d 70 62 0c 23 79 0f 00                 - mpb.#y..
 0b59  00 44 01 00 00 60 0b 0c                 - .D...`..
 0b61  23 79 0f 00 00 44 01 00                 - #y...D..
 0b69  00 6c 0b 0c 23 5e 0f 00                 - .l..#^..
 0b71  00 70 01 00 00 78 0b 0c                 - .p...x..
 0b79  23 5e 0f 00 00 70 01 00                 - #^...p..
 0b81  00 99 0b 15 26 00 00 81                 - ....&...
 0b89  6d 06 8e 10 f0 61 21                    - m....a!
 0b90  00 00 00 00 00 00                       DP      DGROUP:L191
 0b96  68 01 66 31 24 ac 0d 00                 - h.f1$...
 0b9e  00 2f 03 00 00 84 0b 0b                 - ./......
 0ba6  08 0c 00 00 00 81 77 00                 - ......w.
 0bae  04 30 1c 30 1f 30 1d 30                 - .0.0.0.0
 0bb6  1e 50 75 74 54 72 61 6e                 - .PutTran
 0bbe  73 70 61 72 65 6e 74 46                 - sparentF
 0bc6  61 64 65 64 0a 11 10 f0                 - aded....
 0bce  81 7e 74 68 69 73 06 11                 - .~this..
 0bd6  10 f4 1a 78 06 11 10 f8                 - ...x....
 0bde  1a 79 09 11 10 fc 3b 6f                 - .y....;o
 0be6  66 66 73 0a 11 10 10 1b                 - ffs.....
 0bee  72 66 61 64 65 0a 11 10                 - rfade...
 0bf6  14 1b 67 66 61 64 65 0a                 - ..gfade.
 0bfe  11 10 18 1b 62 66 61 64                 - ....bfad
 0c06  65 08 11 10 a8 0c 54 6f                 - e.....To
 0c0e  70 09 11 10 ac 0c 4c 65                 - p.....Le
 0c16  66 74 0e 11 10 b0 0d 42                 - ft.....B
 0c1e  4d 4f 66 66 73 65 74 58                 - MOffsetX
 0c26  0e 11 10 b4 0d 42 4d 4f                 - .....BMO
 0c2e  66 66 73 65 74 59 10 11                 - ffsetY..
 0c36  10 b8 0d 43 6c 69 70 70                 - ...Clipp
 0c3e  65 64 4c 65 66 74 0f 11                 - edLeft..
 0c46  10 bc 0d 43 6c 69 70 70                 - ...Clipp
 0c4e  65 64 54 6f 70 0d 11 10                 - edTop...
 0c56  c0 0c 42 6c 74 57 69 64                 - ..BltWid
 0c5e  74 68 0e 11 10 c4 0c 42                 - th.....B
 0c66  6c 74 48 65 69 67 68 74                 - ltHeight
 0c6e  0f 11 10 c8 1a 54 65 6d                 - .....Tem
 0c76  70 4f 66 66 73 65 74 0b                 - pOffset.
 0c7e  11 10 cc 3b 53 63 72 65                 - ...;Scre
 0c86  65 6e 0a 11 10 d0 81 6a                 - en.....j
 0c8e  42 4d 61 70 11 11 10 d4                 - BMap....
 0c96  0d 57 69 64 74 68 43 6f                 - .WidthCo
 0c9e  75 6e 74 65 72 12 11 10                 - unter...
 0ca6  d8 0d 48 65 69 67 68 74                 - ..Height
 0cae  43 6f 75 6e 74 65 72 14                 - Counter.
 0cb6  11 10 dc 0d 53 63 72 65                 - ....Scre
 0cbe  65 6e 49 6e 63 72 65 6d                 - enIncrem
 0cc6  65 6e 74 14 11 10 e0 0d                 - ent.....
 0cce  42 69 74 6d 61 70 49 6e                 - BitmapIn
 0cd6  63 72 65 6d 65 6e 74 0a                 - crement.
 0cde  11 10 e4 0c 74 65 6d 70                 - ....temp
 0ce6  72 0a 11 10 e8 0c 74 65                 - r.....te
 0cee  6d 70 67 0a 11 10 ec 0c                 - mpg.....
 0cf6  74 65 6d 70 62 0c 23 8e                 - tempb.#.
 0cfe  12 00 00 5e 01 00 00 07                 - ...^....
 0d06  0d 0c 23 8e 12 00 00 5e                 - ..#....^
 0d0e  01 00 00 28 0d 15 26 00                 - ...(..&.
 0d16  00 81 6d 06 8e 10 f0 61                 - ..m....a
 0d1e  21                                      - !
 0d1f  00 00 00 00 00 00                       DP      DGROUP:L191
 0d25  68 01 66 2d 24 dc 10 00                 - h.f-$...
 0d2d  00 1d 03 00 00 13 0d 0b                 - ........
 0d35  08 0c 00 00 00 81 77 00                 - ......w.
 0d3d  04 30 1c 30 1f 30 1d 30                 - .0.0.0.0
 0d45  1e 50 75 74 52 65 67 75                 - .PutRegu
 0d4d  6c 61 72 46 61 64 65 64                 - larFaded
 0d55  0a 11 10 f0 81 7e 74 68                 - .....~th
 0d5d  69 73 06 11 10 f4 1a 78                 - is.....x
 0d65  06 11 10 f8 1a 79 09 11                 - .....y..
 0d6d  10 fc 3b 6f 66 66 73 0a                 - ..;offs.
 0d75  11 10 10 1b 72 66 61 64                 - ....rfad
 0d7d  65 0a 11 10 14 1b 67 66                 - e.....gf
 0d85  61 64 65 0a 11 10 18 1b                 - ade.....
 0d8d  62 66 61 64 65 08 11 10                 - bfade...
 0d95  a8 0c 54 6f 70 09 11 10                 - ..Top...
 0d9d  ac 0c 4c 65 66 74 0e 11                 - ..Left..
 0da5  10 b0 0d 42 4d 4f 66 66                 - ...BMOff
 0dad  73 65 74 58 0e 11 10 b4                 - setX....
 0db5  0d 42 4d 4f 66 66 73 65                 - .BMOffse
 0dbd  74 59 10 11 10 b8 0d 43                 - tY.....C
 0dc5  6c 69 70 70 65 64 4c 65                 - lippedLe
 0dcd  66 74 0f 11 10 bc 0d 43                 - ft.....C
 0dd5  6c 69 70 70 65 64 54 6f                 - lippedTo
 0ddd  70 0d 11 10 c0 0c 42 6c                 - p.....Bl
 0de5  74 57 69 64 74 68 0e 11                 - tWidth..
 0ded  10 c4 0c 42 6c 74 48 65                 - ...BltHe
 0df5  69 67 68 74 0f 11 10 c8                 - ight....
 0dfd  1a 54 65 6d 70 4f 66 66                 - .TempOff
 0e05  73 65 74 0b 11 10 cc 3b                 - set....;
 0e0d  53 63 72 65 65 6e 0a 11                 - Screen..
 0e15  10 d0 81 6a 42 4d 61 70                 - ...jBMap
 0e1d  11 11 10 d4 0d 57 69 64                 - .....Wid
 0e25  74 68 43 6f 75 6e 74 65                 - thCounte
 0e2d  72 12 11 10 d8 0d 48 65                 - r.....He
 0e35  69 67 68 74 43 6f 75 6e                 - ightCoun
 0e3d  74 65 72 14 11 10 dc 0d                 - ter.....
 0e45  53 63 72 65 65 6e 49 6e                 - ScreenIn
 0e4d  63 72 65 6d 65 6e 74 14                 - crement.
 0e55  11 10 e0 0d 42 69 74 6d                 - ....Bitm
 0e5d  61 70 49 6e 63 72 65 6d                 - apIncrem
 0e65  65 6e 74 0a 11 10 e4 0c                 - ent.....
 0e6d  74 65 6d 70 72 0a 11 10                 - tempr...
 0e75  e8 0c 74 65 6d 70 67 0a                 - ..tempg.
 0e7d  11 10 ec 0c 74 65 6d 70                 - ....temp
 0e85  62 0c 23 c9 15 00 00 3e                 - b.#....>
 0e8d  01 00 00 92 0e 0c 23 c9                 - ......#.
 0e95  15 00 00 3e 01 00 00 9e                 - ...>....
 0e9d  0e 0c 23 ae 15 00 00 6a                 - ..#....j
 0ea5  01 00 00 aa 0e 0c 23 ae                 - ......#.
 0ead  15 00 00 6a 01 00 00 cb                 - ...j....
 0eb5  0e 15 26 00 00 81 6d 06                 - ..&...m.
 0ebd  8e 10 f0 61 21                          - ...a!
 0ec2  00 00 00 00 00 00                       DP      DGROUP:L191
 0ec8  68 01 66 30 24 fc 13 00                 - h.f0$...
 0ed0  00 29 03 00 00 b6 0e 0b                 - .)......
 0ed8  08 0c 00 00 00 81 78 00                 - ......x.
 0ee0  04 30 1c 30 1f 30 1d 30                 - .0.0.0.0
 0ee8  1e 50 75 74 54 72 61 6e                 - .PutTran
 0ef0  73 70 61 72 65 6e 74 53                 - sparentS
 0ef8  65 6d 69 0a 11 10 f0 81                 - emi.....
 0f00  7e 74 68 69 73 06 11 10                 - ~this...
 0f08  f4 1a 78 06 11 10 f8 1a                 - ..x.....
 0f10  79 09 11 10 fc 3b 6f 66                 - y....;of
 0f18  66 73 0b 11 10 10 10 72                 - fs.....r
 0f20  74 72 61 6e 73 0b 11 10                 - trans...
 0f28  14 10 67 74 72 61 6e 73                 - ..gtrans
 0f30  0b 11 10 18 10 62 74 72                 - .....btr
 0f38  61 6e 73 08 11 10 a8 0c                 - ans.....
 0f40  54 6f 70 09 11 10 ac 0c                 - Top.....
 0f48  4c 65 66 74 0e 11 10 b0                 - Left....
 0f50  0d 42 4d 4f 66 66 73 65                 - .BMOffse
 0f58  74 58 0e 11 10 b4 0d 42                 - tX.....B
 0f60  4d 4f 66 66 73 65 74 59                 - MOffsetY
 0f68  10 11 10 b8 0d 43 6c 69                 - .....Cli
 0f70  70 70 65 64 4c 65 66 74                 - ppedLeft
 0f78  0f 11 10 bc 0d 43 6c 69                 - .....Cli
 0f80  70 70 65 64 54 6f 70 0d                 - ppedTop.
 0f88  11 10 c0 0c 42 6c 74 57                 - ....BltW
 0f90  69 64 74 68 0e 11 10 c4                 - idth....
 0f98  0c 42 6c 74 48 65 69 67                 - .BltHeig
 0fa0  68 74 0f 11 10 c8 1a 54                 - ht.....T
 0fa8  65 6d 70 4f 66 66 73 65                 - empOffse
 0fb0  74 0b 11 10 cc 3b 53 63                 - t....;Sc
 0fb8  72 65 65 6e 0a 11 10 d0                 - reen....
 0fc0  81 6a 42 4d 61 70 11 11                 - .jBMap..
 0fc8  10 d4 0d 57 69 64 74 68                 - ...Width
 0fd0  43 6f 75 6e 74 65 72 12                 - Counter.
 0fd8  11 10 d8 0d 48 65 69 67                 - ....Heig
 0fe0  68 74 43 6f 75 6e 74 65                 - htCounte
 0fe8  72 14 11 10 dc 0d 53 63                 - r.....Sc
 0ff0  72 65 65 6e 49 6e 63 72                 - reenIncr
 0ff8  65 6d 65 6e 74 14 11 10                 - ement...
 1000  e0 0d 42 69 74 6d 61 70                 - ..Bitmap
 1008  49 6e 63 72 65 6d 65 6e                 - Incremen
 1010  74 0a 11 10 e4 0c 74 65                 - t.....te
 1018  6d 70 72 0a 11 10 e8 0c                 - mpr.....
 1020  74 65 6d 70 67 0a 11 10                 - tempg...
 1028  ec 0c 74 65 6d 70 62 0c                 - ..tempb.
 1030  23 da 18 00 00 58 01 00                 - #....X..
 1038  00 3b 10 0c 23 da 18 00                 - .;..#...
 1040  00 58 01 00 00 5c 10 15                 - .X...\..
 1048  26 00 00 81 6d 06 8e 10                 - &...m...
 1050  f0 61 21                                - .a!
 1053  00 00 00 00 00 00                       DP      DGROUP:L191
 1059  68 01 66 2c 24 28 17 00                 - h.f,$(..
 1061  00 17 03 00 00 47 10 0b                 - .....G..
 1069  08 0c 00 00 00 81 78 00                 - ......x.
 1071  04 30 1c 30 1f 30 1d 30                 - .0.0.0.0
 1079  1e 50 75 74 52 65 67 75                 - .PutRegu
 1081  6c 61 72 53 65 6d 69 0a                 - larSemi.
 1089  11 10 f0 81 7e 74 68 69                 - ....~thi
 1091  73 06 11 10 f4 1a 78 06                 - s.....x.
 1099  11 10 f8 1a 79 09 11 10                 - ....y...
 10a1  fc 3b 6f 66 66 73 0b 11                 - .;offs..
 10a9  10 10 10 72 74 72 61 6e                 - ...rtran
 10b1  73 0b 11 10 14 10 67 74                 - s.....gt
 10b9  72 61 6e 73 0b 11 10 18                 - rans....
 10c1  10 62 74 72 61 6e 73 08                 - .btrans.
 10c9  11 10 a8 0c 54 6f 70 09                 - ....Top.
 10d1  11 10 ac 0c 4c 65 66 74                 - ....Left
 10d9  0e 11 10 b0 0d 42 4d 4f                 - .....BMO
 10e1  66 66 73 65 74 58 0e 11                 - ffsetX..
 10e9  10 b4 0d 42 4d 4f 66 66                 - ...BMOff
 10f1  73 65 74 59 10 11 10 b8                 - setY....
 10f9  0d 43 6c 69 70 70 65 64                 - .Clipped
 1101  4c 65 66 74 0f 11 10 bc                 - Left....
 1109  0d 43 6c 69 70 70 65 64                 - .Clipped
 1111  54 6f 70 0d 11 10 c0 0c                 - Top.....
 1119  42 6c 74 57 69 64 74 68                 - BltWidth
 1121  0e 11 10 c4 0c 42 6c 74                 - .....Blt
 1129  48 65 69 67 68 74 0f 11                 - Height..
 1131  10 c8 1a 54 65 6d 70 4f                 - ...TempO
 1139  66 66 73 65 74 0b 11 10                 - ffset...
 1141  cc 3b 53 63 72 65 65 6e                 - .;Screen
 1149  0a 11 10 d0 81 6a 42 4d                 - .....jBM
 1151  61 70 11 11 10 d4 0d 57                 - ap.....W
 1159  69 64 74 68 43 6f 75 6e                 - idthCoun
 1161  74 65 72 12 11 10 d8 0d                 - ter.....
 1169  48 65 69 67 68 74 43 6f                 - HeightCo
 1171  75 6e 74 65 72 14 11 10                 - unter...
 1179  dc 0d 53 63 72 65 65 6e                 - ..Screen
 1181  49 6e 63 72 65 6d 65 6e                 - Incremen
 1189  74 14 11 10 e0 0d 42 69                 - t.....Bi
 1191  74 6d 61 70 49 6e 63 72                 - tmapIncr
 1199  65 6d 65 6e 74 0a 11 10                 - ement...
 11a1  e4 0c 74 65 6d 70 72 0a                 - ..tempr.
 11a9  11 10 e8 0c 74 65 6d 70                 - ....temp
 11b1  67 0a 11 10 ec 0c 74 65                 - g.....te
 11b9  6d 70 62                                - mpb

No disassembly errors

------------------------------------------------------------

Segment: $$TYPES  BYTE USE16  00002123 bytes  
 0000  06 13 23 21 00 00 06 11                 - ..#!....
 0008  65 6e 75 6d 07 11 75 6e                 - enum..un
 0010  69 6f 6e 08 11 73 74 72                 - ion..str
 0018  75 63 74 07 11 63 6c 61                 - uct..cla
 0020  73 73 0c 10 11 5f 5f 73                 - ss...__s
 0028  65 67 6d 65 6e 74 07 10                 - egment..
 0030  10 63 68 61 72 03 10 00                 - .char...
 0038  03 10 10 03 10 11 03 10                 - ........
 0040  01 03 10 11 06 10 03 69                 - .......i
 0048  6e 74 0f 10 13 75 6e 73                 - nt...uns
 0050  69 67 6e 65 64 20 69 6e                 - igned in
 0058  74 03 10 03 03 10 13 03                 - t.......
 0060  10 23 03 10 27 03 10 30                 - .#..'..0
 0068  03 46 12 04 72 13 00 03                 - .F..r...
 0070  46 14 08 60 03 00 0c 00                 - F..`....
 0078  00 00 0f 67 01 84 22 08                 - ...g..".
 0080  69 0d 5f 5f 69 6e 64 65                 - i.__inde
 0088  78 0f 67 01 84 22 04 69                 - x.g..".i
 0090  0d 5f 5f 64 65 6c 74 61                 - .__delta
 0098  09 67 01 6b 15 5f 5f 66                 - .g.k.__f
 00a0  6e 08 12 00 08 42 4f 4f                 - n....BOO
 00a8  4c 08 12 00 0f 4c 4f 4e                 - L....LON
 00b0  47 08 12 00 0b 57 4f 52                 - G....WOR
 00b8  44 0a 12 00 0f 55 49 4e                 - D....UIN
 00c0  54 33 32 09 12 00 0e 49                 - T32....I
 00c8  4e 54 33 32 0a 12 00 0b                 - NT32....
 00d0  55 49 4e 54 31 36 09 12                 - UINT16..
 00d8  00 0a 49 4e 54 31 36 09                 - ..INT16.
 00e0  12 00 08 55 49 4e 54 38                 - ...UINT8
 00e8  08 12 00 07 49 4e 54 38                 - ....INT8
 00f0  09 12 00 08 55 43 48 41                 - ....UCHA
 00f8  52 0c 12 00 0c 66 69 6c                 - R....fil
 0100  65 64 65 73 63 0d 12 00                 - edesc...
 0108  0c 70 74 72 64 69 66 66                 - .ptrdiff
 0110  5f 74 0b 12 00 09 77 63                 - _t....wc
 0118  68 61 72 5f 74 0a 12 00                 - har_t...
 0120  0d 73 69 7a 65 5f 74 0c                 - .size_t.
 0128  12 00 0e 66 6d 74 66 6c                 - ...fmtfl
 0130  61 67 73 05 50 12 00 01                 - ags.P...
 0138  0e 52 00 18 66 6c 6f 61                 - .R..floa
 0140  74 66 69 65 6c 64 0e 51                 - tfield.Q
 0148  0e 61 64 6a 75 73 74 66                 - .adjustf
 0150  69 65 6c 64 0c 51 70 62                 - ield.Qpb
 0158  61 73 65 66 69 65 6c 64                 - asefield
 0160  09 52 00 40 73 74 64 69                 - .R.@stdi
 0168  6f 0b 52 00 20 75 6e 69                 - o.R. uni
 0170  74 62 75 66 09 52 00 10                 - tbuf.R..
 0178  66 69 78 65 64 0e 52 00                 - fixed.R.
 0180  08 73 63 69 65 6e 74 69                 - .scienti
 0188  66 69 63 0b 52 00 04 73                 - fic.R..s
 0190  68 6f 77 70 6f 73 0d 52                 - howpos.R
 0198  00 02 75 70 70 65 72 63                 - ..upperc
 01a0  61 73 65 0d 52 00 01 73                 - ase.R..s
 01a8  68 6f 77 70 6f 69 6e 74                 - howpoint
 01b0  0c 52 80 00 73 68 6f 77                 - .R..show
 01b8  62 61 73 65 06 51 40 68                 - base.Q@h
 01c0  65 78 06 51 20 6f 63 74                 - ex.Q oct
 01c8  06 51 10 64 65 63 0b 51                 - .Q.dec.Q
 01d0  08 69 6e 74 65 72 6e 61                 - .interna
 01d8  6c 08 51 04 72 69 67 68                 - l.Q.righ
 01e0  74 07 51 02 6c 65 66 74                 - t.Q.left
 01e8  09 51 01 73 6b 69 70 77                 - .Q.skipw
 01f0  73 0d 12 01 26 66 6d 74                 - s...&fmt
 01f8  5f 66 6c 61 67 73 0d 12                 - _flags..
 0200  00 26 66 6d 74 5f 66 6c                 - .&fmt_fl
 0208  61 67 73 0b 12 00 0c 73                 - ags....s
 0210  65 65 6b 64 69 72 05 50                 - eekdir.P
 0218  03 00 00 06 51 02 65 6e                 - ....Q.en
 0220  64 06 51 01 63 75 72 06                 - d.Q.cur.
 0228  51 00 62 65 67 0c 12 01                 - Q.beg...
 0230  2a 73 65 65 6b 5f 64 69                 - *seek_di
 0238  72 0c 12 00 2a 73 65 65                 - r...*see
 0240  6b 5f 64 69 72 0c 12 00                 - k_dir...
 0248  0c 6f 70 65 6e 6d 6f 64                 - .openmod
 0250  65 05 50 0c 00 01 08 51                 - e.P....Q
 0258  10 74 72 75 6e 63 06 51                 - .trunc.Q
 0260  04 61 74 65 06 51 08 61                 - .ate.Q.a
 0268  70 70 0a 52 00 01 62 69                 - pp.R..bi
 0270  6e 61 72 79 08 52 80 00                 - nary.R..
 0278  74 65 78 74 0c 51 40 6e                 - text.Q@n
 0280  6f 72 65 70 6c 61 63 65                 - oreplace
 0288  0b 51 20 6e 6f 63 72 65                 - .Q nocre
 0290  61 74 65 0b 51 10 74 72                 - ate.Q.tr
 0298  75 6e 63 61 74 65 09 51                 - uncate.Q
 02a0  08 61 70 70 65 6e 64 08                 - .append.
 02a8  51 04 61 74 65 6e 64 06                 - Q.atend.
 02b0  51 02 6f 75 74 05 51 01                 - Q.out.Q.
 02b8  69 6e 0d 12 01 2e 6f 70                 - in....op
 02c0  65 6e 5f 6d 6f 64 65 0d                 - en_mode.
 02c8  12 00 2e 6f 70 65 6e 5f                 - ...open_
 02d0  6d 6f 64 65 0b 12 00 0c                 - mode....
 02d8  69 6f 73 74 61 74 65 05                 - iostate.
 02e0  50 04 00 00 09 51 04 65                 - P....Q.e
 02e8  6f 66 62 69 74 0a 51 02                 - ofbit.Q.
 02f0  66 61 69 6c 62 69 74 09                 - failbit.
 02f8  51 01 62 61 64 62 69 74                 - Q.badbit
 0300  0a 51 00 67 6f 6f 64 62                 - .Q.goodb
 0308  69 74 0c 12 01 32 69 6f                 - it...2io
 0310  5f 73 74 61 74 65 0c 12                 - _state..
 0318  00 32 69 6f 5f 73 74 61                 - .2io_sta
 0320  74 65 05 50 03 00 01 14                 - te.P....
 0328  52 04 02 44 45 46 41 55                 - R..DEFAU
 0330  4c 54 5f 42 55 46 5f 53                 - LT_BUF_S
 0338  49 5a 45 18 52 00 02 44                 - IZE.R..D
 0340  45 46 41 55 4c 54 5f 4d                 - EFAULT_M
 0348  41 49 4e 42 55 46 5f 53                 - AINBUF_S
 0350  49 5a 45 17 51 04 44 45                 - IZE.Q.DE
 0358  46 41 55 4c 54 5f 50 55                 - FAULT_PU
 0360  54 42 41 43 4b 5f 53 49                 - TBACK_SI
 0368  5a 45 07 12 00 35 2e 23                 - ZE...5.#
 0370  30 0d 12 00 0e 73 74 72                 - 0....str
 0378  65 61 6d 6f 66 66 0d 12                 - eamoff..
 0380  00 0e 73 74 72 65 61 6d                 - ..stream
 0388  70 6f 73 0a 12 00 12 5f                 - pos...._
 0390  5f 6c 6f 63 6b 03 46 39                 - _lock.F9
 0398  03 46 06 04 72 12 00 03                 - .F..r...
 03a0  46 3c 03 46 3d 04 72 0c                 - F<.F=.r.
 03a8  00 04 72 0c 00 06 72 0c                 - ..r...r.
 03b0  02 3b 0c 04 72 12 00 05                 - .;..r...
 03b8  72 0c 01 06 05 72 0c 01                 - r....r..
 03c0  0c 03 46 06 06 72 0c 02                 - ..F..r..
 03c8  45 0c 06 72 0c 02 3b 0c                 - E..r..;.
 03d0  06 72 0c 02 45 0c 05 72                 - .r..E..r
 03d8  0c 01 0c 05 72 0c 01 0c                 - ....r...
 03e0  04 72 0c 00 0e 12 00 80                 - .r......
 03e8  52 73 74 72 65 61 6d 62                 - Rstreamb
 03f0  75 66 03 46 4c 06 72 4d                 - uf.FL.rM
 03f8  02 3b 0c 07 72 38 03 37                 - .;..r8.7
 0400  29 2d 06 72 38 02 38 2d                 - )-.r8.8-
 0408  04 72 0c 00 0e 12 04 80                 - .r......
 0410  63 73 74 72 65 61 6d 62                 - cstreamb
 0418  75 66 03 48 52 04 72 53                 - uf.HR.rS
 0420  00 03 48 52 06 72 55 02                 - ..HR.rU.
 0428  3b 0c 03 46 12 04 72 57                 - ;..F..rW
 0430  00 04 72 3b 00 07 72 12                 - ..r;..r.
 0438  03 3b 3b 0c 05 72 12 01                 - .;;..r..
 0440  37 07 72 12 03 3b 3b 3b                 - 7.r..;;;
 0448  06 72 12 02 3b 3b 03 48                 - .r..;;.H
 0450  52 03 48 4c 05 72 5e 01                 - R.HL.r^.
 0458  5f 03 48 4c 05 72 12 01                 - _.HL.r..
 0460  61 08 60 39 00 2c 00 00                 - a.`9.,..
 0468  00 14 67 08 21                          - ..g.!
 046d  00 00 00 00 00 00                       DP      void near streambuf::operator =( streambuf near & )
 0473  62 6f 70 65 72 61 74 6f                 - boperato
 047b  72 3d 14 67 08 21                       - r=.g.!
 0481  00 00 00 00 00 00                       DP      near streambuf::streambuf( streambuf near & )
 0487  60 73 74 72 65 61 6d 62                 - `streamb
 048f  75 66 21 67 04 93 22 28                 - uf!g.."(
 0497  69 61 22 28 69 61 21                    - ia"(ia!
 049e  00 00 00 00 00 00                       DP      int near ios::fail() const
 04a4  68 01 66 51 64 6f 61 6c                 - h.fQdoal
 04ac  6c 6f 63 61 74 65 15 67                 - locate.g
 04b4  04 21                                   - .!
 04b6  00 00 00 00 00 00                       DP      int near streambuf::unbuffered() const
 04bc  3f 75 6e 62 75 66 66 65                 - ?unbuffe
 04c4  72 65 64 15 67 04 21                    - red.g.!
 04cb  00 00 00 00 00 00                       DP      int near streambuf::unbuffered( int )
 04d1  44 75 6e 62 75 66 66 65                 - Dunbuffe
 04d9  72 65 64 0f 67 04 21                    - red.g.!
 04e0  00 00 00 00 00 00                       DP      void near streambuf::setp( char near *, char near * )
 04e6  5d 73 65 74 70 10 67 04                 - ]setp.g.
 04ee  21                                      - !
 04ef  00 00 00 00 00 00                       DP      void near streambuf::pbump( long )
 04f5  5b 70 62 75 6d 70 10 67                 - [pbump.g
 04fd  04 21                                   - .!
 04ff  00 00 00 00 00 00                       DP      char near * near streambuf::epptr() const
 0505  59 65 70 70 74 72 0f 67                 - Yepptr.g
 050d  04 21                                   - .!
 050f  00 00 00 00 00 00                       DP      char near * near streambuf::pptr() const
 0515  59 70 70 74 72 10 67 04                 - Ypptr.g.
 051d  21                                      - !
 051e  00 00 00 00 00 00                       DP      char near * near streambuf::pbase() const
 0524  59 70 62 61 73 65 0f 67                 - Ypbase.g
 052c  04 21                                   - .!
 052e  00 00 00 00 00 00                       DP      void near streambuf::setg( char near *, char near *, char near * )
 0534  5c 73 65 74 67 10 67 04                 - \setg.g.
 053c  21                                      - !
 053d  00 00 00 00 00 00                       DP      void near streambuf::gbump( long )
 0543  5b 67 62 75 6d 70 10 67                 - [gbump.g
 054b  04 21                                   - .!
 054d  00 00 00 00 00 00                       DP      char near * near streambuf::egptr() const
 0553  59 65 67 70 74 72 0f 67                 - Yegptr.g
 055b  04 21                                   - .!
 055d  00 00 00 00 00 00                       DP      char near * near streambuf::gptr() const
 0563  59 67 70 74 72 10 67 04                 - Ygptr.g.
 056b  21                                      - !
 056c  00 00 00 00 00 00                       DP      char near * near streambuf::eback() const
 0572  59 65 62 61 63 6b 0f 67                 - Yeback.g
 057a  04 21                                   - .!
 057c  00 00 00 00 00 00                       DP      void near streambuf::setb( char near *, char near *, int )
 0582  5a 73 65 74 62 0f 67 04                 - Zsetb.g.
 058a  21                                      - !
 058b  00 00 00 00 00 00                       DP      int near streambuf::blen() const
 0591  3f 62 6c 65 6e 0f 67 04                 - ?blen.g.
 0599  21                                      - !
 059a  00 00 00 00 00 00                       DP      char near * near streambuf::ebuf() const
 05a0  59 65 62 75 66 0f 67 04                 - Yebuf.g.
 05a8  21                                      - !
 05a9  00 00 00 00 00 00                       DP      char near * near streambuf::base() const
 05af  59 62 61 73 65 13 67 04                 - Ybase.g.
 05b7  21                                      - !
 05b8  00 00 00 00 00 00                       DP      int near streambuf::allocate()
 05be  40 61 6c 6c 6f 63 61 74                 - @allocat
 05c6  65 21 67 04 93 22 28 69                 - e!g.."(i
 05ce  61 22 24 69 61 21                       - a"$ia!
 05d4  00 00 00 00 00 00                       DP      int near ios::fail() const
 05da  68 01 66 58 7e 73 74 72                 - h.fX~str
 05e2  65 61 6d 62 75 66 14 67                 - eambuf.g
 05ea  04 21                                   - .!
 05ec  00 00 00 00 00 00                       DP      near streambuf::streambuf( char near *, int )
 05f2  56 73 74 72 65 61 6d 62                 - Vstreamb
 05fa  75 66 14 67 04 21                       - uf.g.!
 0600  00 00 00 00 00 00                       DP      near streambuf::streambuf()
 0606  54 73 74 72 65 61 6d 62                 - Tstreamb
 060e  75 66 1b 67 02 93 22 28                 - uf.g.."(
 0616  69 61 22 20 69 61 21                    - ia" ia!
 061d  00 00 00 00 00 00                       DP      int near ios::fail() const
 0623  68 01 66 51 73 79 6e 63                 - h.fQsync
 062b  1e 67 02 93 22 28 69 61                 - .g.."(ia
 0633  22 1c 69 61 21                          - ".ia!
 0638  00 00 00 00 00 00                       DP      int near ios::fail() const
 063e  68 01 66 50 73 65 65 6b                 - h.fPseek
 0646  70 6f 73 1e 67 02 93 22                 - pos.g.."
 064e  28 69 61 22 18 69 61 21                 - (ia".ia!
 0656  00 00 00 00 00 00                       DP      int near ios::fail() const
 065c  68 01 66 4f 73 65 65 6b                 - h.fOseek
 0664  6f 66 66 1d 67 02 93 22                 - off.g.."
 066c  28 69 61 22 14 69 61 21                 - (ia".ia!
 0674  00 00 00 00 00 00                       DP      int near ios::fail() const
 067a  68 01 66 4e 73 65 74 62                 - h.fNsetb
 0682  75 66 20 67 02 93 22 28                 - uf g.."(
 068a  69 61 22 10 69 61 21                    - ia".ia!
 0691  00 00 00 00 00 00                       DP      int near ios::fail() const
 0697  68 01 66 4b 75 6e 64 65                 - h.fKunde
 069f  72 66 6c 6f 77 1f 67 02                 - rflow.g.
 06a7  93 22 28 69 61 22 0c 69                 - ."(ia".i
 06af  61 21                                   - a!
 06b1  00 00 00 00 00 00                       DP      int near ios::fail() const
 06b7  68 01 66 4a 6f 76 65 72                 - h.fJover
 06bf  66 6c 6f 77 20 67 02 93                 - flow g..
 06c7  22 28 69 61 22 08 69 61                 - "(ia".ia
 06cf  21                                      - !
 06d0  00 00 00 00 00 00                       DP      int near ios::fail() const
 06d6  68 01 66 49 70 62 61 63                 - h.fIpbac
 06de  6b 66 61 69 6c 1f 67 02                 - kfail.g.
 06e6  93 22 28 69 61 22 04 69                 - ."(ia".i
 06ee  61 21                                   - a!
 06f0  00 00 00 00 00 00                       DP      int near ios::fail() const
 06f6  68 01 66 48 64 6f 5f 73                 - h.fHdo_s
 06fe  70 75 74 6e 1f 67 02 93                 - putn.g..
 0706  22 28 69 61 22 00 69 61                 - "(ia".ia
 070e  21                                      - !
 070f  00 00 00 00 00 00                       DP      int near ios::fail() const
 0715  68 01 66 47 64 6f 5f 73                 - h.fGdo_s
 071d  67 65 74 6e 0e 67 02 21                 - getn.g.!
 0725  00 00 00 00 00 00                       DP      void near streambuf::dbp()
 072b  3c 64 62 70 10 67 02 21                 - <dbp.g.!
 0733  00 00 00 00 00 00                       DP      int near streambuf::sputn( char const near *, int )
 0739  46 73 70 75 74 6e 10 67                 - Fsputn.g
 0741  02 21                                   - .!
 0743  00 00 00 00 00 00                       DP      int near streambuf::sputc( int )
 0749  44 73 70 75 74 63 14 67                 - Dsputc.g
 0751  02 21                                   - .!
 0753  00 00 00 00 00 00                       DP      int near streambuf::sputbackc( char )
 0759  43 73 70 75 74 62 61 63                 - Csputbac
 0761  6b 63 11 67 02 21                       - kc.g.!
 0767  00 00 00 00 00 00                       DP      void near streambuf::stossc()
 076d  42 73 74 6f 73 73 63 11                 - Bstossc.
 0775  67 02 21                                - g.!
 0778  00 00 00 00 00 00                       DP      int near streambuf::sbumpc()
 077e  40 73 62 75 6d 70 63 13                 - @sbumpc.
 0786  67 02 21                                - g.!
 0789  00 00 00 00 00 00                       DP      int near streambuf::sgetchar()
 078f  40 73 67 65 74 63 68 61                 - @sgetcha
 0797  72 10 67 02 21                          - r.g.!
 079c  00 00 00 00 00 00                       DP      int near streambuf::sgetc()
 07a2  40 73 67 65 74 63 11 67                 - @sgetc.g
 07aa  02 21                                   - .!
 07ac  00 00 00 00 00 00                       DP      int near streambuf::speekc()
 07b2  40 73 70 65 65 6b 63 10                 - @speekc.
 07ba  67 02 21                                - g.!
 07bd  00 00 00 00 00 00                       DP      int near streambuf::sgetn( char near *, int )
 07c3  41 73 67 65 74 6e 11 67                 - Asgetn.g
 07cb  02 21                                   - .!
 07cd  00 00 00 00 00 00                       DP      int near streambuf::snextc()
 07d3  40 73 6e 65 78 74 63 16                 - @snextc.
 07db  67 02 21                                - g.!
 07de  00 00 00 00 00 00                       DP      int near streambuf::out_waiting() const
 07e4  3f 6f 75 74 5f 77 61 69                 - ?out_wai
 07ec  74 69 6e 67 13 67 02 21                 - ting.g.!
 07f4  00 00 00 00 00 00                       DP      int near streambuf::in_avail() const
 07fa  3f 69 6e 5f 61 76 61 69                 - ?in_avai
 0802  6c 0f 67 01 84 22 28 69                 - l.g.."(i
 080a  3e 5f 5f 76 66 70 74 72                 - >__vfptr
 0812  1a 68 08 84 22 24 69 01                 - .h.."$i.
 081a  01 0d 5f 5f 64 65 6c 65                 - ..__dele
 0822  74 65 5f 72 65 73 65 72                 - te_reser
 082a  76 65 1c 68 08 84 22 24                 - ve.h.."$
 0832  69 00 01 0d 5f 5f 75 6e                 - i...__un
 083a  62 75 66 66 65 72 65 64                 - buffered
 0842  5f 73 74 61 74 65 11 67                 - _state.g
 084a  08 84 22 20 69 3b 5f 5f                 - .." i;__
 0852  70 75 74 5f 70 74 72 11                 - put_ptr.
 085a  67 08 84 22 1c 69 3b 5f                 - g..".i;_
 0862  5f 70 75 74 5f 65 6e 64                 - _put_end
 086a  12 67 08 84 22 18 69 3b                 - .g..".i;
 0872  5f 5f 70 75 74 5f 62 61                 - __put_ba
 087a  73 65 11 67 08 84 22 14                 - se.g..".
 0882  69 3b 5f 5f 67 65 74 5f                 - i;__get_
 088a  70 74 72 11 67 08 84 22                 - ptr.g.."
 0892  10 69 3b 5f 5f 67 65 74                 - .i;__get
 089a  5f 65 6e 64 12 67 08 84                 - _end.g..
 08a2  22 0c 69 3b 5f 5f 67 65                 - ".i;__ge
 08aa  74 5f 62 61 73 65 15 67                 - t_base.g
 08b2  08 84 22 08 69 3b 5f 5f                 - ..".i;__
 08ba  72 65 73 65 72 76 65 5f                 - reserve_
 08c2  65 6e 64 16 67 08 84 22                 - end.g.."
 08ca  04 69 3b 5f 5f 72 65 73                 - .i;__res
 08d2  65 72 76 65 5f 62 61 73                 - erve_bas
 08da  65 0c 61 00 3a 5f 5f 62                 - e.a.:__b
 08e2  5f 6c 6f 63 6b 03 46 4c                 - _lock.FL
 08ea  03 46 0d 0c 12 04 80 ac                 - .F......
 08f2  6f 73 74 72 65 61 6d 05                 - ostream.
 08fa  12 00 80 ab 03 48 66 05                 - .....Hf.
 0902  72 68 01 64 03 48 66 0c                 - rh.d.Hf.
 090a  12 00 80 66 6f 73 74 72                 - ...fostr
 0912  65 61 6d 03 48 6b 05 72                 - eam.Hk.r
 091a  6a 01 6c 03 48 6b 05 72                 - j.l.Hk.r
 0922  6e 01 64 03 48 6b 03 48                 - n.d.Hk.H
 092a  6b 05 72 70 01 71 03 48                 - k.rp.q.H
 0932  6b 05 72 73 01 06 03 48                 - k.rs...H
 093a  6b 05 72 75 01 07 03 48                 - k.ru...H
 0942  6b 05 72 77 01 08 03 48                 - k.rw...H
 094a  6b 05 72 79 01 0a 03 48                 - k.ry...H
 0952  6b 05 72 7b 01 0b 03 48                 - k.r{...H
 095a  6b 05 72 7d 01 0c 03 48                 - k.r}...H
 0962  6b 05 72 7f 01 0d 03 48                 - k.r....H
 096a  6b 06 72 80 81 01 0e 03                 - k.r.....
 0972  48 6b 06 72 80 83 01 0f                 - Hk.r....
 097a  03 48 6b 06 72 80 85 01                 - .Hk.r...
 0982  10 03 48 6b 06 72 80 87                 - ..Hk.r..
 098a  01 11 03 48 6b 03 10 27                 - ...Hk..'
 0992  07 72 80 89 01 80 8a 03                 - .r......
 099a  48 6b 06 72 80 8c 01 57                 - Hk.r...W
 09a2  03 48 6b 06 72 80 8e 01                 - .Hk.r...
 09aa  45 03 48 6b 03 46 07 07                 - E.Hk.F..
 09b2  72 80 90 01 80 91 03 48                 - r......H
 09ba  6b 03 46 08 07 72 80 93                 - k.F..r..
 09c2  01 80 94 03 48 6b 05 72                 - ....Hk.r
 09ca  6b 01 6b 04 46 80 97 07                 - k.k.F...
 09d2  72 80 96 01 80 98 08 12                 - r.......
 09da  04 80 cb 69 6f 73 08 12                 - ...ios..
 09e2  00 80 9a 69 6f 73 07 72                 - ...ios.r
 09ea  80 9b 01 80 9b 04 46 80                 - ......F.
 09f2  9c 06 72 6b 01 80 9d 06                 - ..rk....
 09fa  72 6b 02 45 0c 07 72 6b                 - rk.E..rk
 0a02  02 80 91 0c 07 72 6b 02                 - .....rk.
 0a0a  80 94 0c 04 72 6b 00 05                 - ....rk..
 0a12  72 6b 01 38 06 72 6b 02                 - rk.8.rk.
 0a1a  37 29 04 72 38 00 03 48                 - 7).r8..H
 0a22  66 05 72 80 a6 00 04 48                 - f.r....H
 0a2a  80 8a 06 72 6b 01 80 a8                 - ...rk...
 0a32  04 72 0c 00 08 60 2a 00                 - .r...`*.
 0a3a  38 00 00 00 13 67 04 21                 - 8....g.!
 0a42  00 00 00 00 00 00                       DP      int near ostream::do_opfx()
 0a48  80 aa 64 6f 5f 6f 70 66                 - ..do_opf
 0a50  78 14 67 04 21                          - x.g.!
 0a55  00 00 00 00 00 00                       DP      ostream near & near ostream::do_lshift( char )
 0a5b  74 64 6f 5f 6c 73 68 69                 - tdo_lshi
 0a63  66 74 16 67 04 21                       - ft.g.!
 0a69  00 00 00 00 00 00                       DP      ostream near & near ostream::__outfloat( long double const near & )
 0a6f  80 a9 5f 5f 6f 75 74 66                 - ..__outf
 0a77  6c 6f 61 74 13 67 04 21                 - loat.g.!
 0a7f  00 00 00 00 00 00                       DP      near ostream::ostream()
 0a85  80 a7 6f 73 74 72 65 61                 - ..ostrea
 0a8d  6d 11 67 02 21                          - m.g.!
 0a92  00 00 00 00 00 00                       DP      long near ostream::tellp()
 0a98  80 a5 74 65 6c 6c 70 11                 - ..tellp.
 0aa0  67 02 21                                - g.!
 0aa3  00 00 00 00 00 00                       DP      ostream near & near ostream::seekp( long, int )
 0aa9  80 a4 73 65 65 6b 70 11                 - ..seekp.
 0ab1  67 02 21                                - g.!
 0ab4  00 00 00 00 00 00                       DP      ostream near & near ostream::seekp( long )
 0aba  80 a3 73 65 65 6b 70 11                 - ..seekp.
 0ac2  67 02 21                                - g.!
 0ac5  00 00 00 00 00 00                       DP      ostream near & near ostream::flush()
 0acb  80 a2 66 6c 75 73 68 11                 - ..flush.
 0ad3  67 02 21                                - g.!
 0ad6  00 00 00 00 00 00                       DP      ostream near & near ostream::write( char unsigned const near *, int )
 0adc  80 a1 77 72 69 74 65 11                 - ..write.
 0ae4  67 02 21                                - g.!
 0ae7  00 00 00 00 00 00                       DP      ostream near & near ostream::write( char signed const near *, int )
 0aed  80 a0 77 72 69 74 65 11                 - ..write.
 0af5  67 02 21                                - g.!
 0af8  00 00 00 00 00 00                       DP      ostream near & near ostream::write( char const near *, int )
 0afe  80 9f 77 72 69 74 65 0e                 - ..write.
 0b06  67 02 21                                - g.!
 0b09  00 00 00 00 00 00                       DP      ostream near & near ostream::put( char unsigned )
 0b0f  78 70 75 74 0e 67 02 21                 - xput.g.!
 0b17  00 00 00 00 00 00                       DP      ostream near & near ostream::put( char signed )
 0b1d  76 70 75 74 0e 67 02 21                 - vput.g.!
 0b25  00 00 00 00 00 00                       DP      ostream near & near ostream::put( char )
 0b2b  74 70 75 74 0f 67 02 21                 - tput.g.!
 0b33  00 00 00 00 00 00                       DP      void near ostream::osfx()
 0b39  42 6f 73 66 78 0f 67 02                 - Bosfx.g.
 0b41  21                                      - !
 0b42  00 00 00 00 00 00                       DP      int near ostream::opfx()
 0b48  40 6f 70 66 78 16 67 02                 - @opfx.g.
 0b50  21                                      - !
 0b51  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( ios near & (near *)( ))
 0b57  80 9e 6f 70 65 72 61 74                 - ..operat
 0b5f  6f 72 3c 3c 16 67 02 21                 - or<<.g.!
 0b67  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( ostream near & (near *)( ))
 0b6d  80 99 6f 70 65 72 61 74                 - ..operat
 0b75  6f 72 3c 3c 16 67 02 21                 - or<<.g.!
 0b7d  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( char unsigned const near * )
 0b83  80 95 6f 70 65 72 61 74                 - ..operat
 0b8b  6f 72 3c 3c 16 67 02 21                 - or<<.g.!
 0b93  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( char signed const near * )
 0b99  80 92 6f 70 65 72 61 74                 - ..operat
 0ba1  6f 72 3c 3c 16 67 02 21                 - or<<.g.!
 0ba9  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( char const near * )
 0baf  80 8f 6f 70 65 72 61 74                 - ..operat
 0bb7  6f 72 3c 3c 15 67 02 21                 - or<<.g.!
 0bbf  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( streambuf near * )
 0bc5  6f 6f 70 65 72 61 74 6f                 - ooperato
 0bcd  72 3c 3c 16 67 02 21                    - r<<.g.!
 0bd4  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( void near * )
 0bda  80 8d 6f 70 65 72 61 74                 - ..operat
 0be2  6f 72 3c 3c 16 67 02 21                 - or<<.g.!
 0bea  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( long double )
 0bf0  80 8b 6f 70 65 72 61 74                 - ..operat
 0bf8  6f 72 3c 3c 16 67 02 21                 - or<<.g.!
 0c00  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( double )
 0c06  80 88 6f 70 65 72 61 74                 - ..operat
 0c0e  6f 72 3c 3c 16 67 02 21                 - or<<.g.!
 0c16  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( float )
 0c1c  80 86 6f 70 65 72 61 74                 - ..operat
 0c24  6f 72 3c 3c 16 67 02 21                 - or<<.g.!
 0c2c  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( long unsigned )
 0c32  80 84 6f 70 65 72 61 74                 - ..operat
 0c3a  6f 72 3c 3c 16 67 02 21                 - or<<.g.!
 0c42  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( long )
 0c48  80 82 6f 70 65 72 61 74                 - ..operat
 0c50  6f 72 3c 3c 16 67 02 21                 - or<<.g.!
 0c58  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( int unsigned )
 0c5e  80 80 6f 70 65 72 61 74                 - ..operat
 0c66  6f 72 3c 3c 15 67 02 21                 - or<<.g.!
 0c6e  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( int )
 0c74  7e 6f 70 65 72 61 74 6f                 - ~operato
 0c7c  72 3c 3c 15 67 02 21                    - r<<.g.!
 0c83  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( short unsigned )
 0c89  7c 6f 70 65 72 61 74 6f                 - |operato
 0c91  72 3c 3c 15 67 02 21                    - r<<.g.!
 0c98  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( short )
 0c9e  7a 6f 70 65 72 61 74 6f                 - zoperato
 0ca6  72 3c 3c 15 67 02 21                    - r<<.g.!
 0cad  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( char unsigned )
 0cb3  78 6f 70 65 72 61 74 6f                 - xoperato
 0cbb  72 3c 3c 15 67 02 21                    - r<<.g.!
 0cc2  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( char signed )
 0cc8  76 6f 70 65 72 61 74 6f                 - voperato
 0cd0  72 3c 3c 15 67 02 21                    - r<<.g.!
 0cd7  00 00 00 00 00 00                       DP      ostream near & near ostream::operator <<( char )
 0cdd  74 6f 70 65 72 61 74 6f                 - toperato
 0ce5  72 3c 3c 14 67 02 21                    - r<<.g.!
 0cec  00 00 00 00 00 00                       DP      ostream near & near ostream::operator =( ostream const near & )
 0cf2  72 6f 70 65 72 61 74 6f                 - roperato
 0cfa  72 3d 14 67 02 21                       - r=.g.!
 0d00  00 00 00 00 00 00                       DP      ostream near & near ostream::operator =( streambuf near * )
 0d06  6f 6f 70 65 72 61 74 6f                 - ooperato
 0d0e  72 3d 1f 67 02 93 22 04                 - r=.g..".
 0d16  69 61 22 00 69 61 21                    - ia".ia!
 0d1d  00 00 00 00 00 00                       DP      int near ios::fail() const
 0d23  68 01 66 58 7e 6f 73 74                 - h.fX~ost
 0d2b  72 65 61 6d 12 67 02 21                 - ream.g.!
 0d33  00 00 00 00 00 00                       DP      near ostream::ostream( ostream const near & )
 0d39  6d 6f 73 74 72 65 61 6d                 - mostream
 0d41  12 67 02 21                             - .g.!
 0d45  00 00 00 00 00 00                       DP      near ostream::ostream( streambuf near * )
 0d4b  69 6f 73 74 72 65 61 6d                 - iostream
 0d53  0f 67 01 84 22 04 69 3e                 - .g..".i>
 0d5b  5f 5f 76 66 70 74 72 0c                 - __vfptr.
 0d63  67 01 6b 65 5f 5f 76 62                 - g.ke__vb
 0d6b  70 74 72 08 60 02 00 38                 - ptr.`..8
 0d73  00 00 00 0a 69 86 61 22                 - ....i.a"
 0d7b  04 69 61 80 9a 06 69 22                 - .ia...i"
 0d83  00 80 ab 03 46 6b 04 48                 - ....Fk.H
 0d8b  80 9a 06 72 80 ae 01 64                 - ...r...d
 0d93  04 48 80 9a 08 12 00 80                 - .H......
 0d9b  9a 69 6f 73 04 48 80 b1                 - .ios.H..
 0da3  07 72 80 b0 01 80 b2 04                 - .r......
 0dab  48 80 b1 04 48 80 b1 07                 - H...H...
 0db3  72 80 b4 01 80 b5 04 72                 - r......r
 0dbb  57 00 07 72 80 ad 01 80                 - W..r....
 0dc3  ad 05 72 80 ad 00 04 72                 - ..r....r
 0dcb  64 00 04 72 31 00 05 72                 - d..r1..r
 0dd3  31 01 31 06 72 25 02 25                 - 1.1.r%.%
 0ddb  25 05 72 25 01 25 04 72                 - %.r%.%.r
 0de3  25 00 05 72 06 01 06 04                 - %..r....
 0deb  72 06 00 03 48 0e 06 72                 - r...H..r
 0df3  80 c2 01 0c 03 48 57 06                 - .....HW.
 0dfb  72 80 c4 01 0c 04 72 25                 - r.....r%
 0e03  00 04 48 80 9a 05 72 80                 - ..H...r.
 0e0b  c7 00 05 72 12 01 64 05                 - ...r..d.
 0e13  72 12 01 31 08 60 32 00                 - r..1.`2.
 0e1b  2c 00 00 00 14 67 04 21                 - ,....g.!
 0e23  00 00 00 00 00 00                       DP      void near ios::setstate( int )
 0e29  80 ca 73 65 74 73 74 61                 - ..setsta
 0e31  74 65 10 67 04 21                       - te.g.!
 0e37  00 00 00 00 00 00                       DP      void near ios::init( streambuf near * )
 0e3d  80 c9 69 6e 69 74 0f 67                 - ..init.g
 0e45  04 21                                   - .!
 0e47  00 00 00 00 00 00                       DP      near ios::ios()
 0e4d  80 c8 69 6f 73 12 67 02                 - ..ios.g.
 0e55  21                                      - !
 0e56  00 00 00 00 00 00                       DP      int near ios::xalloc()
 0e5c  80 aa 78 61 6c 6c 6f 63                 - ..xalloc
 0e64  14 67 02 21                             - .g.!
 0e68  00 00 00 00 00 00                       DP      long near ios::bitalloc()
 0e6e  80 c6 62 69 74 61 6c 6c                 - ..bitall
 0e76  6f 63 1a 67 02 21                       - oc.g.!
 0e7c  00 00 00 00 00 00                       DP      void near ios::sync_with_stdio()
 0e82  42 73 79 6e 63 5f 77 69                 - Bsync_wi
 0e8a  74 68 5f 73 74 64 69 6f                 - th_stdio
 0e92  11 67 02 21                             - .g.!
 0e96  00 00 00 00 00 00                       DP      void near * near & near ios::pword( int )
 0e9c  80 c5 70 77 6f 72 64 11                 - ..pword.
 0ea4  67 02 21                                - g.!
 0ea7  00 00 00 00 00 00                       DP      long near & near ios::iword( int )
 0ead  80 c3 69 77 6f 72 64 10                 - ..iword.
 0eb5  67 02 21                                - g.!
 0eb8  00 00 00 00 00 00                       DP      int near ios::width() const
 0ebe  3f 77 69 64 74 68 10 67                 - ?width.g
 0ec6  02 21                                   - .!
 0ec8  00 00 00 00 00 00                       DP      int near ios::width( int )
 0ece  44 77 69 64 74 68 14 67                 - Dwidth.g
 0ed6  02 21                                   - .!
 0ed8  00 00 00 00 00 00                       DP      int near ios::precision() const
 0ede  3f 70 72 65 63 69 73 69                 - ?precisi
 0ee6  6f 6e 14 67 02 21                       - on.g.!
 0eec  00 00 00 00 00 00                       DP      int near ios::precision( int )
 0ef2  44 70 72 65 63 69 73 69                 - Dprecisi
 0efa  6f 6e 10 67 02 21                       - on.g.!
 0f00  00 00 00 00 00 00                       DP      char near ios::fill() const
 0f06  80 c1 66 69 6c 6c 10 67                 - ..fill.g
 0f0e  02 21                                   - .!
 0f10  00 00 00 00 00 00                       DP      char near ios::fill( char )
 0f16  80 c0 66 69 6c 6c 11 67                 - ..fill.g
 0f1e  02 21                                   - .!
 0f20  00 00 00 00 00 00                       DP      long near ios::flags() const
 0f26  80 bf 66 6c 61 67 73 11                 - ..flags.
 0f2e  67 02 21                                - g.!
 0f31  00 00 00 00 00 00                       DP      long near ios::flags( long )
 0f37  80 be 66 6c 61 67 73 12                 - ..flags.
 0f3f  67 02 21                                - g.!
 0f42  00 00 00 00 00 00                       DP      long near ios::unsetf( long )
 0f48  80 be 75 6e 73 65 74 66                 - ..unsetf
 0f50  10 67 02 21                             - .g.!
 0f54  00 00 00 00 00 00                       DP      long near ios::setf( long )
 0f5a  80 be 73 65 74 66 10 67                 - ..setf.g
 0f62  02 21                                   - .!
 0f64  00 00 00 00 00 00                       DP      long near ios::setf( long, long )
 0f6a  80 bd 73 65 74 66 16 67                 - ..setf.g
 0f72  02 21                                   - .!
 0f74  00 00 00 00 00 00                       DP      int near ios::exceptions() const
 0f7a  80 bb 65 78 63 65 70 74                 - ..except
 0f82  69 6f 6e 73 16 67 02 21                 - ions.g.!
 0f8a  00 00 00 00 00 00                       DP      int near ios::exceptions( int )
 0f90  80 bc 65 78 63 65 70 74                 - ..except
 0f98  69 6f 6e 73 0e 67 02 21                 - ions.g.!
 0fa0  00 00 00 00 00 00                       DP      int near ios::eof() const
 0fa6  3f 65 6f 66 0f 67 02 21                 - ?eof.g.!
 0fae  00 00 00 00 00 00                       DP      int near ios::fail() const
 0fb4  3f 66 61 69 6c 0e 67 02                 - ?fail.g.
 0fbc  21                                      - !
 0fbd  00 00 00 00 00 00                       DP      int near ios::bad() const
 0fc3  3f 62 61 64 0f 67 02 21                 - ?bad.g.!
 0fcb  00 00 00 00 00 00                       DP      int near ios::good() const
 0fd1  3f 67 6f 6f 64 11 67 02                 - ?good.g.
 0fd9  21                                      - !
 0fda  00 00 00 00 00 00                       DP      int near ios::clear( int )
 0fe0  80 bc 63 6c 65 61 72 13                 - ..clear.
 0fe8  67 02 21                                - g.!
 0feb  00 00 00 00 00 00                       DP      int near ios::rdstate() const
 0ff1  80 bb 72 64 73 74 61 74                 - ..rdstat
 0ff9  65 11 67 02 21                          - e.g.!
 0ffe  00 00 00 00 00 00                       DP      streambuf near * near ios::rdbuf() const
 1004  80 ba 72 64 62 75 66 0f                 - ..rdbuf.
 100c  67 02 21                                - g.!
 100f  00 00 00 00 00 00                       DP      ostream near * near ios::tie() const
 1015  80 b9 74 69 65 0f 67 02                 - ..tie.g.
 101d  21                                      - !
 101e  00 00 00 00 00 00                       DP      ostream near * near ios::tie( ostream near * )
 1024  80 b8 74 69 65 14 67 02                 - ..tie.g.
 102c  21                                      - !
 102d  00 00 00 00 00 00                       DP      int near ios::operator !() const
 1033  3f 6f 70 65 72 61 74 6f                 - ?operato
 103b  72 21 1c 67 02 21                       - r!.g.!
 1041  00 00 00 00 00 00                       DP      near ios::operator void near * () const
 1047  80 b7 6f 70 65 72 61 74                 - ..operat
 104f  6f 72 20 76 6f 69 64 20                 - or void 
 1057  2a 20 15 67 02 21                       - * .g.!
 105d  00 00 00 00 00 00                       DP      ios near & near ios::operator =( ios const near & )
 1063  80 b6 6f 70 65 72 61 74                 - ..operat
 106b  6f 72 3d 1b 67 02 93 22                 - or=.g.."
 1073  28 69 61 22 00 69 61 21                 - (ia".ia!
 107b  00 00 00 00 00 00                       DP      int near ios::fail() const
 1081  68 01 66 58 7e 69 6f 73                 - h.fX~ios
 1089  0f 67 02 21                             - .g.!
 108d  00 00 00 00 00 00                       DP      near ios::ios( ios const near & )
 1093  80 b3 69 6f 73 0f 67 02                 - ..ios.g.
 109b  21                                      - !
 109c  00 00 00 00 00 00                       DP      near ios::ios( streambuf near * )
 10a2  80 af 69 6f 73 0f 67 01                 - ..ios.g.
 10aa  84 22 28 69 3e 5f 5f 76                 - ."(i>__v
 10b2  66 70 74 72 1d 67 08 21                 - fptr.g.!
 10ba  00 00 00 00 00 00                       DP      long near ios::__last_format_flag
 10c0  25 5f 5f 6c 61 73 74 5f                 - %__last_
 10c8  66 6f 72 6d 61 74 5f 66                 - format_f
 10d0  6c 61 67 19 67 08 21                    - lag.g.!
 10d7  00 00 00 00 00 00                       DP      int near ios::__xalloc_index
 10dd  0c 5f 5f 78 61 6c 6c 6f                 - .__xallo
 10e5  63 5f 69 6e 64 65 78 18                 - c_index.
 10ed  67 08 84 22 24 69 06 5f                 - g.."$i._
 10f5  5f 66 69 6c 6c 5f 63 68                 - _fill_ch
 10fd  61 72 61 63 74 65 72 15                 - aracter.
 1105  67 08 84 22 20 69 57 5f                 - g.." iW_
 110d  5f 78 61 6c 6c 6f 63 5f                 - _xalloc_
 1115  6c 69 73 74 15 67 08 84                 - list.g..
 111d  22 1c 69 0c 5f 5f 66 69                 - ".i.__fi
 1125  65 6c 64 5f 77 69 64 74                 - eld_widt
 112d  68 19 67 08 84 22 18 69                 - h.g..".i
 1135  0c 5f 5f 66 6c 6f 61 74                 - .__float
 113d  5f 70 72 65 63 69 73 69                 - _precisi
 1145  6f 6e 1c 67 08 84 22 14                 - on.g..".
 114d  69 0c 5f 5f 65 6e 61 62                 - i.__enab
 1155  6c 65 64 5f 65 78 63 65                 - led_exce
 115d  70 74 69 6f 6e 73 15 67                 - ptions.g
 1165  08 84 22 10 69 0c 5f 5f                 - ..".i.__
 116d  65 72 72 6f 72 5f 73 74                 - error_st
 1175  61 74 65 16 67 08 84 22                 - ate.g.."
 117d  0c 69 0e 5f 5f 66 6f 72                 - .i.__for
 1185  6d 61 74 5f 66 6c 61 67                 - mat_flag
 118d  73 16 67 08 84 22 08 69                 - s.g..".i
 1195  80 ad 5f 5f 74 69 65 64                 - ..__tied
 119d  5f 73 74 72 65 61 6d 11                 - _stream.
 11a5  67 08 84 22 04 69 64 5f                 - g..".id_
 11ad  5f 73 74 72 6d 62 75 66                 - _strmbuf
 11b5  13 67 02 21                             - .g.!
 11b9  00 00 00 00 00 00                       DP      __lock near * near ios::__x_lock
 11bf  3a 5f 5f 78 5f 6c 6f 63                 - :__x_loc
 11c7  6b 0c 61 00 3a 5f 5f 69                 - k.a.:__i
 11cf  5f 6c 6f 63 6b 04 46 80                 - _lock.F.
 11d7  9a 04 46 80 9a 0c 12 04                 - ..F.....
 11df  81 1d 69 73 74 72 65 61                 - ..istrea
 11e7  6d 05 12 00 81 1c 04 48                 - m......H
 11ef  80 ce 06 72 80 d0 01 64                 - ...r...d
 11f7  04 48 80 ce 0c 12 00 80                 - .H......
 11ff  ce 69 73 74 72 65 61 6d                 - .istream
 1207  04 48 80 d3 07 72 80 d2                 - .H...r..
 120f  01 80 d4 04 48 80 d3 06                 - ....H...
 1217  72 80 d6 01 64 04 48 80                 - r...d.H.
 121f  d3 04 48 80 d3 07 72 80                 - ..H...r.
 1227  d8 01 80 d9 04 48 80 d3                 - .....H..
 122f  06 72 80 db 01 3b 04 48                 - .r...;.H
 1237  80 d3 03 46 07 07 72 80                 - ...F..r.
 123f  dd 01 80 de 04 48 80 d3                 - .....H..
 1247  03 46 08 07 72 80 e0 01                 - .F..r...
 124f  80 e1 04 48 80 d3 03 48                 - ...H...H
 1257  06 07 72 80 e3 01 80 e4                 - ..r.....
 125f  04 48 80 d3 03 48 07 07                 - .H...H..
 1267  72 80 e6 01 80 e7 04 48                 - r......H
 126f  80 d3 03 48 08 07 72 80                 - ...H..r.
 1277  e9 01 80 ea 04 48 80 d3                 - .....H..
 127f  03 48 0a 07 72 80 ec 01                 - .H..r...
 1287  80 ed 04 48 80 d3 03 48                 - ...H...H
 128f  0b 07 72 80 ef 01 80 f0                 - ..r.....
 1297  04 48 80 d3 03 48 0c 07                 - .H...H..
 129f  72 80 f2 01 80 f3 04 48                 - r......H
 12a7  80 d3 03 48 0d 07 72 80                 - ...H..r.
 12af  f5 01 80 f6 04 48 80 d3                 - .....H..
 12b7  03 48 0e 07 72 80 f8 01                 - .H..r...
 12bf  80 f9 04 48 80 d3 03 48                 - ...H...H
 12c7  0f 07 72 80 fb 01 80 fc                 - ..r.....
 12cf  04 48 80 d3 03 48 10 07                 - .H...H..
 12d7  72 80 fe 01 80 ff 04 48                 - r......H
 12df  80 d3 03 48 11 07 72 81                 - ...H..r.
 12e7  01 01 81 02 04 48 80 d3                 - .....H..
 12ef  04 48 80 8a 07 72 81 04                 - .H...r..
 12f7  01 81 05 04 48 80 d3 07                 - ....H...
 12ff  72 81 07 01 80 9d 04 48                 - r......H
 1307  80 d3 07 72 80 d3 01 80                 - ...r....
 130f  d3 04 46 81 0a 07 72 81                 - ..F...r.
 1317  09 01 81 0b 05 72 0c 01                 - .....r..
 131f  0c 08 72 80 d3 03 3b 0c                 - ..r...;.
 1327  06 09 72 80 d3 03 80 de                 - ..r.....
 132f  0c 06 09 72 80 d3 03 80                 - ...r....
 1337  e1 0c 06 03 48 4c 08 72                 - ....HL.r
 133f  80 d3 02 81 11 06 07 72                 - .......r
 1347  80 d3 02 0c 0c 07 72 80                 - ......r.
 134f  d3 02 3b 0c 08 72 80 d3                 - ..;..r..
 1357  02 80 de 0c 08 72 80 d3                 - .....r..
 135f  02 80 e1 0c 06 72 80 d3                 - .....r..
 1367  01 38 07 72 80 d3 02 37                 - .8.r...7
 136f  29 06 72 80 d3 01 06 04                 - ).r.....
 1377  48 80 ce 05 72 81 1a 00                 - H...r...
 137f  08 60 3a 00 3c 00 00 00                 - .`:.<...
 1387  13 67 04 21                             - .g.!
 138b  00 00 00 00 00 00                       DP      int near istream::do_ipfx( int )
 1391  81 0d 64 6f 5f 69 70 66                 - ..do_ipf
 1399  78 10 67 04 21                          - x.g.!
 139e  00 00 00 00 00 00                       DP      int near istream::ipfx1()
 13a4  40 69 70 66 78 31 10 67                 - @ipfx1.g
 13ac  04 21                                   - .!
 13ae  00 00 00 00 00 00                       DP      int near istream::ipfx0()
 13b4  40 69 70 66 78 30 13 67                 - @ipfx0.g
 13bc  04 21                                   - .!
 13be  00 00 00 00 00 00                       DP      istream near & near istream::do_read( char near *, int )
 13c4  81 14 64 6f 5f 72 65 61                 - ..do_rea
 13cc  64 15 67 04 21                          - d.g.!
 13d1  00 00 00 00 00 00                       DP      istream near & near istream::do_rshift( char near & )
 13d7  80 e5 64 6f 5f 72 73 68                 - ..do_rsh
 13df  69 66 74 12 67 04 21                    - ift.g.!
 13e6  00 00 00 00 00 00                       DP      istream near & near istream::do_get( char near & )
 13ec  80 e5 64 6f 5f 67 65 74                 - ..do_get
 13f4  13 67 04 21                             - .g.!
 13f8  00 00 00 00 00 00                       DP      void near istream::eatwhite()
 13fe  3c 65 61 74 77 68 69 74                 - <eatwhit
 1406  65 13 67 04 21                          - e.g.!
 140b  00 00 00 00 00 00                       DP      near istream::istream()
 1411  81 1b 69 73 74 72 65 61                 - ..istrea
 1419  6d 10 67 02 21                          - m.g.!
 141e  00 00 00 00 00 00                       DP      int near istream::sync()
 1424  80 aa 73 79 6e 63 10 67                 - ..sync.g
 142c  02 21                                   - .!
 142e  00 00 00 00 00 00                       DP      int near istream::peek()
 1434  80 aa 70 65 65 6b 11 67                 - ..peek.g
 143c  02 21                                   - .!
 143e  00 00 00 00 00 00                       DP      int near istream::gcount() const
 1444  3f 67 63 6f 75 6e 74 11                 - ?gcount.
 144c  67 02 21                                - g.!
 144f  00 00 00 00 00 00                       DP      long near istream::tellg()
 1455  80 a5 74 65 6c 6c 67 13                 - ..tellg.
 145d  67 02 21                                - g.!
 1460  00 00 00 00 00 00                       DP      istream near & near istream::putback( char )
 1466  81 19 70 75 74 62 61 63                 - ..putbac
 146e  6b 11 67 02 21                          - k.g.!
 1473  00 00 00 00 00 00                       DP      istream near & near istream::seekg( long, int )
 1479  81 18 73 65 65 6b 67 11                 - ..seekg.
 1481  67 02 21                                - g.!
 1484  00 00 00 00 00 00                       DP      istream near & near istream::seekg( long )
 148a  81 17 73 65 65 6b 67 10                 - ..seekg.
 1492  67 02 21                                - g.!
 1495  00 00 00 00 00 00                       DP      istream near & near istream::read( char unsigned near *, int )
 149b  81 16 72 65 61 64 10 67                 - ..read.g
 14a3  02 21                                   - .!
 14a5  00 00 00 00 00 00                       DP      istream near & near istream::read( char signed near *, int )
 14ab  81 15 72 65 61 64 10 67                 - ..read.g
 14b3  02 21                                   - .!
 14b5  00 00 00 00 00 00                       DP      istream near & near istream::read( char near *, int )
 14bb  81 14 72 65 61 64 12 67                 - ..read.g
 14c3  02 21                                   - .!
 14c5  00 00 00 00 00 00                       DP      istream near & near istream::ignore( int, int )
 14cb  81 13 69 67 6e 6f 72 65                 - ..ignore
 14d3  13 67 02 21                             - .g.!
 14d7  00 00 00 00 00 00                       DP      istream near & near istream::getline( char unsigned near *, int, char )
 14dd  81 10 67 65 74 6c 69 6e                 - ..getlin
 14e5  65 13 67 02 21                          - e.g.!
 14ea  00 00 00 00 00 00                       DP      istream near & near istream::getline( char signed near *, int, char )
 14f0  81 0f 67 65 74 6c 69 6e                 - ..getlin
 14f8  65 13 67 02 21                          - e.g.!
 14fd  00 00 00 00 00 00                       DP      istream near & near istream::getline( char near *, int, char )
 1503  81 0e 67 65 74 6c 69 6e                 - ..getlin
 150b  65 0f 67 02 21                          - e.g.!
 1510  00 00 00 00 00 00                       DP      istream near & near istream::get( streambuf near &, char )
 1516  81 12 67 65 74 0f 67 02                 - ..get.g.
 151e  21                                      - !
 151f  00 00 00 00 00 00                       DP      istream near & near istream::get( char unsigned near & )
 1525  80 eb 67 65 74 0f 67 02                 - ..get.g.
 152d  21                                      - !
 152e  00 00 00 00 00 00                       DP      istream near & near istream::get( char signed near & )
 1534  80 e8 67 65 74 0f 67 02                 - ..get.g.
 153c  21                                      - !
 153d  00 00 00 00 00 00                       DP      istream near & near istream::get( char near & )
 1543  80 e5 67 65 74 0f 67 02                 - ..get.g.
 154b  21                                      - !
 154c  00 00 00 00 00 00                       DP      istream near & near istream::get( char unsigned near *, int, char )
 1552  81 10 67 65 74 0f 67 02                 - ..get.g.
 155a  21                                      - !
 155b  00 00 00 00 00 00                       DP      istream near & near istream::get( char signed near *, int, char )
 1561  81 0f 67 65 74 0f 67 02                 - ..get.g.
 1569  21                                      - !
 156a  00 00 00 00 00 00                       DP      istream near & near istream::get( char near *, int, char )
 1570  81 0e 67 65 74 0f 67 02                 - ..get.g.
 1578  21                                      - !
 1579  00 00 00 00 00 00                       DP      int near istream::get()
 157f  80 aa 67 65 74 0f 67 02                 - ..get.g.
 1587  21                                      - !
 1588  00 00 00 00 00 00                       DP      void near istream::isfx()
 158e  42 69 73 66 78 10 67 02                 - Bisfx.g.
 1596  21                                      - !
 1597  00 00 00 00 00 00                       DP      int near istream::ipfx( int )
 159d  81 0d 69 70 66 78 16 67                 - ..ipfx.g
 15a5  02 21                                   - .!
 15a7  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( istream near & (near *)( ))
 15ad  81 0c 6f 70 65 72 61 74                 - ..operat
 15b5  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 15bd  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( ios near & (near *)( ))
 15c3  81 08 6f 70 65 72 61 74                 - ..operat
 15cb  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 15d3  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( streambuf near * )
 15d9  80 d7 6f 70 65 72 61 74                 - ..operat
 15e1  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 15e9  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( long double near & )
 15ef  81 06 6f 70 65 72 61 74                 - ..operat
 15f7  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 15ff  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( double near & )
 1605  81 03 6f 70 65 72 61 74                 - ..operat
 160d  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 1615  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( float near & )
 161b  81 00 6f 70 65 72 61 74                 - ..operat
 1623  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 162b  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( long unsigned near & )
 1631  80 fd 6f 70 65 72 61 74                 - ..operat
 1639  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 1641  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( long near & )
 1647  80 fa 6f 70 65 72 61 74                 - ..operat
 164f  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 1657  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( int unsigned near & )
 165d  80 f7 6f 70 65 72 61 74                 - ..operat
 1665  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 166d  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( int near & )
 1673  80 f4 6f 70 65 72 61 74                 - ..operat
 167b  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 1683  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( short unsigned near & )
 1689  80 f1 6f 70 65 72 61 74                 - ..operat
 1691  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 1699  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( short near & )
 169f  80 ee 6f 70 65 72 61 74                 - ..operat
 16a7  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 16af  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( char unsigned near & )
 16b5  80 eb 6f 70 65 72 61 74                 - ..operat
 16bd  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 16c5  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( char signed near & )
 16cb  80 e8 6f 70 65 72 61 74                 - ..operat
 16d3  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 16db  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( char near & )
 16e1  80 e5 6f 70 65 72 61 74                 - ..operat
 16e9  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 16f1  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( char unsigned near * )
 16f7  80 e2 6f 70 65 72 61 74                 - ..operat
 16ff  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 1707  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( char signed near * )
 170d  80 df 6f 70 65 72 61 74                 - ..operat
 1715  6f 72 3e 3e 16 67 02 21                 - or>>.g.!
 171d  00 00 00 00 00 00                       DP      istream near & near istream::operator >>( char near * )
 1723  80 dc 6f 70 65 72 61 74                 - ..operat
 172b  6f 72 3e 3e 15 67 02 21                 - or>>.g.!
 1733  00 00 00 00 00 00                       DP      istream near & near istream::operator =( istream const near & )
 1739  80 da 6f 70 65 72 61 74                 - ..operat
 1741  6f 72 3d 15 67 02 21                    - or=.g.!
 1748  00 00 00 00 00 00                       DP      istream near & near istream::operator =( streambuf near * )
 174e  80 d7 6f 70 65 72 61 74                 - ..operat
 1756  6f 72 3d 1f 67 02 93 22                 - or=.g.."
 175e  08 69 61 22 00 69 61 21                 - .ia".ia!
 1766  00 00 00 00 00 00                       DP      istream near & near istream::get( char unsigned near & )
 176c  68 01 66 58 7e 69 73 74                 - h.fX~ist
 1774  72 65 61 6d 13 67 02 21                 - ream.g.!
 177c  00 00 00 00 00 00                       DP      near istream::istream( istream const near & )
 1782  80 d5 69 73 74 72 65 61                 - ..istrea
 178a  6d 13 67 02 21                          - m.g.!
 178f  00 00 00 00 00 00                       DP      near istream::istream( streambuf near * )
 1795  80 d1 69 73 74 72 65 61                 - ..istrea
 179d  6d 0f 67 01 84 22 08 69                 - m.g..".i
 17a5  3e 5f 5f 76 66 70 74 72                 - >__vfptr
 17ad  0c 67 01 6b 65 5f 5f 76                 - .g.ke__v
 17b5  62 70 74 72 1a 67 08 84                 - bptr.g..
 17bd  22 04 69 0c 5f 5f 6c 61                 - ".i.__la
 17c5  73 74 5f 72 65 61 64 5f                 - st_read_
 17cd  6c 65 6e 67 74 68 08 60                 - length.`
 17d5  02 00 3c 00 00 00 0a 69                 - ..<....i
 17dd  86 61 22 04 69 61 80 9a                 - .a".ia..
 17e5  06 69 22 00 81 1c 04 46                 - .i"....F
 17ed  80 ce 04 46 80 ce 03 46                 - ...F...F
 17f5  66 0d 12 04 81 58 69 66                 - f....Xif
 17fd  73 74 72 65 61 6d 05 12                 - stream..
 1805  00 81 57 04 48 81 21 05                 - ..W.H.!.
 180d  72 81 23 00 04 48 81 21                 - r.#..H.!
 1815  08 72 81 25 03 45 2d 0c                 - .r.%.E-.
 181d  04 48 81 21 06 72 81 27                 - .H.!.r.'
 1825  01 21 04 48 81 21 08 72                 - .!.H.!.r
 182d  81 29 03 21 3b 0c 07 72                 - .).!;..r
 1835  12 03 45 2d 0c 04 48 81                 - ..E-..H.
 183d  21 04 48 81 21 07 72 81                 - !.H.!.r.
 1845  2c 01 81 2d 04 20 04 06                 - ,..-. ..
 184d  0c 12 04 81 43 66 69 6c                 - ....Cfil
 1855  65 62 75 66 04 48 81 30                 - ebuf.H.0
 185d  05 72 81 31 00 04 48 81                 - .r.1..H.
 1865  30 06 72 81 33 01 21 04                 - 0.r.3.!.
 186d  48 81 30 08 72 81 35 03                 - H.0.r.5.
 1875  21 3b 0c 04 72 21 00 0c                 - !;..r!..
 187d  12 00 81 30 66 69 6c 65                 - ...0file
 1885  62 75 66 04 46 81 38 06                 - buf.F.8.
 188d  72 81 39 01 21 08 72 81                 - r.9.!.r.
 1895  39 03 45 2d 0c 05 72 81                 - 9.E-..r.
 189d  39 00 0d 12 00 52 73 74                 - 9....Rst
 18a5  72 65 61 6d 62 75 66 04                 - reambuf.
 18ad  46 81 3d 07 72 81 3e 02                 - F.=.r.>.
 18b5  3b 0c 04 48 81 30 04 48                 - ;..H.0.H
 18bd  81 30 07 72 81 40 01 81                 - .0.r.@..
 18c5  41 08 60 18 00 3c 00 00                 - A.`..<..
 18cd  00 05 69 22 00 52 15 67                 - ..i".R.g
 18d5  02 21                                   - .!
 18d7  00 00 00 00 00 00                       DP      filebuf near & near filebuf::operator =( filebuf near & )
 18dd  81 42 6f 70 65 72 61 74                 - .Boperat
 18e5  6f 72 3d 13 67 02 21                    - or=.g.!
 18ec  00 00 00 00 00 00                       DP      near filebuf::filebuf( filebuf near & )
 18f2  81 42 66 69 6c 65 62 75                 - .Bfilebu
 18fa  66 1b 67 02 93 22 28 69                 - f.g.."(i
 1902  61 22 20 69 61 21                       - a" ia!
 1908  00 00 00 00 00 00                       DP      int near ifstream::__defarg()
 190e  68 01 66 51 73 79 6e 63                 - h.fQsync
 1916  1e 67 02 93 22 28 69 61                 - .g.."(ia
 191e  22 18 69 61 21                          - ".ia!
 1923  00 00 00 00 00 00                       DP      int near ifstream::__defarg()
 1929  68 01 66 4f 73 65 65 6b                 - h.fOseek
 1931  6f 66 66 1e 67 02 93 22                 - off.g.."
 1939  28 69 61 22 14 69 61 21                 - (ia".ia!
 1941  00 00 00 00 00 00                       DP      int near ifstream::__defarg()
 1947  68 01 66 81 3f 73 65 74                 - h.f.?set
 194f  62 75 66 20 67 02 93 22                 - buf g.."
 1957  28 69 61 22 10 69 61 21                 - (ia".ia!
 195f  00 00 00 00 00 00                       DP      int near ifstream::__defarg()
 1965  68 01 66 51 75 6e 64 65                 - h.fQunde
 196d  72 66 6c 6f 77 1f 67 02                 - rflow.g.
 1975  93 22 28 69 61 22 0c 69                 - ."(ia".i
 197d  61 21                                   - a!
 197f  00 00 00 00 00 00                       DP      int near ifstream::__defarg()
 1985  68 01 66 49 6f 76 65 72                 - h.fIover
 198d  66 6c 6f 77 20 67 02 93                 - flow g..
 1995  22 28 69 61 22 08 69 61                 - "(ia".ia
 199d  21                                      - !
 199e  00 00 00 00 00 00                       DP      int near ifstream::__defarg()
 19a4  68 01 66 49 70 62 61 63                 - h.fIpbac
 19ac  6b 66 61 69 6c 11 67 02                 - kfail.g.
 19b4  21                                      - !
 19b5  00 00 00 00 00 00                       DP      filebuf near * near filebuf::close()
 19bb  81 3c 63 6c 6f 73 65 10                 - .<close.
 19c3  67 02 21                                - g.!
 19c6  00 00 00 00 00 00                       DP      filebuf near * near filebuf::open( char const near *, int, int )
 19cc  81 3b 6f 70 65 6e 12 67                 - .;open.g
 19d4  02 21                                   - .!
 19d6  00 00 00 00 00 00                       DP      filebuf near * near filebuf::attach( int )
 19dc  81 3a 61 74 74 61 63 68                 - .:attach
 19e4  0e 67 02 21                             - .g.!
 19e8  00 00 00 00 00 00                       DP      int near filebuf::fd() const
 19ee  81 37 66 64 12 67 02 21                 - .7fd.g.!
 19f6  00 00 00 00 00 00                       DP      int near filebuf::is_open() const
 19fc  3f 69 73 5f 6f 70 65 6e                 - ?is_open
 1a04  1f 67 02 93 22 28 69 61                 - .g.."(ia
 1a0c  22 24 69 61 21                          - "$ia!
 1a11  00 00 00 00 00 00                       DP      int near ifstream::__defarg()
 1a17  68 01 66 58 7e 66 69 6c                 - h.fX~fil
 1a1f  65 62 75 66 13 67 02 21                 - ebuf.g.!
 1a27  00 00 00 00 00 00                       DP      near filebuf::filebuf( int, char near *, int )
 1a2d  81 36 66 69 6c 65 62 75                 - .6filebu
 1a35  66 13 67 02 21                          - f.g.!
 1a3a  00 00 00 00 00 00                       DP      near filebuf::filebuf( int )
 1a40  81 34 66 69 6c 65 62 75                 - .4filebu
 1a48  66 13 67 02 21                          - f.g.!
 1a4d  00 00 00 00 00 00                       DP      near filebuf::filebuf()
 1a53  81 32 66 69 6c 65 62 75                 - .2filebu
 1a5b  66 0f 67 01 84 22 28 69                 - f.g.."(i
 1a63  3e 5f 5f 76 66 70 74 72                 - >__vfptr
 1a6b  14 68 08 84 22 39 69 00                 - .h.."9i.
 1a73  01 06 5f 5f 61 74 74 61                 - ..__atta
 1a7b  63 68 65 64 1e 67 08 84                 - ched.g..
 1a83  22 34 69 81 2f 5f 5f 75                 - "4i./__u
 1a8b  6e 62 75 66 66 65 72 65                 - nbuffere
 1a93  64 5f 67 65 74 5f 61 72                 - d_get_ar
 1a9b  65 61 13 67 08 84 22 30                 - ea.g.."0
 1aa3  69 2d 5f 5f 66 69 6c 65                 - i-__file
 1aab  5f 6d 6f 64 65 15 67 08                 - _mode.g.
 1ab3  84 22 2c 69 21 5f 5f 66                 - .",i!__f
 1abb  69 6c 65 5f 68 61 6e 64                 - ile_hand
 1ac3  6c 65 13 67 02 21                       - le.g.!
 1ac9  00 00 00 00 00 00                       DP      int const near filebuf::openprot
 1acf  0c 6f 70 65 6e 70 72 6f                 - .openpro
 1ad7  74 05 72 12 01 21 07 72                 - t.r..!.r
 1adf  12 03 45 2d 0c 05 72 81                 - ..E-..r.
 1ae7  39 00 06 72 12 02 3b 0c                 - 9..r..;.
 1aef  10 12 04 81 56 66 73 74                 - ....Vfst
 1af7  72 65 61 6d 62 61 73 65                 - reambase
 1aff  05 12 00 81 55 04 48 81                 - ....U.H.
 1b07  48 05 72 81 4a 00 04 48                 - H.r.J..H
 1b0f  81 48 08 72 81 4c 03 45                 - .H.r.L.E
 1b17  2d 0c 04 48 81 48 06 72                 - -..H.H.r
 1b1f  81 4e 01 21 04 48 81 48                 - .N.!.H.H
 1b27  08 72 81 50 03 21 3b 0c                 - .r.P.!;.
 1b2f  04 48 81 48 04 48 81 48                 - .H.H.H.H
 1b37  07 72 81 52 01 81 53 08                 - .r.R..S.
 1b3f  60 11 00 74 00 00 00 15                 - `..t....
 1b47  67 02 21                                - g.!
 1b4a  00 00 00 00 00 00                       DP      fstreambase near & near fstreambase::operator =( fstreambase near & )
 1b50  81 54 6f 70 65 72 61 74                 - .Toperat
 1b58  6f 72 3d 17 67 02 21                    - or=.g.!
 1b5f  00 00 00 00 00 00                       DP      near fstreambase::fstreambase( fstreambase near & )
 1b65  81 54 66 73 74 72 65 61                 - .Tfstrea
 1b6d  6d 62 61 73 65 23 67 04                 - mbase#g.
 1b75  93 22 40 69 61 22 00 69                 - ."@ia".i
 1b7d  61 21                                   - a!
 1b7f  00 00 00 00 00 00                       DP      int near ifstream::__defarg()
 1b85  68 01 66 58 7e 66 73 74                 - h.fX~fst
 1b8d  72 65 61 6d 62 61 73 65                 - reambase
 1b95  17 67 04 21                             - .g.!
 1b99  00 00 00 00 00 00                       DP      near fstreambase::fstreambase( int, char near *, int )
 1b9f  81 51 66 73 74 72 65 61                 - .Qfstrea
 1ba7  6d 62 61 73 65 17 67 04                 - mbase.g.
 1baf  21                                      - !
 1bb0  00 00 00 00 00 00                       DP      near fstreambase::fstreambase( int )
 1bb6  81 4f 66 73 74 72 65 61                 - .Ofstrea
 1bbe  6d 62 61 73 65 17 67 04                 - mbase.g.
 1bc6  21                                      - !
 1bc7  00 00 00 00 00 00                       DP      near fstreambase::fstreambase( char const near *, int, int )
 1bcd  81 4d 66 73 74 72 65 61                 - .Mfstrea
 1bd5  6d 62 61 73 65 17 67 04                 - mbase.g.
 1bdd  21                                      - !
 1bde  00 00 00 00 00 00                       DP      near fstreambase::fstreambase()
 1be4  81 4b 66 73 74 72 65 61                 - .Kfstrea
 1bec  6d 62 61 73 65 12 67 02                 - mbase.g.
 1bf4  21                                      - !
 1bf5  00 00 00 00 00 00                       DP      void near fstreambase::setbuf( char near *, int )
 1bfb  81 47 73 65 74 62 75 66                 - .Gsetbuf
 1c03  11 67 02 21                             - .g.!
 1c07  00 00 00 00 00 00                       DP      filebuf near * near fstreambase::rdbuf() const
 1c0d  81 46 72 64 62 75 66 10                 - .Frdbuf.
 1c15  67 02 21                                - g.!
 1c18  00 00 00 00 00 00                       DP      void near fstreambase::close()
 1c1e  3c 63 6c 6f 73 65 10 67                 - <close.g
 1c26  02 21                                   - .!
 1c28  00 00 00 00 00 00                       DP      void near fstreambase::open( char const near *, int, int )
 1c2e  81 45 6f 70 65 6e 12 67                 - .Eopen.g
 1c36  02 21                                   - .!
 1c38  00 00 00 00 00 00                       DP      void near fstreambase::attach( int )
 1c3e  81 44 61 74 74 61 63 68                 - .Dattach
 1c46  0e 67 02 21                             - .g.!
 1c4a  00 00 00 00 00 00                       DP      int near fstreambase::fd() const
 1c50  81 37 66 64 12 67 02 21                 - .7fd.g.!
 1c58  00 00 00 00 00 00                       DP      int near fstreambase::is_open() const
 1c5e  3f 69 73 5f 6f 70 65 6e                 - ?is_open
 1c66  0f 67 01 84 22 40 69 3e                 - .g.."@i>
 1c6e  5f 5f 76 66 70 74 72 0c                 - __vfptr.
 1c76  67 01 6b 65 5f 5f 76 62                 - g.ke__vb
 1c7e  70 74 72 10 67 08 84 22                 - ptr.g.."
 1c86  04 69 81 38 5f 5f 66 6c                 - .i.8__fl
 1c8e  62 75 66 08 60 02 00 74                 - buf.`..t
 1c96  00 00 00 0a 69 86 61 22                 - ....i.a"
 1c9e  04 69 61 80 9a 06 69 22                 - .ia...i"
 1ca6  00 81 55 08 60 0b 00 80                 - ..U.`...
 1cae  00 00 00 06 69 22 44 80                 - ....i"D.
 1cb6  cf 06 69 22 00 81 49 15                 - ..i"..I.
 1cbe  67 02 21                                - g.!
 1cc1  00 00 00 00 00 00                       DP      ifstream near & near ifstream::operator =( ifstream near & )
 1cc7  81 2e 6f 70 65 72 61 74                 - ..operat
 1ccf  6f 72 3d 14 67 02 21                    - or=.g.!
 1cd6  00 00 00 00 00 00                       DP      near ifstream::ifstream( ifstream near & )
 1cdc  81 2e 69 66 73 74 72 65                 - ..ifstre
 1ce4  61 6d 10 67 02 21                       - am.g.!
 1cea  00 00 00 00 00 00                       DP      void near ifstream::open( char const near *, int, int )
 1cf0  81 2b 6f 70 65 6e 20 67                 - .+open g
 1cf8  02 93 22 40 69 61 22 00                 - .."@ia".
 1d00  69 61 21                                - ia!
 1d03  00 00 00 00 00 00                       DP      int near ifstream::__defarg()
 1d09  68 01 66 58 7e 69 66 73                 - h.fX~ifs
 1d11  74 72 65 61 6d 14 67 02                 - tream.g.
 1d19  21                                      - !
 1d1a  00 00 00 00 00 00                       DP      near ifstream::ifstream( int, char near *, int )
 1d20  81 2a 69 66 73 74 72 65                 - .*ifstre
 1d28  61 6d 14 67 02 21                       - am.g.!
 1d2e  00 00 00 00 00 00                       DP      near ifstream::ifstream( int )
 1d34  81 28 69 66 73 74 72 65                 - .(ifstre
 1d3c  61 6d 14 67 02 21                       - am.g.!
 1d42  00 00 00 00 00 00                       DP      near ifstream::ifstream( char const near *, int, int )
 1d48  81 26 69 66 73 74 72 65                 - .&ifstre
 1d50  61 6d 14 67 02 21                       - am.g.!
 1d56  00 00 00 00 00 00                       DP      near ifstream::ifstream()
 1d5c  81 24 69 66 73 74 72 65                 - .$ifstre
 1d64  61 6d 0f 67 01 84 22 40                 - am.g.."@
 1d6c  69 3e 5f 5f 76 66 70 74                 - i>__vfpt
 1d74  72 08 60 02 00 80 00 00                 - r.`.....
 1d7c  00 0a 69 86 61 22 04 69                 - ..i.a".i
 1d84  61 80 9a 06 69 22 00 81                 - a...i"..
 1d8c  57 04 46 81 21 0d 12 04                 - W.F.!...
 1d94  81 68 6f 66 73 74 72 65                 - .hofstre
 1d9c  61 6d 05 12 00 81 67 04                 - am....g.
 1da4  48 81 5a 05 72 81 5c 00                 - H.Z.r.\.
 1dac  04 48 81 5a 08 72 81 5e                 - .H.Z.r.^
 1db4  03 45 2d 0c 04 48 81 5a                 - .E-..H.Z
 1dbc  06 72 81 60 01 21 04 48                 - .r.`.!.H
 1dc4  81 5a 08 72 81 62 03 21                 - .Z.r.b.!
 1dcc  3b 0c 04 48 81 5a 04 48                 - ;..H.Z.H
 1dd4  81 5a 07 72 81 64 01 81                 - .Z.r.d..
 1ddc  65 08 60 0b 00 7c 00 00                 - e.`..|..
 1de4  00 05 69 22 44 67 06 69                 - ..i"Dg.i
 1dec  22 00 81 49 15 67 02 21                 - "..I.g.!
 1df4  00 00 00 00 00 00                       DP      ofstream near & near ofstream::operator =( ofstream near & )
 1dfa  81 66 6f 70 65 72 61 74                 - .foperat
 1e02  6f 72 3d 14 67 02 21                    - or=.g.!
 1e09  00 00 00 00 00 00                       DP      near ofstream::ofstream( ofstream near & )
 1e0f  81 66 6f 66 73 74 72 65                 - .fofstre
 1e17  61 6d 10 67 02 21                       - am.g.!
 1e1d  00 00 00 00 00 00                       DP      void near ofstream::open( char const near *, int, int )
 1e23  81 2b 6f 70 65 6e 20 67                 - .+open g
 1e2b  02 93 22 40 69 61 22 00                 - .."@ia".
 1e33  69 61 21                                - ia!
 1e36  00 00 00 00 00 00                       DP      int near ofstream::__defarg()
 1e3c  68 01 66 58 7e 6f 66 73                 - h.fX~ofs
 1e44  74 72 65 61 6d 14 67 02                 - tream.g.
 1e4c  21                                      - !
 1e4d  00 00 00 00 00 00                       DP      near ofstream::ofstream( int, char near *, int )
 1e53  81 63 6f 66 73 74 72 65                 - .cofstre
 1e5b  61 6d 14 67 02 21                       - am.g.!
 1e61  00 00 00 00 00 00                       DP      near ofstream::ofstream( int )
 1e67  81 61 6f 66 73 74 72 65                 - .aofstre
 1e6f  61 6d 14 67 02 21                       - am.g.!
 1e75  00 00 00 00 00 00                       DP      near ofstream::ofstream( char const near *, int, int )
 1e7b  81 5f 6f 66 73 74 72 65                 - ._ofstre
 1e83  61 6d 14 67 02 21                       - am.g.!
 1e89  00 00 00 00 00 00                       DP      near ofstream::ofstream()
 1e8f  81 5d 6f 66 73 74 72 65                 - .]ofstre
 1e97  61 6d 0f 67 01 84 22 40                 - am.g.."@
 1e9f  69 3e 5f 5f 76 66 70 74                 - i>__vfpt
 1ea7  72 08 60 02 00 7c 00 00                 - r.`..|..
 1eaf  00 0a 69 86 61 22 04 69                 - ..i.a".i
 1eb7  61 80 9a 06 69 22 00 81                 - a...i"..
 1ebf  67 04 46 81 5a 03 46 20                 - g.F.Z.F 
 1ec7  04 20 02 20 06 21 ff 00                 - . . .!..
 1ecf  81 6b 0b 12 04 81 7c 42                 - .k....|B
 1ed7  69 74 6d 61 70 04 48 81                 - itmap.H.
 1edf  6d 06 72 81 6e 01 3b 04                 - m.r.n.;.
 1ee7  48 81 6d 05 72 81 70 00                 - H.m.r.p.
 1eef  04 72 57 00 04 46 81 6b                 - .rW..F.k
 1ef7  0a 72 0c 04 1a 1a 81 6a                 - .r.....j
 1eff  81 73 05 72 0c 01 3b 07                 - .s.r..;.
 1f07  72 12 03 1a 1a 3b 0a 72                 - r....;.r
 1f0f  12 06 1a 1a 3b 1b 1b 1b                 - ....;...
 1f17  0a 72 12 06 1a 1a 3b 10                 - .r....;.
 1f1f  10 10 04 48 81 6d 04 48                 - ...H.m.H
 1f27  81 6d 07 72 81 79 01 81                 - .m.r.y..
 1f2f  7a 08 60 15 00 0c 03 00                 - z.`.....
 1f37  00 12 67 02 21                          - ..g.!
 1f3c  00 00 00 00 00 00                       DP      near Bitmap::Bitmap( Bitmap const near & )
 1f42  81 7b 42 69 74 6d 61 70                 - .{Bitmap
 1f4a  15 67 02 21                             - .g.!
 1f4e  00 00 00 00 00 00                       DP      int near Bitmap::GetHeight()
 1f54  80 aa 47 65 74 48 65 69                 - ..GetHei
 1f5c  67 68 74 14 67 02 21                    - ght.g.!
 1f63  00 00 00 00 00 00                       DP      int near Bitmap::GetWidth()
 1f69  80 aa 47 65 74 57 69 64                 - ..GetWid
 1f71  74 68 1a 67 02 21                       - th.g.!
 1f77  00 00 00 00 00 00                       DP      void near Bitmap::PutRegularSemi( long unsigned, long unsigned, char near *, float, float, float )
 1f7d  81 78 50 75 74 52 65 67                 - .xPutReg
 1f85  75 6c 61 72 53 65 6d 69                 - ularSemi
 1f8d  1e 67 02 21                             - .g.!
 1f91  00 00 00 00 00 00                       DP      void near Bitmap::PutTransparentSemi( long unsigned, long unsigned, char near *, float, float, float )
 1f97  81 78 50 75 74 54 72 61                 - .xPutTra
 1f9f  6e 73 70 61 72 65 6e 74                 - nsparent
 1fa7  53 65 6d 69 1b 67 02 21                 - Semi.g.!
 1faf  00 00 00 00 00 00                       DP      void near Bitmap::PutRegularFaded( long unsigned, long unsigned, char near *, long, long, long )
 1fb5  81 77 50 75 74 52 65 67                 - .wPutReg
 1fbd  75 6c 61 72 46 61 64 65                 - ularFade
 1fc5  64 1f 67 02 21                          - d.g.!
 1fca  00 00 00 00 00 00                       DP      void near Bitmap::PutTransparentFaded( long unsigned, long unsigned, char near *, long, long, long )
 1fd0  81 77 50 75 74 54 72 61                 - .wPutTra
 1fd8  6e 73 70 61 72 65 6e 74                 - nsparent
 1fe0  46 61 64 65 64 1f 67 02                 - Faded.g.
 1fe8  21                                      - !
 1fe9  00 00 00 00 00 00                       DP      void near Bitmap::PutTransparent18bit( long unsigned, long unsigned, char near * )
 1fef  81 76 50 75 74 54 72 61                 - .vPutTra
 1ff7  6e 73 70 61 72 65 6e 74                 - nsparent
 1fff  31 38 62 69 74 1b 67 02                 - 18bit.g.
 2007  21                                      - !
 2008  00 00 00 00 00 00                       DP      void near Bitmap::PutRegular18bit( long unsigned, long unsigned, char near * )
 200e  81 76 50 75 74 52 65 67                 - .vPutReg
 2016  75 6c 61 72 31 38 62 69                 - ular18bi
 201e  74 1a 67 02 21                          - t.g.!
 2023  00 00 00 00 00 00                       DP      void near Bitmap::PutTransparent( long unsigned, long unsigned, char near * )
 2029  81 76 50 75 74 54 72 61                 - .vPutTra
 2031  6e 73 70 61 72 65 6e 74                 - nsparent
 2039  16 67 02 21                             - .g.!
 203d  00 00 00 00 00 00                       DP      void near Bitmap::PutRegular( long unsigned, long unsigned, char near * )
 2043  81 76 50 75 74 52 65 67                 - .vPutReg
 204b  75 6c 61 72 16 67 02 21                 - ular.g.!
 2053  00 00 00 00 00 00                       DP      int near Bitmap::SaveToDisk( char near * )
 2059  81 75 53 61 76 65 54 6f                 - .uSaveTo
 2061  44 69 73 6b 10 67 02 21                 - Disk.g.!
 2069  00 00 00 00 00 00                       DP      int near Bitmap::Load( char near * )
 206f  81 75 4c 6f 61 64 16 67                 - .uLoad.g
 2077  02 21                                   - .!
 2079  00 00 00 00 00 00                       DP      int near Bitmap::MakeNewBmp( long unsigned, long unsigned, char unsigned near *, char unsigned (near *)[3])
 207f  81 74 4d 61 6b 65 4e 65                 - .tMakeNe
 2087  77 42 6d 70 13 67 02 21                 - wBmp.g.!
 208f  00 00 00 00 00 00                       DP      near Bitmap::~Bitmap()
 2095  81 72 7e 42 69 74 6d 61                 - .r~Bitma
 209d  70 12 67 02 21                          - p.g.!
 20a2  00 00 00 00 00 00                       DP      near Bitmap::Bitmap()
 20a8  81 71 42 69 74 6d 61 70                 - .qBitmap
 20b0  12 67 02 21                             - .g.!
 20b4  00 00 00 00 00 00                       DP      near Bitmap::Bitmap( char near * )
 20ba  81 6f 42 69 74 6d 61 70                 - .oBitmap
 20c2  0f 67 04 84 22 0c 69 81                 - .g..".i.
 20ca  6c 54 68 65 50 61 6c 12                 - lThePal.
 20d2  67 04 84 22 08 69 81 6a                 - g..".i.j
 20da  42 6d 70 53 6f 75 72 63                 - BmpSourc
 20e2  65 0e 67 04 84 22 04 69                 - e.g..".i
 20ea  1a 68 65 69 67 68 74 0a                 - .height.
 20f2  67 04 6b 1a 77 69 64 74                 - g.k.widt
 20fa  68 04 46 81 6d 04 46 81                 - h.F.m.F.
 2102  6d 0d 12 00 81 21 69 66                 - m....!if
 210a  73 74 72 65 61 6d 04 20                 - stream. 
 2112  07 20 0d 12 00 81 5a 6f                 - . ....Zo
 211a  66 73 74 72 65 61 6d 02                 - fstream.
 2122  14                                      - .

No disassembly errors

------------------------------------------------------------

Comdat: int near ios::fail() const  SEGMENT ANY '_TEXT'  0000002c bytes  
 0000  53                                push    ebx
 0001  51                                push    ecx
 0002  52                                push    edx
 0003  56                                push    esi
 0004  57                                push    edi
 0005  55                                push    ebp
 0006  89 e5                             mov     ebp,esp
 0008  81 ec 08 00 00 00                 sub     esp,00000008H
 000e  89 45 fc                          mov     -4H[ebp],eax
 0011  8b 45 fc                          mov     eax,-4H[ebp]
 0014  8b 40 10                          mov     eax,+10H[eax]
 0017  83 e0 03                          and     eax,00000003H
 001a  89 45 f8                          mov     -8H[ebp],eax
 001d  8b 45 f8                          mov     eax,-8H[ebp]
 0020  89 ec                             mov     esp,ebp
 0022  5d                                pop     ebp
 0023  5f                                pop     edi
 0024  5e                                pop     esi
 0025  5a                                pop     edx
 0026  59                                pop     ecx
 0027  5b                                pop     ebx
 0028  c3                                ret     
 0029  8d 40 00                          lea     eax,+0H[eax]

No disassembly errors

------------------------------------------------------------

Comdat: int near ios::operator !() const  SEGMENT ANY '_TEXT'  00000028 bytes  
 0000  53                                push    ebx
 0001  51                                push    ecx
 0002  52                                push    edx
 0003  56                                push    esi
 0004  57                                push    edi
 0005  55                                push    ebp
 0006  89 e5                             mov     ebp,esp
 0008  81 ec 08 00 00 00                 sub     esp,00000008H
 000e  89 45 fc                          mov     -4H[ebp],eax
 0011  8b 45 fc                          mov     eax,-4H[ebp]
 0014  e8 00 00 00 00                    call    int near ios::fail() const
 0019  89 45 f8                          mov     -8H[ebp],eax
 001c  8b 45 f8                          mov     eax,-8H[ebp]
 001f  89 ec                             mov     esp,ebp
 0021  5d                                pop     ebp
 0022  5f                                pop     edi
 0023  5e                                pop     esi
 0024  5a                                pop     edx
 0025  59                                pop     ecx
 0026  5b                                pop     ebx
 0027  c3                                ret     

No disassembly errors

------------------------------------------------------------

Comdat: istream near & near istream::get( char unsigned near & )  SEGMENT ANY '_TEXT'  0000002c bytes  
 0000  53                                push    ebx
 0001  51                                push    ecx
 0002  56                                push    esi
 0003  57                                push    edi
 0004  55                                push    ebp
 0005  89 e5                             mov     ebp,esp
 0007  81 ec 0c 00 00 00                 sub     esp,0000000cH
 000d  89 45 f8                          mov     -8H[ebp],eax
 0010  89 55 fc                          mov     -4H[ebp],edx
 0013  8b 55 fc                          mov     edx,-4H[ebp]
 0016  8b 45 f8                          mov     eax,-8H[ebp]
 0019  e8 00 00 00 00                    call    istream near & near istream::get( char near & )
 001e  89 45 f4                          mov     -0cH[ebp],eax
 0021  8b 45 f4                          mov     eax,-0cH[ebp]
 0024  89 ec                             mov     esp,ebp
 0026  5d                                pop     ebp
 0027  5f                                pop     edi
 0028  5e                                pop     esi
 0029  59                                pop     ecx
 002a  5b                                pop     ebx
 002b  c3                                ret     

No disassembly errors

------------------------------------------------------------

Comdat: istream near & near istream::read( char unsigned near *, int )  SEGMENT ANY '_TEXT'  00000030 bytes  
 0000  51                                push    ecx
 0001  56                                push    esi
 0002  57                                push    edi
 0003  55                                push    ebp
 0004  89 e5                             mov     ebp,esp
 0006  81 ec 10 00 00 00                 sub     esp,00000010H
 000c  89 45 f4                          mov     -0cH[ebp],eax
 000f  89 55 f8                          mov     -8H[ebp],edx
 0012  89 5d fc                          mov     -4H[ebp],ebx
 0015  8b 5d fc                          mov     ebx,-4H[ebp]
 0018  8b 55 f8                          mov     edx,-8H[ebp]
 001b  8b 45 f4                          mov     eax,-0cH[ebp]
 001e  e8 00 00 00 00                    call    istream near & near istream::read( char near *, int )
 0023  89 45 f0                          mov     -10H[ebp],eax
 0026  8b 45 f0                          mov     eax,-10H[ebp]
 0029  89 ec                             mov     esp,ebp
 002b  5d                                pop     ebp
 002c  5f                                pop     edi
 002d  5e                                pop     esi
 002e  59                                pop     ecx
 002f  c3                                ret     

No disassembly errors

------------------------------------------------------------

Comdat: ostream near & near ostream::put( char unsigned )  SEGMENT ANY '_TEXT'  00000030 bytes  
 0000  53                                push    ebx
 0001  51                                push    ecx
 0002  56                                push    esi
 0003  57                                push    edi
 0004  55                                push    ebp
 0005  89 e5                             mov     ebp,esp
 0007  81 ec 0c 00 00 00                 sub     esp,0000000cH
 000d  89 45 f8                          mov     -8H[ebp],eax
 0010  88 55 fc                          mov     -4H[ebp],dl
 0013  31 d2                             xor     edx,edx
 0015  8a 55 fc                          mov     dl,-4H[ebp]
 0018  8b 45 f8                          mov     eax,-8H[ebp]
 001b  e8 00 00 00 00                    call    ostream near & near ostream::put( char )
 0020  89 45 f4                          mov     -0cH[ebp],eax
 0023  8b 45 f4                          mov     eax,-0cH[ebp]
 0026  89 ec                             mov     esp,ebp
 0028  5d                                pop     ebp
 0029  5f                                pop     edi
 002a  5e                                pop     esi
 002b  59                                pop     ecx
 002c  5b                                pop     ebx
 002d  c3                                ret     
 002e  8b c0                             mov     eax,eax

No disassembly errors

------------------------------------------------------------

Comdat: ostream near & near ostream::write( char unsigned const near *, int )  SEGMENT ANY '_TEXT'  00000030 bytes  
 0000  51                                push    ecx
 0001  56                                push    esi
 0002  57                                push    edi
 0003  55                                push    ebp
 0004  89 e5                             mov     ebp,esp
 0006  81 ec 10 00 00 00                 sub     esp,00000010H
 000c  89 45 f4                          mov     -0cH[ebp],eax
 000f  89 55 f8                          mov     -8H[ebp],edx
 0012  89 5d fc                          mov     -4H[ebp],ebx
 0015  8b 5d fc                          mov     ebx,-4H[ebp]
 0018  8b 55 f8                          mov     edx,-8H[ebp]
 001b  8b 45 f4                          mov     eax,-0cH[ebp]
 001e  e8 00 00 00 00                    call    ostream near & near ostream::write( char const near *, int )
 0023  89 45 f0                          mov     -10H[ebp],eax
 0026  8b 45 f0                          mov     eax,-10H[ebp]
 0029  89 ec                             mov     esp,ebp
 002b  5d                                pop     ebp
 002c  5f                                pop     edi
 002d  5e                                pop     esi
 002e  59                                pop     ecx
 002f  c3                                ret     

No disassembly errors

------------------------------------------------------------

Comdat: int near ifstream::__defarg()  SEGMENT ANY '_TEXT'  00000024 bytes  
 0000  53                                push    ebx
 0001  51                                push    ecx
 0002  52                                push    edx
 0003  56                                push    esi
 0004  57                                push    edi
 0005  55                                push    ebp
 0006  89 e5                             mov     ebp,esp
 0008  81 ec 04 00 00 00                 sub     esp,00000004H
 000e  a1 00 00 00 00                    mov     eax,int const near filebuf::openprot
 0013  89 45 fc                          mov     -4H[ebp],eax
 0016  8b 45 fc                          mov     eax,-4H[ebp]
 0019  89 ec                             mov     esp,ebp
 001b  5d                                pop     ebp
 001c  5f                                pop     edi
 001d  5e                                pop     esi
 001e  5a                                pop     edx
 001f  59                                pop     ecx
 0020  5b                                pop     ebx
 0021  c3                                ret     
 0022  8b c0                             mov     eax,eax

No disassembly errors

------------------------------------------------------------

Comdat: void near ifstream::open( char const near *, int, int )  SEGMENT ANY '_TEXT'  00000030 bytes  
 0000  56                                push    esi
 0001  57                                push    edi
 0002  55                                push    ebp
 0003  89 e5                             mov     ebp,esp
 0005  81 ec 10 00 00 00                 sub     esp,00000010H
 000b  89 45 f0                          mov     -10H[ebp],eax
 000e  89 55 f4                          mov     -0cH[ebp],edx
 0011  89 5d f8                          mov     -8H[ebp],ebx
 0014  89 4d fc                          mov     -4H[ebp],ecx
 0017  8b 4d fc                          mov     ecx,-4H[ebp]
 001a  8b 5d f8                          mov     ebx,-8H[ebp]
 001d  8b 55 f4                          mov     edx,-0cH[ebp]
 0020  8b 45 f0                          mov     eax,-10H[ebp]
 0023  e8 00 00 00 00                    call    void near fstreambase::open( char const near *, int, int )
 0028  89 ec                             mov     esp,ebp
 002a  5d                                pop     ebp
 002b  5f                                pop     edi
 002c  5e                                pop     esi
 002d  c3                                ret     
 002e  8b c0                             mov     eax,eax

No disassembly errors

------------------------------------------------------------

Comdat: int near ofstream::__defarg()  SEGMENT ANY '_TEXT'  00000024 bytes  
 0000  53                                push    ebx
 0001  51                                push    ecx
 0002  52                                push    edx
 0003  56                                push    esi
 0004  57                                push    edi
 0005  55                                push    ebp
 0006  89 e5                             mov     ebp,esp
 0008  81 ec 04 00 00 00                 sub     esp,00000004H
 000e  a1 00 00 00 00                    mov     eax,int const near filebuf::openprot
 0013  89 45 fc                          mov     -4H[ebp],eax
 0016  8b 45 fc                          mov     eax,-4H[ebp]
 0019  89 ec                             mov     esp,ebp
 001b  5d                                pop     ebp
 001c  5f                                pop     edi
 001d  5e                                pop     esi
 001e  5a                                pop     edx
 001f  59                                pop     ecx
 0020  5b                                pop     ebx
 0021  c3                                ret     
 0022  8b c0                             mov     eax,eax

No disassembly errors

------------------------------------------------------------

Comdat: void near ofstream::open( char const near *, int, int )  SEGMENT ANY '_TEXT'  0000002e bytes  
 0000  56                                push    esi
 0001  57                                push    edi
 0002  55                                push    ebp
 0003  89 e5                             mov     ebp,esp
 0005  81 ec 10 00 00 00                 sub     esp,00000010H
 000b  89 45 f0                          mov     -10H[ebp],eax
 000e  89 55 f4                          mov     -0cH[ebp],edx
 0011  89 5d f8                          mov     -8H[ebp],ebx
 0014  89 4d fc                          mov     -4H[ebp],ecx
 0017  8b 4d fc                          mov     ecx,-4H[ebp]
 001a  8b 5d f8                          mov     ebx,-8H[ebp]
 001d  8b 55 f4                          mov     edx,-0cH[ebp]
 0020  8b 45 f0                          mov     eax,-10H[ebp]
 0023  e8 00 00 00 00                    call    void near fstreambase::open( char const near *, int, int )
 0028  89 ec                             mov     esp,ebp
 002a  5d                                pop     ebp
 002b  5f                                pop     edi
 002c  5e                                pop     esi
 002d  c3                                ret     

No disassembly errors

------------------------------------------------------------

Comdat: char unsigned const near __typesig[]  SEGMENT ANY 'DGROUP:CONST2'  00000011 bytes  
 0000  04                                      - .
 0001  00 00 00 00                             DD      near ifstream::ifstream()
 0005  00 00 00 00                             DD      near ifstream::ifstream( ifstream near & )
 0009  00 00 00 00                             DD      near ifstream::~ifstream()
 000d  80 00 00 00                             - ....

No disassembly errors

------------------------------------------------------------

Segment: $$TYPES  BYTE USE16  00000089 bytes  
 0000  07 00 01 00 01 00 eb 00                 - ........
 0008  01 00 14 00 01 00 d9 01                 - ........
 0010  01 00 17 00 01 00 fc 01                 - ........
 0018  01 00 1a 00 01 00 9a 02                 - ........
 0020  01 00 1d 00 01 00 b1 02                 - ........
 0028  01 00 20 00 02 00 97 00                 - .. .....
 0030  01 00 2b 00 02 00 b5 00                 - ..+.....
 0038  01 00 03 00 00 00 1a 00                 - ........
 0040  31 00 43 3a 5c 47 4b 49                 - 1.C:\GKI
 0048  54 5c 73 6f 75 72 63 65                 - T\source
 0050  5c 62 69 74 6d 61 70 2e                 - \bitmap.
 0058  63 70 70 00 43 3a 5c 57                 - cpp.C:\W
 0060  41 54 43 4f 4d 5c 68 5c                 - ATCOM\h\
 0068  69 6f 73 74 72 65 61 6d                 - iostream
 0070  2e 68 00 43 3a 5c 57 41                 - .h.C:\WA
 0078  54 43 4f 4d 5c 68 5c 66                 - TCOM\h\f
 0080  73 74 72 65 61 6d 2e 68                 - stream.h
 0088  00                                      - .

No disassembly errors

------------------------------------------------------------

Comdat: char unsigned const near __typesig[]  SEGMENT ANY 'DGROUP:CONST2'  00000011 bytes  
 0000  04                                      - .
 0001  00 00 00 00                             DD      near ofstream::ofstream()
 0005  00 00 00 00                             DD      near ofstream::ofstream( ofstream near & )
 0009  00 00 00 00                             DD      near ofstream::~ofstream()
 000d  7c 00 00 00                             - |...

No disassembly errors

------------------------------------------------------------
